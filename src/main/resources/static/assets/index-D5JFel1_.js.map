{"version":3,"file":"index-D5JFel1_.js","sources":["../../../../../Framework/src/type/csmvector.ts","../../../../../Framework/src/type/csmstring.ts","../../../../../Framework/src/id/cubismid.ts","../../../../../Framework/src/id/cubismidmanager.ts","../../../../../Framework/src/math/cubismmatrix44.ts","../../../../../Framework/src/type/csmrectf.ts","../../../../../Framework/src/rendering/cubismrenderer.ts","../../../../../Framework/src/utils/cubismdebug.ts","../../../../../Framework/src/type/csmmap.ts","../../../../../Framework/src/utils/cubismjsonextension.ts","../../../../../Framework/src/utils/cubismjson.ts","../../../../../Framework/src/live2dcubismframework.ts","../../src/lappdefine.ts","../../src/lappglmanager.ts","../../../../../Framework/src/cubismdefaultparameterid.ts","../../../../../Framework/src/icubismmodelsetting.ts","../../../../../Framework/src/cubismmodelsettingjson.ts","../../../../../Framework/src/effect/cubismbreath.ts","../../../../../Framework/src/effect/cubismeyeblink.ts","../../../../../Framework/src/effect/cubismpose.ts","../../../../../Framework/src/math/cubismmodelmatrix.ts","../../../../../Framework/src/math/cubismvector2.ts","../../../../../Framework/src/math/cubismmath.ts","../../../../../Framework/src/math/cubismtargetpoint.ts","../../../../../Framework/src/motion/acubismmotion.ts","../../../../../Framework/src/motion/cubismexpressionmotion.ts","../../../../../Framework/src/motion/cubismmotionqueueentry.ts","../../../../../Framework/src/motion/cubismmotionqueuemanager.ts","../../../../../Framework/src/motion/cubismexpressionmotionmanager.ts","../../../../../Framework/src/motion/cubismmotioninternal.ts","../../../../../Framework/src/motion/cubismmotionjson.ts","../../../../../Framework/src/motion/cubismmotion.ts","../../../../../Framework/src/motion/cubismmotionmanager.ts","../../../../../Framework/src/physics/cubismphysicsinternal.ts","../../../../../Framework/src/physics/cubismphysicsjson.ts","../../../../../Framework/src/physics/cubismphysics.ts","../../../../../Framework/src/rendering/cubismclippingmanager.ts","../../../../../Framework/src/rendering/cubismshader_webgl.ts","../../../../../Framework/src/rendering/cubismrenderer_webgl.ts","../../../../../Framework/src/model/cubismmodel.ts","../../../../../Framework/src/model/cubismmoc.ts","../../../../../Framework/src/model/cubismmodeluserdatajson.ts","../../../../../Framework/src/model/cubismmodeluserdata.ts","../../../../../Framework/src/model/cubismusermodel.ts","../../src/lapppal.ts","../../src/lappwavfilehandler.ts","../../src/lappmodel.ts","../../src/lapplive2dmanager.ts","../../src/lapptexturemanager.ts","../../../../../Framework/src/math/cubismviewmatrix.ts","../../src/lappsprite.ts","../../src/touchmanager.ts","../../src/lappview.ts","../../src/lappdelegate.ts","../../src/main.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * ベクター型（可変配列型）\r\n */\r\nexport class csmVector<T> {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   * @param iniitalCapacity 初期化後のキャパシティ。データサイズは_capacity * sizeof(T)\r\n   * @param zeroClear trueなら初期化時に確保した領域を0で埋める\r\n   */\r\n  constructor(initialCapacity = 0) {\r\n    if (initialCapacity < 1) {\r\n      this._ptr = [];\r\n      this._capacity = 0;\r\n      this._size = 0;\r\n    } else {\r\n      this._ptr = new Array(initialCapacity);\r\n      this._capacity = initialCapacity;\r\n      this._size = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * インデックスで指定した要素を返す\r\n   */\r\n  public at(index: number): T {\r\n    return this._ptr[index];\r\n  }\r\n\r\n  /**\r\n   * 要素をセット\r\n   * @param index 要素をセットするインデックス\r\n   * @param value セットする要素\r\n   */\r\n  public set(index: number, value: T): void {\r\n    this._ptr[index] = value;\r\n  }\r\n\r\n  /**\r\n   * コンテナを取得する\r\n   */\r\n  public get(offset = 0): T[] {\r\n    const ret: T[] = new Array<T>();\r\n    for (let i = offset; i < this._size; i++) {\r\n      ret.push(this._ptr[i]);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * pushBack処理、コンテナに新たな要素を追加する\r\n   * @param value PushBack処理で追加する値\r\n   */\r\n  public pushBack(value: T): void {\r\n    if (this._size >= this._capacity) {\r\n      this.prepareCapacity(\r\n        this._capacity == 0 ? csmVector.DefaultSize : this._capacity * 2\r\n      );\r\n    }\r\n\r\n    this._ptr[this._size++] = value;\r\n  }\r\n\r\n  /**\r\n   * 컨테이너의 모든 요소를 ​​해제하십시오\r\n   */\r\n  public clear(): void {\r\n    this._ptr.length = 0;\r\n    this._size = 0;\r\n  }\r\n\r\n  /**\r\n   * 컨테이너 요소의 수를 반환합니다\r\n   * @return 컨테이너 요소\r\n   */\r\n  public getSize(): number {\r\n    return this._size;\r\n  }\r\n\r\n  /**\r\n   * 컨테이너의 모든 요소에 대한 할당 처리를 수행하십시오\r\n   * @param newSize 할당 처리 후 크기\r\n   * @param value 요소에 할당 된 값\r\n   */\r\n  public assign(newSize: number, value: T): void {\r\n    const curSize = this._size;\r\n\r\n    if (curSize < newSize) {\r\n      this.prepareCapacity(newSize); // capacity更新\r\n    }\r\n\r\n    for (let i = 0; i < newSize; i++) {\r\n      this._ptr[i] = value;\r\n    }\r\n\r\n    this._size = newSize;\r\n  }\r\n\r\n  /**\r\n   * 크기 변화\r\n   */\r\n  public resize(newSize: number, value: T = null): void {\r\n    this.updateSize(newSize, value, true);\r\n  }\r\n\r\n  /**\r\n   * 크기 변화\r\n   */\r\n  public updateSize(\r\n    newSize: number,\r\n    value: any = null,\r\n    callPlacementNew = true\r\n  ): void {\r\n    const curSize: number = this._size;\r\n\r\n    if (curSize < newSize) {\r\n      this.prepareCapacity(newSize); // capacity고쳐 쓰다\r\n\r\n      if (callPlacementNew) {\r\n        for (let i: number = this._size; i < newSize; i++) {\r\n          if (typeof value == 'function') {\r\n            // new\r\n            this._ptr[i] = JSON.parse(JSON.stringify(new value()));\r\n          } // プリミティブ型なので値渡し\r\n          else {\r\n            this._ptr[i] = value;\r\n          }\r\n        }\r\n      } else {\r\n        for (let i: number = this._size; i < newSize; i++) {\r\n          this._ptr[i] = value;\r\n        }\r\n      }\r\n    } else {\r\n      // newSize <= this._size\r\n      //---\r\n      const sub = this._size - newSize;\r\n      this._ptr.splice(this._size - sub, sub); // 不要なので破棄する\r\n    }\r\n    this._size = newSize;\r\n  }\r\n\r\n  /**\r\n   * コンテナにコンテナ要素を挿入する\r\n   * @param position 挿入する位置\r\n   * @param begin 挿入するコンテナの開始位置\r\n   * @param end 挿入するコンテナの終端位置\r\n   */\r\n  public insert(\r\n    position: iterator<T>,\r\n    begin: iterator<T>,\r\n    end: iterator<T>\r\n  ): void {\r\n    let dstSi: number = position._index;\r\n    const srcSi: number = begin._index;\r\n    const srcEi: number = end._index;\r\n\r\n    const addCount: number = srcEi - srcSi;\r\n\r\n    this.prepareCapacity(this._size + addCount);\r\n\r\n    // 挿入用の既存データをシフトして隙間を作る\r\n    const addSize = this._size - dstSi;\r\n    if (addSize > 0) {\r\n      for (let i = 0; i < addSize; i++) {\r\n        this._ptr.splice(dstSi + i, 0, null);\r\n      }\r\n    }\r\n\r\n    for (let i: number = srcSi; i < srcEi; i++, dstSi++) {\r\n      this._ptr[dstSi] = begin._vector._ptr[i];\r\n    }\r\n\r\n    this._size = this._size + addCount;\r\n  }\r\n\r\n  /**\r\n   * コンテナからインデックスで指定した要素を削除する\r\n   * @param index インデックス値\r\n   * @return true 削除実行\r\n   * @return false 削除範囲外\r\n   */\r\n  public remove(index: number): boolean {\r\n    if (index < 0 || this._size <= index) {\r\n      return false; // 削除範囲外\r\n    }\r\n\r\n    this._ptr.splice(index, 1);\r\n    --this._size;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * コンテナから要素を削除して他の要素をシフトする\r\n   * @param ite 削除する要素\r\n   */\r\n  public erase(ite: iterator<T>): iterator<T> {\r\n    const index: number = ite._index;\r\n    if (index < 0 || this._size <= index) {\r\n      return ite; // 削除範囲外\r\n    }\r\n\r\n    // 削除\r\n    this._ptr.splice(index, 1);\r\n    --this._size;\r\n\r\n    const ite2: iterator<T> = new iterator<T>(this, index); // 終了\r\n    return ite2;\r\n  }\r\n\r\n  /**\r\n   * コンテナのキャパシティを確保する\r\n   * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない.\r\n   */\r\n  public prepareCapacity(newSize: number): void {\r\n    if (newSize > this._capacity) {\r\n      if (this._capacity == 0) {\r\n        this._ptr = new Array(newSize);\r\n        this._capacity = newSize;\r\n      } else {\r\n        this._ptr.length = newSize;\r\n        this._capacity = newSize;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 컨테이너의 주요 요소를 반환합니다\r\n   */\r\n  public begin(): iterator<T> {\r\n    const ite: iterator<T> =\r\n      this._size == 0 ? this.end() : new iterator<T>(this, 0);\r\n    return ite;\r\n  }\r\n\r\n  /**\r\n   * 컨테이너의 터미널 요소를 반환합니다\r\n   */\r\n  public end(): iterator<T> {\r\n    const ite: iterator<T> = new iterator<T>(this, this._size);\r\n    return ite; \r\n  }\r\n\r\n  public getOffset(offset: number): csmVector<T> {\r\n    const newVector = new csmVector<T>();\r\n    newVector._ptr = this.get(offset);\r\n    newVector._size = this.get(offset).length;\r\n    newVector._capacity = this.get(offset).length;\r\n\r\n    return newVector;\r\n  }\r\n\r\n  _ptr: T[]; // 컨테이너 첫 번째 주소\r\n  _size: number; // 컨테이너 요소\r\n  _capacity: number; // 컨테이너 용량\r\n\r\n  static readonly DefaultSize = 10; // 컨테이너 초기화 기본 크기\r\n}\r\n\r\nexport class iterator<T> {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor(v?: csmVector<T>, index?: number) {\r\n    this._vector = v != undefined ? v : null;\r\n    this._index = index != undefined ? index : 0;\r\n  }\r\n\r\n  /**\r\n   * 代入\r\n   */\r\n  public set(ite: iterator<T>): iterator<T> {\r\n    this._index = ite._index;\r\n    this._vector = ite._vector;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 前置き++演算\r\n   */\r\n  public preIncrement(): iterator<T> {\r\n    ++this._index;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 前置き--演算\r\n   */\r\n  public preDecrement(): iterator<T> {\r\n    --this._index;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 後置き++演算子\r\n   */\r\n  public increment(): iterator<T> {\r\n    const iteold = new iterator<T>(this._vector, this._index++); // 古い値を保存\r\n    return iteold;\r\n  }\r\n\r\n  /**\r\n   * 後置き--演算子\r\n   */\r\n  public decrement(): iterator<T> {\r\n    const iteold = new iterator<T>(this._vector, this._index--); // 古い値を保存\r\n    return iteold;\r\n  }\r\n\r\n  /**\r\n   * ptr\r\n   */\r\n  public ptr(): T {\r\n    return this._vector._ptr[this._index];\r\n  }\r\n\r\n  /**\r\n   * =演算子のオーバーロード\r\n   */\r\n  public substitution(ite: iterator<T>): iterator<T> {\r\n    this._index = ite._index;\r\n    this._vector = ite._vector;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * !=演算子のオーバーロード\r\n   */\r\n  public notEqual(ite: iterator<T>): boolean {\r\n    return this._index != ite._index || this._vector != ite._vector;\r\n  }\r\n\r\n  _index: number; // コンテナのインデックス値\r\n  _vector: csmVector<T>; // コンテナ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './csmvector';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const csmVector = $.csmVector;\r\n  export type csmVector<T> = $.csmVector<T>;\r\n  export const iterator = $.iterator;\r\n  export type iterator<T> = $.iterator<T>;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * 文字列クラス。\r\n */\r\nexport class csmString {\r\n  /**\r\n   * 文字列を後方に追加する\r\n   *\r\n   * @param c 追加する文字列\r\n   * @return 更新された文字列\r\n   */\r\n  public append(c: string, length?: number): csmString {\r\n    this.s += length !== undefined ? c.substr(0, length) : c;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 文字サイズを拡張して文字を埋める\r\n   * @param length    拡張する文字数\r\n   * @param v         埋める文字\r\n   * @return 更新された文字列\r\n   */\r\n  public expansion(length: number, v: string): csmString {\r\n    for (let i = 0; i < length; i++) {\r\n      this.append(v);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 文字列の長さをバイト数で取得する\r\n   */\r\n  public getBytes(): number {\r\n    return encodeURIComponent(this.s).replace(/%../g, 'x').length;\r\n  }\r\n\r\n  /**\r\n   * 文字列の長さを返す\r\n   */\r\n  public getLength(): number {\r\n    return this.s.length;\r\n  }\r\n\r\n  /**\r\n   * 文字列比較 <\r\n   * @param s 比較する文字列\r\n   * @return true:    比較する文字列より小さい\r\n   * @return false:   比較する文字列より大きい\r\n   */\r\n  public isLess(s: csmString): boolean {\r\n    return this.s < s.s;\r\n  }\r\n\r\n  /**\r\n   * 文字列比較 >\r\n   * @param s 比較する文字列\r\n   * @return true:    比較する文字列より大きい\r\n   * @return false:   比較する文字列より小さい\r\n   */\r\n  public isGreat(s: csmString): boolean {\r\n    return this.s > s.s;\r\n  }\r\n\r\n  /**\r\n   * 文字列比較 ==\r\n   * @param s 比較する文字列\r\n   * @return true:    比較する文字列と等しい\r\n   * @return false:   比較する文字列と異なる\r\n   */\r\n  public isEqual(s: string): boolean {\r\n    return this.s == s;\r\n  }\r\n\r\n  /**\r\n   * 文字列が空かどうか\r\n   * @return true: 空の文字列\r\n   * @return false: 値が設定されている\r\n   */\r\n  public isEmpty(): boolean {\r\n    return this.s.length == 0;\r\n  }\r\n\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   */\r\n  public constructor(s: string) {\r\n    this.s = s;\r\n  }\r\n\r\n  s: string;\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './csmstring';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const csmString = $.csmString;\r\n  export type csmString = $.csmString;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { csmString } from '../type/csmstring';\r\n\r\n/**\r\n * パラメータ名・パーツ名・Drawable名を保持\r\n *\r\n * パラメータ名・パーツ名・Drawable名を保持するクラス。\r\n *\r\n * @note 指定したID文字列からCubismIdを取得する際はこのクラスの生成メソッドを呼ばず、\r\n *       CubismIdManager().getId(id)を使用してください\r\n */\r\nexport class CubismId {\r\n  /**\r\n   * 内部で使用するCubismIdクラス生成メソッド\r\n   *\r\n   * @param id ID文字列\r\n   * @returns CubismId\r\n   * @note 指定したID文字列からCubismIdを取得する際は\r\n   *       CubismIdManager().getId(id)を使用してください\r\n   */\r\n  public static createIdInternal(id: string | csmString) {\r\n    return new CubismId(id);\r\n  }\r\n\r\n  /**\r\n   * ID名を取得する\r\n   */\r\n  public getString(): csmString {\r\n    return this._id;\r\n  }\r\n\r\n  /**\r\n   * idを比較\r\n   * @param c ID 비교\r\n   * @return 同じならばtrue,異なっていればfalseを返す\r\n   */\r\n  public isEqual(c: string | csmString | CubismId): boolean {\r\n    if (typeof c === 'string') {\r\n      return this._id.isEqual(c);\r\n    } else if (c instanceof csmString) {\r\n      return this._id.isEqual(c.s);\r\n    } else if (c instanceof CubismId) {\r\n      return this._id.isEqual(c._id.s);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * idを比較\r\n   * @param c 比較するid\r\n   * @return 同じならばtrue,異なっていればfalseを返す\r\n   */\r\n  public isNotEqual(c: string | csmString | CubismId): boolean {\r\n    if (typeof c == 'string') {\r\n      return !this._id.isEqual(c);\r\n    } else if (c instanceof csmString) {\r\n      return !this._id.isEqual(c.s);\r\n    } else if (c instanceof CubismId) {\r\n      return !this._id.isEqual(c._id.s);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * プライベートコンストラクタ\r\n   *\r\n   * @note ユーザーによる生成は許可しません\r\n   */\r\n  private constructor(id: string | csmString) {\r\n    if (typeof id === 'string') {\r\n      this._id = new csmString(id);\r\n      return;\r\n    }\r\n\r\n    this._id = id;\r\n  }\r\n\r\n  private _id: csmString; // ID名\r\n}\r\n\r\nexport declare type CubismIdHandle = CubismId;\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismid';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismId = $.CubismId;\r\n  export type CubismId = $.CubismId;\r\n  export type CubismIdHandle = $.CubismIdHandle;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { csmString } from '../type/csmstring';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CubismId } from './cubismid';\r\n\r\n/**\r\n * ID名の管理\r\n *\r\n * ID名を管理する。\r\n */\r\nexport class CubismIdManager {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._ids = new csmVector<CubismId>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    for (let i = 0; i < this._ids.getSize(); ++i) {\r\n      this._ids.set(i, void 0);\r\n    }\r\n    this._ids = null;\r\n  }\r\n\r\n  /**\r\n   * ID名をリストから登録\r\n   *\r\n   * @param ids ID名リスト\r\n   * @param count IDの個数\r\n   */\r\n  public registerIds(ids: string[] | csmString[]): void {\r\n    for (let i = 0; i < ids.length; i++) {\r\n      this.registerId(ids[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ID名を登録\r\n   *\r\n   * @param id ID名\r\n   */\r\n  public registerId(id: string | csmString): CubismId {\r\n    let result: CubismId = null;\r\n\r\n    if ('string' == typeof id) {\r\n      if ((result = this.findId(id)) != null) {\r\n        return result;\r\n      }\r\n\r\n      result = CubismId.createIdInternal(id);\r\n      this._ids.pushBack(result);\r\n    } else {\r\n      return this.registerId(id.s);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * ID名からIDを取得する\r\n   *\r\n   * @param id ID名\r\n   */\r\n  public getId(id: csmString | string): CubismId {\r\n    return this.registerId(id);\r\n  }\r\n\r\n  /**\r\n   * ID名からIDの確認\r\n   *\r\n   * @return true 存在する\r\n   * @return false 存在しない\r\n   */\r\n  public isExist(id: csmString | string): boolean {\r\n    if ('string' == typeof id) {\r\n      return this.findId(id) != null;\r\n    }\r\n    return this.isExist(id.s);\r\n  }\r\n\r\n  /**\r\n   * ID名からIDを検索する。\r\n   *\r\n   * @param id ID名\r\n   * @return 登録されているID。なければNULL。\r\n   */\r\n  private findId(id: string): CubismId {\r\n    for (let i = 0; i < this._ids.getSize(); ++i) {\r\n      if (this._ids.at(i).getString().isEqual(id)) {\r\n        return this._ids.at(i);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private _ids: csmVector<CubismId>; // 登録されているIDのリスト\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismidmanager';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismIdManager = $.CubismIdManager;\r\n  export type CubismIdManager = $.CubismIdManager;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * 4x4の行列\r\n *\r\n * 4x4行列の便利クラス。\r\n */\r\nexport class CubismMatrix44 {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._tr = new Float32Array(16); // 4 * 4のサイズ\r\n    this.loadIdentity();\r\n  }\r\n\r\n  /**\r\n   * 受け取った２つの行列の乗算を行う。\r\n   *\r\n   * @param a 行列a\r\n   * @param b 行列b\r\n   * @return 乗算結果の行列\r\n   */\r\n  public static multiply(\r\n    a: Float32Array,\r\n    b: Float32Array,\r\n    dst: Float32Array\r\n  ): void {\r\n    const c: Float32Array = new Float32Array([\r\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n      0.0\r\n    ]);\r\n\r\n    const n = 4;\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n      for (let j = 0; j < n; ++j) {\r\n        for (let k = 0; k < n; ++k) {\r\n          c[j + i * 4] += a[k + i * 4] * b[j + k * 4];\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < 16; ++i) {\r\n      dst[i] = c[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 単位行列に初期化する\r\n   */\r\n  public loadIdentity(): void {\r\n    const c: Float32Array = new Float32Array([\r\n      1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,\r\n      1.0\r\n    ]);\r\n\r\n    this.setMatrix(c);\r\n  }\r\n\r\n  /**\r\n   * 매트릭스를 설정하십시오\r\n   *\r\n   * @param tr 4x4 매트릭스는 16 개의 부동 소수점으로 표시됩니다\r\n   */\r\n  public setMatrix(tr: Float32Array): void {\r\n    for (let i = 0; i < 16; ++i) {\r\n      this._tr[i] = tr[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 行列を浮動小数点数の配列で取得\r\n   *\r\n   * @return 16個の浮動小数点数で表される4x4の行列\r\n   */\r\n  public getArray(): Float32Array {\r\n    return this._tr;\r\n  }\r\n\r\n  /**\r\n   * X軸の拡大率を取得\r\n   * @return X軸の拡大率\r\n   */\r\n  public getScaleX(): number {\r\n    return this._tr[0];\r\n  }\r\n\r\n  /**\r\n   * Y軸の拡大率を取得する\r\n   *\r\n   * @return Y軸の拡大率\r\n   */\r\n  public getScaleY(): number {\r\n    return this._tr[5];\r\n  }\r\n\r\n  /**\r\n   * x 축의 이동량을 얻습니다\r\n   * @return x- 축 이동량\r\n   */\r\n  public getTranslateX(): number {\r\n    return this._tr[12];\r\n  }\r\n\r\n  /**\r\n   * Y軸の移動量を取得\r\n   * @return Y軸の移動量\r\n   */\r\n  public getTranslateY(): number {\r\n    return this._tr[13];\r\n  }\r\n\r\n  /**\r\n   * 현재 행렬에서 x 축의 값을 계산합니다.\r\n   *\r\n   * @param src x 축 값\r\n   * @return 현재 행렬에서 계산 된 x 축 값\r\n   */\r\n  public transformX(src: number): number {\r\n    return this._tr[0] * src + this._tr[12];\r\n  }\r\n\r\n  /**\r\n   * 현재 행렬에서 y 축의 값을 계산합니다.\r\n   *\r\n   * @param src y 축 값\r\n   * @return 현재 행렬에서 계산 된 y 축의 값\r\n   */\r\n  public transformY(src: number): number {\r\n    return this._tr[5] * src + this._tr[13];\r\n  }\r\n\r\n  /**\r\n   * X軸の値を現在の行列で逆計算\r\n   */\r\n  public invertTransformX(src: number): number {\r\n    return (src - this._tr[12]) / this._tr[0];\r\n  }\r\n\r\n  /**\r\n   * Y軸の値を現在の行列で逆計算\r\n   */\r\n  public invertTransformY(src: number): number {\r\n    return (src - this._tr[13]) / this._tr[5];\r\n  }\r\n\r\n  /**\r\n   * 현재 매트릭스 위치에서 이동합니다\r\n   *\r\n   * 현재 행렬 위치에서 상대적으로 전송합니다.\r\n   *\r\n   * @param x x- 축 이동량\r\n   * @param y y 축 이동량\r\n   */\r\n  public translateRelative(x: number, y: number): void {\r\n    const tr1: Float32Array = new Float32Array([\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      x,\r\n      y,\r\n      0.0,\r\n      1.0\r\n    ]);\r\n\r\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n  }\r\n\r\n  /**\r\n   * 現在の行列の位置を移動\r\n   *\r\n   * 現在の行列の位置を指定した位置へ移動する\r\n   *\r\n   * @param x X軸の移動量\r\n   * @param y y軸の移動量\r\n   */\r\n  public translate(x: number, y: number): void {\r\n    this._tr[12] = x;\r\n    this._tr[13] = y;\r\n  }\r\n\r\n  /**\r\n   * 現在の行列のX軸の位置を指定した位置へ移動する\r\n   *\r\n   * @param x X軸の移動量\r\n   */\r\n  public translateX(x: number): void {\r\n    this._tr[12] = x;\r\n  }\r\n\r\n  /**\r\n   * 現在の行列のY軸の位置を指定した位置へ移動する\r\n   *\r\n   * @param y Y軸の移動量\r\n   */\r\n  public translateY(y: number): void {\r\n    this._tr[13] = y;\r\n  }\r\n\r\n  /**\r\n   * 現在の行列の拡大率を相対的に設定する\r\n   *\r\n   * @param x X軸の拡大率\r\n   * @param y Y軸の拡大率\r\n   */\r\n  public scaleRelative(x: number, y: number): void {\r\n    const tr1: Float32Array = new Float32Array([\r\n      x,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      y,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0\r\n    ]);\r\n\r\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n  }\r\n\r\n  /**\r\n   * 現在の行列の拡大率を指定した倍率に設定する\r\n   *\r\n   * @param x X軸の拡大率\r\n   * @param y Y軸の拡大率\r\n   */\r\n  public scale(x: number, y: number): void {\r\n    this._tr[0] = x;\r\n    this._tr[5] = y;\r\n  }\r\n\r\n  /**\r\n   * 引数で与えられた行列にこの行列を乗算する。\r\n   * (引数で与えられた行列) * (この行列)\r\n   *\r\n   * @note 関数名と実際の計算内容に乖離があるため、今後計算順が修正される可能性があります。\r\n   * @param m 行列\r\n   */\r\n  public multiplyByMatrix(m: CubismMatrix44): void {\r\n    CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);\r\n  }\r\n\r\n  /**\r\n   * オブジェクトのコピーを生成する\r\n   */\r\n  public clone(): CubismMatrix44 {\r\n    const cloneMatrix: CubismMatrix44 = new CubismMatrix44();\r\n\r\n    for (let i = 0; i < this._tr.length; i++) {\r\n      cloneMatrix._tr[i] = this._tr[i];\r\n    }\r\n\r\n    return cloneMatrix;\r\n  }\r\n\r\n  protected _tr: Float32Array; // 4x4行列データ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmatrix44';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMatrix44 = $.CubismMatrix44;\r\n  export type CubismMatrix44 = $.CubismMatrix44;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * 矩形形状（座標・長さはfloat値）を定義するクラス\r\n */\r\nexport class csmRect {\r\n  /**\r\n   * コンストラクタ\r\n   * @param x 左端X座標\r\n   * @param y 上端Y座標\r\n   * @param w 幅\r\n   * @param h 高さ\r\n   */\r\n  public constructor(x?: number, y?: number, w?: number, h?: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = w;\r\n    this.height = h;\r\n  }\r\n\r\n  /**\r\n   * 矩形中央のX座標を取得する\r\n   */\r\n  public getCenterX(): number {\r\n    return this.x + 0.5 * this.width;\r\n  }\r\n\r\n  /**\r\n   * 矩形中央のY座標を取得する\r\n   */\r\n  public getCenterY(): number {\r\n    return this.y + 0.5 * this.height;\r\n  }\r\n\r\n  /**\r\n   * 右側のX座標を取得する\r\n   */\r\n  public getRight(): number {\r\n    return this.x + this.width;\r\n  }\r\n\r\n  /**\r\n   * 下端のY座標を取得する\r\n   */\r\n  public getBottom(): number {\r\n    return this.y + this.height;\r\n  }\r\n\r\n  /**\r\n   * 矩形に値をセットする\r\n   * @param r 矩形のインスタンス\r\n   */\r\n  public setRect(r: csmRect): void {\r\n    this.x = r.x;\r\n    this.y = r.y;\r\n    this.width = r.width;\r\n    this.height = r.height;\r\n  }\r\n\r\n  /**\r\n   * 矩形中央を軸にして縦横を拡縮する\r\n   * @param w 幅方向に拡縮する量\r\n   * @param h 高さ方向に拡縮する量\r\n   */\r\n  public expand(w: number, h: number) {\r\n    this.x -= w;\r\n    this.y -= h;\r\n    this.width += w * 2.0;\r\n    this.height += h * 2.0;\r\n  }\r\n\r\n  public x: number; // 左端X座標\r\n  public y: number; // 上端Y座標\r\n  public width: number; // 幅\r\n  public height: number; // 高さ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './csmrectf';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const csmRect = $.csmRect;\r\n  export type csmRect = $.csmRect;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmRect } from '../type/csmrectf';\r\nimport { ICubismClippingManager } from './cubismclippingmanager';\r\n\r\n/**\r\n * モデル描画を処理するレンダラ\r\n *\r\n * サブクラスに環境依存の描画命令を記述する。\r\n */\r\nexport abstract class CubismRenderer {\r\n  /**\r\n   * レンダラのインスタンスを生成して取得する\r\n   *\r\n   * @return レンダラのインスタンス\r\n   */\r\n  public static create(): CubismRenderer {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * レンダラのインスタンスを解放する\r\n   */\r\n  public static delete(renderer: CubismRenderer): void {\r\n    renderer = null;\r\n  }\r\n\r\n  /**\r\n   * レンダラの初期化処理を実行する\r\n   * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\r\n   * @param model モデルのインスタンス\r\n   */\r\n  public initialize(model: CubismModel): void {\r\n    this._model = model;\r\n  }\r\n\r\n  /**\r\n   * モデルを描画する\r\n   */\r\n  public drawModel(): void {\r\n    if (this.getModel() == null) return;\r\n\r\n    this.saveProfile();\r\n\r\n    this.doDrawModel();\r\n\r\n    this.restoreProfile();\r\n  }\r\n\r\n  /**\r\n   * Model-View-Projection 行列をセットする\r\n   * 配列は複製されるので、元の配列は外で破棄して良い\r\n   * @param matrix44 Model-View-Projection 行列\r\n   */\r\n  public setMvpMatrix(matrix44: CubismMatrix44): void {\r\n    this._mvpMatrix4x4.setMatrix(matrix44.getArray());\r\n  }\r\n\r\n  /**\r\n   * Model-View-Projection 行列を取得する\r\n   * @return Model-View-Projection 行列\r\n   */\r\n  public getMvpMatrix(): CubismMatrix44 {\r\n    return this._mvpMatrix4x4;\r\n  }\r\n\r\n  /**\r\n   * モデルの色をセットする\r\n   * 各色0.0~1.0の間で指定する（1.0が標準の状態）\r\n   * @param red 赤チャンネルの値\r\n   * @param green 緑チャンネルの値\r\n   * @param blue 青チャンネルの値\r\n   * @param alpha αチャンネルの値\r\n   */\r\n  public setModelColor(\r\n    red: number,\r\n    green: number,\r\n    blue: number,\r\n    alpha: number\r\n  ): void {\r\n    if (red < 0.0) {\r\n      red = 0.0;\r\n    } else if (red > 1.0) {\r\n      red = 1.0;\r\n    }\r\n\r\n    if (green < 0.0) {\r\n      green = 0.0;\r\n    } else if (green > 1.0) {\r\n      green = 1.0;\r\n    }\r\n\r\n    if (blue < 0.0) {\r\n      blue = 0.0;\r\n    } else if (blue > 1.0) {\r\n      blue = 1.0;\r\n    }\r\n\r\n    if (alpha < 0.0) {\r\n      alpha = 0.0;\r\n    } else if (alpha > 1.0) {\r\n      alpha = 1.0;\r\n    }\r\n\r\n    this._modelColor.r = red;\r\n    this._modelColor.g = green;\r\n    this._modelColor.b = blue;\r\n    this._modelColor.a = alpha;\r\n  }\r\n\r\n  /**\r\n   * モデルの色を取得する\r\n   * 各色0.0~1.0の間で指定する(1.0が標準の状態)\r\n   *\r\n   * @return RGBAのカラー情報\r\n   */\r\n  public getModelColor(): CubismTextureColor {\r\n    return JSON.parse(JSON.stringify(this._modelColor));\r\n  }\r\n\r\n  /**\r\n   * 透明度を考慮したモデルの色を計算する。\r\n   *\r\n   * @param opacity 透明度\r\n   *\r\n   * @return RGBAのカラー情報\r\n   */\r\n  getModelColorWithOpacity(opacity: number): CubismTextureColor {\r\n    const modelColorRGBA: CubismTextureColor = this.getModelColor();\r\n    modelColorRGBA.a *= opacity;\r\n    if (this.isPremultipliedAlpha()) {\r\n      modelColorRGBA.r *= modelColorRGBA.a;\r\n      modelColorRGBA.g *= modelColorRGBA.a;\r\n      modelColorRGBA.b *= modelColorRGBA.a;\r\n    }\r\n    return modelColorRGBA;\r\n  }\r\n\r\n  /**\r\n   * 乗算済みαの有効・無効をセットする\r\n   * 有効にするならtrue、無効にするならfalseをセットする\r\n   */\r\n  public setIsPremultipliedAlpha(enable: boolean): void {\r\n    this._isPremultipliedAlpha = enable;\r\n  }\r\n\r\n  /**\r\n   * 乗算済みαの有効・無効を取得する\r\n   * @return true 乗算済みのα有効\r\n   * @return false 乗算済みのα無効\r\n   */\r\n  public isPremultipliedAlpha(): boolean {\r\n    return this._isPremultipliedAlpha;\r\n  }\r\n\r\n  /**\r\n   * カリング（片面描画）の有効・無効をセットする。\r\n   * 有効にするならtrue、無効にするならfalseをセットする\r\n   */\r\n  public setIsCulling(culling: boolean): void {\r\n    this._isCulling = culling;\r\n  }\r\n\r\n  /**\r\n   * カリング（片面描画）の有効・無効を取得する。\r\n   * @return true カリング有効\r\n   * @return false カリング無効\r\n   */\r\n  public isCulling(): boolean {\r\n    return this._isCulling;\r\n  }\r\n\r\n  /**\r\n   * テクスチャの異方性フィルタリングのパラメータをセットする\r\n   * パラメータ値の影響度はレンダラの実装に依存する\r\n   * @param n パラメータの値\r\n   */\r\n  public setAnisotropy(n: number): void {\r\n    this._anisotropy = n;\r\n  }\r\n\r\n  /**\r\n   * テクスチャの異方性フィルタリングのパラメータをセットする\r\n   * @return 異方性フィルタリングのパラメータ\r\n   */\r\n  public getAnisotropy(): number {\r\n    return this._anisotropy;\r\n  }\r\n\r\n  /**\r\n   * レンダリングするモデルを取得する\r\n   * @return レンダリングするモデル\r\n   */\r\n  public getModel(): CubismModel {\r\n    return this._model;\r\n  }\r\n\r\n  /**\r\n   * マスク描画の方式を変更する。\r\n   * falseの場合、マスクを1枚のテクスチャに分割してレンダリングする（デフォルト）\r\n   * 高速だが、マスク個数の上限が36に限定され、質も荒くなる\r\n   * trueの場合、パーツ描画の前にその都度必要なマスクを描き直す\r\n   * レンダリング品質は高いが描画処理負荷は増す\r\n   * @param high 高精細マスクに切り替えるか？\r\n   */\r\n  public useHighPrecisionMask(high: boolean): void {\r\n    this._useHighPrecisionMask = high;\r\n  }\r\n\r\n  /**\r\n   * マスクの描画方式を取得する\r\n   * @return true 高精細方式\r\n   * @return false デフォルト\r\n   */\r\n  public isUsingHighPrecisionMask(): boolean {\r\n    return this._useHighPrecisionMask;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  protected constructor() {\r\n    this._isCulling = false;\r\n    this._isPremultipliedAlpha = false;\r\n    this._anisotropy = 0.0;\r\n    this._model = null;\r\n    this._modelColor = new CubismTextureColor();\r\n    this._useHighPrecisionMask = false;\r\n\r\n    // 単位行列に初期化\r\n    this._mvpMatrix4x4 = new CubismMatrix44();\r\n    this._mvpMatrix4x4.loadIdentity();\r\n  }\r\n\r\n  /**\r\n   * モデル描画の実装\r\n   */\r\n  public abstract doDrawModel(): void;\r\n\r\n  /**\r\n   * モデル描画直前のレンダラのステートを保持する\r\n   */\r\n  protected abstract saveProfile(): void;\r\n\r\n  /**\r\n   * モデル描画直前のレンダラのステートを復帰する\r\n   */\r\n  protected abstract restoreProfile(): void;\r\n\r\n  /**\r\n   * レンダラが保持する静的なリソースを開放する\r\n   */\r\n  public static staticRelease: any;\r\n\r\n  protected _mvpMatrix4x4: CubismMatrix44; // Model-View-Projection 行列\r\n  protected _modelColor: CubismTextureColor; // モデル自体のカラー（RGBA）\r\n  protected _isCulling: boolean; // カリングが有効ならtrue\r\n  protected _isPremultipliedAlpha: boolean; // 乗算済みαならtrue\r\n  protected _anisotropy: any; // テクスチャの異方性フィルタリングのパラメータ\r\n  protected _model: CubismModel; // レンダリング対象のモデル\r\n  protected _useHighPrecisionMask: boolean; // falseの場合、マスクを纏めて描画する trueの場合、マスクはパーツ描画ごとに書き直す\r\n}\r\n\r\nexport enum CubismBlendMode {\r\n  CubismBlendMode_Normal = 0, // 通常\r\n  CubismBlendMode_Additive = 1, // 加算\r\n  CubismBlendMode_Multiplicative = 2 // 乗算\r\n}\r\n\r\n/**\r\n * テクスチャの色をRGBAで扱うためのクラス\r\n */\r\nexport class CubismTextureColor {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  constructor(r = 1.0, g = 1.0, b = 1.0, a = 1.0) {\r\n    this.r = r;\r\n    this.g = g;\r\n    this.b = b;\r\n    this.a = a;\r\n  }\r\n\r\n  r: number; // 赤チャンネル\r\n  g: number; // 緑チャンネル\r\n  b: number; // 青チャンネル\r\n  a: number; // αチャンネル\r\n}\r\n\r\n/**\r\n * クリッピングマスクのコンテキスト\r\n */\r\nexport abstract class CubismClippingContext {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   */\r\n  public constructor(clippingDrawableIndices: Int32Array, clipCount: number) {\r\n    // クリップしている（＝マスク用の）Drawableのインデックスリスト\r\n    this._clippingIdList = clippingDrawableIndices;\r\n\r\n    // マスクの数\r\n    this._clippingIdCount = clipCount;\r\n\r\n    this._allClippedDrawRect = new csmRect();\r\n    this._layoutBounds = new csmRect();\r\n\r\n    this._clippedDrawableIndexList = [];\r\n\r\n    this._matrixForMask = new CubismMatrix44();\r\n    this._matrixForDraw = new CubismMatrix44();\r\n\r\n    this._bufferIndex = 0;\r\n  }\r\n\r\n  /**\r\n   * このマスクを管理するマネージャのインスタンスを取得する\r\n   * @return クリッピングマネージャのインスタンス\r\n   */\r\n  public abstract getClippingManager(): ICubismClippingManager;\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    if (this._layoutBounds != null) {\r\n      this._layoutBounds = null;\r\n    }\r\n\r\n    if (this._allClippedDrawRect != null) {\r\n      this._allClippedDrawRect = null;\r\n    }\r\n\r\n    if (this._clippedDrawableIndexList != null) {\r\n      this._clippedDrawableIndexList = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * このマスクにクリップされる描画オブジェクトを追加する\r\n   *\r\n   * @param drawableIndex クリッピング対象に追加する描画オブジェクトのインデックス\r\n   */\r\n  public addClippedDrawable(drawableIndex: number) {\r\n    this._clippedDrawableIndexList.push(drawableIndex);\r\n  }\r\n\r\n  public _isUsing: boolean; // 現在の描画状態でマスクの準備が必要ならtrue\r\n  public readonly _clippingIdList: Int32Array; // クリッピングマスクのIDリスト\r\n  public _clippingIdCount: number; // クリッピングマスクの数\r\n  public _layoutChannelIndex: number; // RGBAのいずれのチャンネルにこのクリップを配置するか（0:R, 1:G, 2:B, 3:A）\r\n  public _layoutBounds: csmRect; // マスク用チャンネルのどの領域にマスクを入れるか（View座標-1~1, UVは0~1に直す）\r\n  public _allClippedDrawRect: csmRect; // このクリッピングで、クリッピングされるすべての描画オブジェクトの囲み矩形（毎回更新）\r\n  public _matrixForMask: CubismMatrix44; // マスクの位置計算結果を保持する行列\r\n  public _matrixForDraw: CubismMatrix44; // 描画オブジェクトの位置計算結果を保持する行列\r\n  public _clippedDrawableIndexList: number[]; // このマスクにクリップされる描画オブジェクトのリスト\r\n  public _bufferIndex: number; // このマスクが割り当てられるレンダーテクスチャ（フレームバッファ）やカラーバッファのインデックス\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismrenderer';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismBlendMode = $.CubismBlendMode;\r\n  export type CubismBlendMode = $.CubismBlendMode;\r\n  export const CubismRenderer = $.CubismRenderer;\r\n  export type CubismRenderer = $.CubismRenderer;\r\n  export const CubismTextureColor = $.CubismTextureColor;\r\n  export type CubismTextureColor = $.CubismTextureColor;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport {\r\n  CSM_LOG_LEVEL,\r\n  CSM_LOG_LEVEL_DEBUG,\r\n  CSM_LOG_LEVEL_ERROR,\r\n  CSM_LOG_LEVEL_INFO,\r\n  CSM_LOG_LEVEL_VERBOSE,\r\n  CSM_LOG_LEVEL_WARNING\r\n} from '../cubismframeworkconfig';\r\nimport { CubismFramework, LogLevel } from '../live2dcubismframework';\r\n\r\nexport const CubismLogPrint = (level: LogLevel, fmt: string, args: any[]) => {\r\n  CubismDebug.print(level, '[CSM]' + fmt, args);\r\n};\r\n\r\nexport const CubismLogPrintIn = (level: LogLevel, fmt: string, args: any[]) => {\r\n  CubismLogPrint(level, fmt + '\\n', args);\r\n};\r\n\r\nexport const CSM_ASSERT = (expr: any) => {\r\n  console.assert(expr);\r\n};\r\n\r\nexport let CubismLogVerbose: (fmt: string, ...args: any[]) => void;\r\nexport let CubismLogDebug: (fmt: string, ...args: any[]) => void;\r\nexport let CubismLogInfo: (fmt: string, ...args: any[]) => void;\r\nexport let CubismLogWarning: (fmt: string, ...args: any[]) => void;\r\nexport let CubismLogError: (fmt: string, ...args: any[]) => void;\r\n\r\nif (CSM_LOG_LEVEL <= CSM_LOG_LEVEL_VERBOSE) {\r\n  CubismLogVerbose = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Verbose, '[V]' + fmt, args);\r\n  };\r\n\r\n  CubismLogDebug = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Debug, '[D]' + fmt, args);\r\n  };\r\n\r\n  CubismLogInfo = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Info, '[I]' + fmt, args);\r\n  };\r\n\r\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n  };\r\n\r\n  CubismLogError = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n  };\r\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_DEBUG) {\r\n  CubismLogDebug = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Debug, '[D]' + fmt, args);\r\n  };\r\n\r\n  CubismLogInfo = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Info, '[I]' + fmt, args);\r\n  };\r\n\r\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n  };\r\n\r\n  CubismLogError = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n  };\r\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_INFO) {\r\n  CubismLogInfo = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Info, '[I]' + fmt, args);\r\n  };\r\n\r\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n  };\r\n\r\n  CubismLogError = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n  };\r\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_WARNING) {\r\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n  };\r\n\r\n  CubismLogError = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n  };\r\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_ERROR) {\r\n  CubismLogError = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n  };\r\n}\r\n\r\n/**\r\n * デバッグ用のユーティリティクラス。\r\n * ログの出力、バイトのダンプなど\r\n */\r\nexport class CubismDebug {\r\n  /**\r\n   * ログを出力する。第一引数にログレベルを設定する。\r\n   * CubismFramework.initialize()時にオプションで設定されたログ出力レベルを下回る場合はログに出さない。\r\n   *\r\n   * @param logLevel ログレベルの設定\r\n   * @param format 書式付き文字列\r\n   * @param args 可変長引数\r\n   */\r\n  public static print(logLevel: LogLevel, format: string, args?: any[]): void {\r\n    // オプションで設定されたログ出力レベルを下回る場合はログに出さない\r\n    if (logLevel < CubismFramework.getLoggingLevel()) {\r\n      return;\r\n    }\r\n\r\n    const logPrint: Live2DCubismCore.csmLogFunction =\r\n      CubismFramework.coreLogFunction;\r\n\r\n    if (!logPrint) return;\r\n\r\n    const buffer: string = format.replace(/\\{(\\d+)\\}/g, (m, k) => {\r\n      return args[k];\r\n    });\r\n    logPrint(buffer);\r\n  }\r\n\r\n  /**\r\n   * データから指定した長さだけダンプ出力する。\r\n   * CubismFramework.initialize()時にオプションで設定されたログ出力レベルを下回る場合はログに出さない。\r\n   *\r\n   * @param logLevel ログレベルの設定\r\n   * @param data ダンプするデータ\r\n   * @param length ダンプする長さ\r\n   */\r\n  public static dumpBytes(\r\n    logLevel: LogLevel,\r\n    data: Uint8Array,\r\n    length: number\r\n  ): void {\r\n    for (let i = 0; i < length; i++) {\r\n      if (i % 16 == 0 && i > 0) this.print(logLevel, '\\n');\r\n      else if (i % 8 == 0 && i > 0) this.print(logLevel, '  ');\r\n      this.print(logLevel, '{0} ', [data[i] & 0xff]);\r\n    }\r\n\r\n    this.print(logLevel, '\\n');\r\n  }\r\n\r\n  /**\r\n   * private コンストラクタ\r\n   */\r\n  private constructor() {}\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismdebug';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismDebug = $.CubismDebug;\r\n  export type CubismDebug = $.CubismDebug;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismLogDebug } from '../utils/cubismdebug';\r\n\r\n/**\r\n * Key-Valueのペアを定義するクラス\r\n * csmMapクラスの内部データで使用する。\r\n */\r\nexport class csmPair<_KeyT, _ValT> {\r\n  /**\r\n   * コンストラクタ\r\n   * @param key Keyとしてセットする値\r\n   * @param value Valueとしてセットする値\r\n   */\r\n  public constructor(key?: _KeyT, value?: _ValT) {\r\n    this.first = key == undefined ? null : key;\r\n\r\n    this.second = value == undefined ? null : value;\r\n  }\r\n\r\n  public first: _KeyT; // keyとして用いる変数\r\n  public second: _ValT; // valueとして用いる変数\r\n}\r\n\r\n/**\r\n * マップ型\r\n */\r\nexport class csmMap<_KeyT, _ValT> {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   * @param size 初期化時点で確保するサイズ\r\n   */\r\n  public constructor(size?: number) {\r\n    if (size != undefined) {\r\n      if (size < 1) {\r\n        this._keyValues = [];\r\n        this._dummyValue = null;\r\n        this._size = 0;\r\n      } else {\r\n        this._keyValues = new Array(size);\r\n        this._size = size;\r\n      }\r\n    } else {\r\n      this._keyValues = [];\r\n      this._dummyValue = null;\r\n      this._size = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * デストラクタ\r\n   */\r\n  public release() {\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * キーを追加する\r\n   * @param key 新たに追加するキー\r\n   */\r\n  public appendKey(key: _KeyT): void {\r\n    // 新しくKey/Valueのペアを作る\r\n    this.prepareCapacity(this._size + 1, false); // 1つ以上入る隙間を作る\r\n    // 新しいkey/valueのインデックスは_size\r\n\r\n    this._keyValues[this._size] = new csmPair<_KeyT, _ValT>(key);\r\n    this._size += 1;\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[key]のオーバーロード(get)\r\n   * @param key 添字から特定されるValue値\r\n   */\r\n  public getValue(key: _KeyT): _ValT {\r\n    let found = -1;\r\n\r\n    for (let i = 0; i < this._size; i++) {\r\n      if (this._keyValues[i].first == key) {\r\n        found = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (found >= 0) {\r\n      return this._keyValues[found].second;\r\n    } else {\r\n      this.appendKey(key); // 新規キーを追加\r\n      return this._keyValues[this._size - 1].second;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[key]のオーバーロード(set)\r\n   * @param key 添字から特定されるValue値\r\n   * @param value 代入するValue値\r\n   */\r\n  public setValue(key: _KeyT, value: _ValT): void {\r\n    let found = -1;\r\n\r\n    for (let i = 0; i < this._size; i++) {\r\n      if (this._keyValues[i].first == key) {\r\n        found = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (found >= 0) {\r\n      this._keyValues[found].second = value;\r\n    } else {\r\n      this.appendKey(key); // 新規キーを追加\r\n      this._keyValues[this._size - 1].second = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 引数で渡したKeyを持つ要素が存在するか\r\n   * @param key 存在を確認するkey\r\n   * @return true 引数で渡したkeyを持つ要素が存在する\r\n   * @return false 引数で渡したkeyを持つ要素が存在しない\r\n   */\r\n  public isExist(key: _KeyT): boolean {\r\n    for (let i = 0; i < this._size; i++) {\r\n      if (this._keyValues[i].first == key) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * keyValueのポインタを全て解放する\r\n   */\r\n  public clear(): void {\r\n    this._keyValues = void 0;\r\n    this._keyValues = null;\r\n    this._keyValues = [];\r\n\r\n    this._size = 0;\r\n  }\r\n\r\n  /**\r\n   * コンテナのサイズを取得する\r\n   *\r\n   * @return コンテナのサイズ\r\n   */\r\n  public getSize(): number {\r\n    return this._size;\r\n  }\r\n\r\n  /**\r\n   * コンテナのキャパシティを確保する\r\n   * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない。\r\n   * @param fitToSize trueなら指定したサイズに合わせる。falseならサイズを2倍確保しておく。\r\n   */\r\n  public prepareCapacity(newSize: number, fitToSize: boolean): void {\r\n    if (newSize > this._keyValues.length) {\r\n      if (this._keyValues.length == 0) {\r\n        if (!fitToSize && newSize < csmMap.DefaultSize)\r\n          newSize = csmMap.DefaultSize;\r\n        this._keyValues.length = newSize;\r\n      } else {\r\n        if (!fitToSize && newSize < this._keyValues.length * 2)\r\n          newSize = this._keyValues.length * 2;\r\n        this._keyValues.length = newSize;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンテナの先頭要素を返す\r\n   */\r\n  public begin(): iterator<_KeyT, _ValT> {\r\n    const ite: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(this, 0);\r\n    return ite;\r\n  }\r\n\r\n  /**\r\n   * コンテナの終端要素を返す\r\n   */\r\n  public end(): iterator<_KeyT, _ValT> {\r\n    const ite: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(\r\n      this,\r\n      this._size\r\n    ); // 終了\r\n    return ite;\r\n  }\r\n\r\n  /**\r\n   * コンテナから要素を削除する\r\n   *\r\n   * @param ite 削除する要素\r\n   */\r\n  public erase(ite: iterator<_KeyT, _ValT>): iterator<_KeyT, _ValT> {\r\n    const index: number = ite._index;\r\n    if (index < 0 || this._size <= index) {\r\n      return ite; // 削除範囲外\r\n    }\r\n\r\n    // 削除\r\n    this._keyValues.splice(index, 1);\r\n    --this._size;\r\n\r\n    const ite2: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(\r\n      this,\r\n      index\r\n    ); // 終了\r\n    return ite2;\r\n  }\r\n\r\n  /**\r\n   * コンテナの値を32ビット符号付き整数型でダンプする\r\n   */\r\n  public dumpAsInt() {\r\n    for (let i = 0; i < this._size; i++) {\r\n      CubismLogDebug('{0} ,', this._keyValues[i]);\r\n      CubismLogDebug('\\n');\r\n    }\r\n  }\r\n\r\n  public static readonly DefaultSize = 10; // コンテナの初期化のデフォルトサイズ\r\n  public _keyValues: csmPair<_KeyT, _ValT>[]; // key-valueペアの配列\r\n  public _dummyValue: _ValT; // 空の値を返す為のダミー\r\n  public _size: number; // コンテナの要素数\r\n}\r\n\r\n/**\r\n * csmMap<T>のイテレータ\r\n */\r\nexport class iterator<_KeyT, _ValT> {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  constructor(v?: csmMap<_KeyT, _ValT>, idx?: number) {\r\n    this._map = v != undefined ? v : new csmMap<_KeyT, _ValT>();\r\n\r\n    this._index = idx != undefined ? idx : 0;\r\n  }\r\n\r\n  /**\r\n   * =演算子のオーバーロード\r\n   */\r\n  public set(ite: iterator<_KeyT, _ValT>): iterator<_KeyT, _ValT> {\r\n    this._index = ite._index;\r\n    this._map = ite._map;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 前置き++演算子のオーバーロード\r\n   */\r\n  public preIncrement(): iterator<_KeyT, _ValT> {\r\n    ++this._index;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 前置き--演算子のオーバーロード\r\n   */\r\n  public preDecrement(): iterator<_KeyT, _ValT> {\r\n    --this._index;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 後置き++演算子のオーバーロード\r\n   */\r\n  public increment(): iterator<_KeyT, _ValT> {\r\n    const iteold = new iterator<_KeyT, _ValT>(this._map, this._index++); // 古い値を保存\r\n    return iteold;\r\n  }\r\n\r\n  /**\r\n   * 後置き--演算子のオーバーロード\r\n   */\r\n  public decrement(): iterator<_KeyT, _ValT> {\r\n    const iteold = new iterator<_KeyT, _ValT>(this._map, this._index); // 古い値を保存\r\n    this._map = iteold._map;\r\n    this._index = iteold._index;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * *演算子のオーバーロード\r\n   */\r\n  public ptr(): csmPair<_KeyT, _ValT> {\r\n    return this._map._keyValues[this._index];\r\n  }\r\n\r\n  /**\r\n   * !=演算\r\n   */\r\n  public notEqual(ite: iterator<_KeyT, _ValT>): boolean {\r\n    return this._index != ite._index || this._map != ite._map;\r\n  }\r\n\r\n  _index: number; // コンテナのインデックス値\r\n  _map: csmMap<_KeyT, _ValT>; // コンテナ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './csmmap';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const csmMap = $.csmMap;\r\n  export type csmMap<K, V> = $.csmMap<K, V>;\r\n  export const csmPair = $.csmPair;\r\n  export type csmPair<K, V> = $.csmPair<K, V>;\r\n  export const iterator = $.iterator;\r\n  export type iterator<K, V> = $.iterator<K, V>;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport {\r\n  JsonArray,\r\n  JsonBoolean,\r\n  JsonFloat,\r\n  JsonMap,\r\n  JsonNullvalue,\r\n  JsonString,\r\n  Value\r\n} from './cubismjson';\r\n\r\n/**\r\n * CubismJsonで実装されているJsonパーサを使用せず、\r\n * TypeScript標準のJsonパーサなどを使用し出力された結果を\r\n * Cubism SDKで定義されているJSONエレメントの要素に\r\n * 置き換える処理をするクラス。\r\n */\r\nexport class CubismJsonExtension {\r\n  static parseJsonObject(obj: Value, map: JsonMap) {\r\n    Object.keys(obj).forEach((key) => {\r\n      if (typeof obj[key] == 'boolean') {\r\n        const convValue = Boolean(obj[key]);\r\n        map.put(key, new JsonBoolean(convValue));\r\n      } else if (typeof obj[key] == 'string') {\r\n        const convValue = String(obj[key]);\r\n        map.put(key, new JsonString(convValue));\r\n      } else if (typeof obj[key] == 'number') {\r\n        const convValue = Number(obj[key]);\r\n        map.put(key, new JsonFloat(convValue));\r\n      } else if (obj[key] instanceof Array) {\r\n        map.put(key, CubismJsonExtension.parseJsonArray(obj[key]));\r\n      } else if (obj[key] instanceof Object) {\r\n        map.put(\r\n          key,\r\n          CubismJsonExtension.parseJsonObject(obj[key], new JsonMap())\r\n        );\r\n      } else if (obj[key] == null) {\r\n        map.put(key, new JsonNullvalue());\r\n      } else {\r\n        // どれにも当てはまらない場合でも処理する\r\n        map.put(key, obj[key]);\r\n      }\r\n    });\r\n    return map;\r\n  }\r\n\r\n  protected static parseJsonArray(obj: Value) {\r\n    const arr = new JsonArray();\r\n    Object.keys(obj).forEach((key) => {\r\n      const convKey = Number(key);\r\n      if (typeof convKey == 'number') {\r\n        if (typeof obj[key] == 'boolean') {\r\n          const convValue = Boolean(obj[key]);\r\n          arr.add(new JsonBoolean(convValue));\r\n        } else if (typeof obj[key] == 'string') {\r\n          const convValue = String(obj[key]);\r\n          arr.add(new JsonString(convValue));\r\n        } else if (typeof obj[key] == 'number') {\r\n          const convValue = Number(obj[key]);\r\n          arr.add(new JsonFloat(convValue));\r\n        } else if (obj[key] instanceof Array) {\r\n          arr.add(this.parseJsonArray(obj[key]));\r\n        } else if (obj[key] instanceof Object) {\r\n          arr.add(this.parseJsonObject(obj[key], new JsonMap()));\r\n        } else if (obj[key] == null) {\r\n          arr.add(new JsonNullvalue());\r\n        } else {\r\n          // どれにも当てはまらない場合でも処理する\r\n          arr.add(obj[key]);\r\n        }\r\n      } else if (obj[key] instanceof Array) {\r\n        arr.add(this.parseJsonArray(obj[key]));\r\n      } else if (obj[key] instanceof Object) {\r\n        arr.add(this.parseJsonObject(obj[key], new JsonMap()));\r\n      } else if (obj[key] == null) {\r\n        arr.add(new JsonNullvalue());\r\n      } else {\r\n        const convValue = Array(obj[key]);\r\n        // 配列ともObjectとも判定できなかった場合でも処理する\r\n        for (let i = 0; i < convValue.length; i++) {\r\n          arr.add(convValue[i]);\r\n        }\r\n      }\r\n    });\r\n    return arr;\r\n  }\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { strtod } from '../live2dcubismframework';\r\nimport { csmMap, iterator as csmMap_iterator } from '../type/csmmap';\r\nimport { csmString } from '../type/csmstring';\r\nimport { csmVector, iterator as csmVector_iterator } from '../type/csmvector';\r\nimport { CubismLogInfo } from './cubismdebug';\r\n\r\n// StaticInitializeNotForClientCall()で初期化する\r\nconst CSM_JSON_ERROR_TYPE_MISMATCH = 'Error: type mismatch';\r\nconst CSM_JSON_ERROR_INDEX_OF_BOUNDS = 'Error: index out of bounds';\r\n\r\n/**\r\n * パースしたJSONエレメントの要素の基底クラス。\r\n */\r\nexport abstract class Value {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {}\r\n\r\n  /**\r\n   * 要素を文字列型で返す(csmString型)\r\n   */\r\n  public abstract getString(defaultValue?: string, indent?: string): string;\r\n\r\n  /**\r\n   * 要素を文字列型で返す(string)\r\n   */\r\n  public getRawString(defaultValue?: string, indent?: string): string {\r\n    return this.getString(defaultValue, indent);\r\n  }\r\n\r\n  /**\r\n   * 要素を数値型で返す(number)\r\n   */\r\n  public toInt(defaultValue = 0): number {\r\n    return defaultValue;\r\n  }\r\n\r\n  /**\r\n   * 要素を数値型で返す(number)\r\n   */\r\n  public toFloat(defaultValue = 0): number {\r\n    return defaultValue;\r\n  }\r\n\r\n  /**\r\n   * 要素を真偽値で返す(boolean)\r\n   */\r\n  public toBoolean(defaultValue = false): boolean {\r\n    return defaultValue;\r\n  }\r\n\r\n  /**\r\n   * サイズを返す\r\n   */\r\n  public getSize(): number {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 要素を配列で返す(Value[])\r\n   */\r\n  public getArray(defaultValue: Value[] = null): Value[] {\r\n    return defaultValue;\r\n  }\r\n\r\n  /**\r\n   * 要素をコンテナで返す(array)\r\n   */\r\n  public getVector(defaultValue = new csmVector<Value>()): csmVector<Value> {\r\n    return defaultValue;\r\n  }\r\n\r\n  /**\r\n   * 要素をマップで返す(csmMap<csmString, Value>)\r\n   */\r\n  public getMap(defaultValue?: csmMap<string, Value>): csmMap<string, Value> {\r\n    return defaultValue;\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[index]\r\n   */\r\n  public getValueByIndex(index: number): Value {\r\n    return Value.errorValue.setErrorNotForClientCall(\r\n      CSM_JSON_ERROR_TYPE_MISMATCH\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[string | csmString]\r\n   */\r\n  public getValueByString(s: string | csmString): Value {\r\n    return Value.nullValue.setErrorNotForClientCall(\r\n      CSM_JSON_ERROR_TYPE_MISMATCH\r\n    );\r\n  }\r\n\r\n  /**\r\n   * マップのキー一覧をコンテナで返す\r\n   *\r\n   * @return マップのキーの一覧\r\n   */\r\n  public getKeys(): csmVector<string> {\r\n    return Value.dummyKeys;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類がエラー値ならtrue\r\n   */\r\n  public isError(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類がnullならtrue\r\n   */\r\n  public isNull(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が真偽値ならtrue\r\n   */\r\n  public isBool(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が数値型ならtrue\r\n   */\r\n  public isFloat(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が文字列ならtrue\r\n   */\r\n  public isString(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が配列ならtrue\r\n   */\r\n  public isArray(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類がマップ型ならtrue\r\n   */\r\n  public isMap(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 引数の値と等しければtrue\r\n   */\r\n  public equals(value: csmString): boolean;\r\n  public equals(value: string): boolean;\r\n  public equals(value: number): boolean;\r\n  public equals(value: boolean): boolean;\r\n  public equals(value: any): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの値が静的ならtrue、静的なら解放しない\r\n   */\r\n  public isStatic(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueにエラー値をセットする\r\n   */\r\n  public setErrorNotForClientCall(errorStr: string): Value {\r\n    return JsonError.errorValue;\r\n  }\r\n\r\n  /**\r\n   * 初期化用メソッド\r\n   */\r\n  public static staticInitializeNotForClientCall(): void {\r\n    JsonBoolean.trueValue = new JsonBoolean(true);\r\n    JsonBoolean.falseValue = new JsonBoolean(false);\r\n    Value.errorValue = new JsonError('ERROR', true);\r\n    Value.nullValue = new JsonNullvalue();\r\n    Value.dummyKeys = new csmVector<string>();\r\n  }\r\n\r\n  /**\r\n   * リリース用メソッド\r\n   */\r\n  public static staticReleaseNotForClientCall(): void {\r\n    JsonBoolean.trueValue = null;\r\n    JsonBoolean.falseValue = null;\r\n    Value.errorValue = null;\r\n    Value.nullValue = null;\r\n    Value.dummyKeys = null;\r\n  }\r\n\r\n  protected _stringBuffer: string; // 文字列バッファ\r\n\r\n  private static dummyKeys: csmVector<string>; // ダミーキー\r\n\r\n  public static errorValue: Value; // 一時的な返り値として返すエラー。 CubismFramework::Disposeするまではdeleteしない\r\n  public static nullValue: Value; // 一時的な返り値として返すNULL。   CubismFramework::Disposeするまではdeleteしない\r\n\r\n  [key: string]: any; // 明示的に連想配列をany型で指定\r\n}\r\n\r\n/**\r\n * Ascii文字のみ対応した最小限の軽量JSONパーサ。\r\n * 仕様はJSONのサブセットとなる。\r\n * 設定ファイル(model3.json)などのロード用\r\n *\r\n * [未対応項目]\r\n * ・日本語などの非ASCII文字\r\n * ・eによる指数表現\r\n */\r\nexport class CubismJson {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor(buffer?: ArrayBuffer, length?: number) {\r\n    this._error = null;\r\n    this._lineCount = 0;\r\n    this._root = null;\r\n\r\n    if (buffer != undefined) {\r\n      this.parseBytes(buffer, length, this._parseCallback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * バイトデータから直接ロードしてパースする\r\n   *\r\n   * @param buffer バッファ\r\n   * @param size バッファサイズ\r\n   * @return CubismJsonクラスのインスタンス。失敗したらNULL\r\n   */\r\n  public static create(buffer: ArrayBuffer, size: number) {\r\n    const json = new CubismJson();\r\n    const succeeded: boolean = json.parseBytes(\r\n      buffer,\r\n      size,\r\n      json._parseCallback\r\n    );\r\n\r\n    if (!succeeded) {\r\n      CubismJson.delete(json);\r\n      return null;\r\n    } else {\r\n      return json;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パースしたJSONオブジェクトの解放処理\r\n   *\r\n   * @param instance CubismJsonクラスのインスタンス\r\n   */\r\n  public static delete(instance: CubismJson) {\r\n    instance = null;\r\n  }\r\n\r\n  /**\r\n   * パースしたJSONのルート要素を返す\r\n   */\r\n  public getRoot(): Value {\r\n    return this._root;\r\n  }\r\n\r\n  /**\r\n   *  UnicodeのバイナリをStringに変換\r\n   *\r\n   * @param buffer 変換するバイナリデータ\r\n   * @return 変換後の文字列\r\n   */\r\n  public static arrayBufferToString(buffer: ArrayBuffer): string {\r\n    const uint8Array: Uint8Array = new Uint8Array(buffer);\r\n    let str = '';\r\n\r\n    for (let i = 0, len: number = uint8Array.length; i < len; ++i) {\r\n      str += '%' + this.pad(uint8Array[i].toString(16));\r\n    }\r\n\r\n    str = decodeURIComponent(str);\r\n    return str;\r\n  }\r\n\r\n  /**\r\n   * エンコード、パディング\r\n   */\r\n  private static pad(n: string): string {\r\n    return n.length < 2 ? '0' + n : n;\r\n  }\r\n\r\n  /**\r\n   * JSONのパースを実行する\r\n   * @param buffer    パース対象のデータバイト\r\n   * @param size      データバイトのサイズ\r\n   * return true : 成功\r\n   * return false: 失敗\r\n   */\r\n  public parseBytes(\r\n    buffer: ArrayBuffer,\r\n    size: number,\r\n    parseCallback?: parseJsonObject\r\n  ): boolean {\r\n    const endPos: number[] = new Array<number>(1); // 参照渡しにするため配列\r\n    const decodeBuffer: string = CubismJson.arrayBufferToString(buffer);\r\n\r\n    if (parseCallback == undefined) {\r\n      this._root = this.parseValue(decodeBuffer, size, 0, endPos);\r\n    } else {\r\n      // TypeScript標準のJSONパーサを使う\r\n      this._root = parseCallback(JSON.parse(decodeBuffer), new JsonMap());\r\n    }\r\n\r\n    if (this._error) {\r\n      let strbuf = '\\0';\r\n      strbuf = 'Json parse error : @line ' + (this._lineCount + 1) + '\\n';\r\n      this._root = new JsonString(strbuf);\r\n\r\n      CubismLogInfo('{0}', this._root.getRawString());\r\n      return false;\r\n    } else if (this._root == null) {\r\n      this._root = new JsonError(new csmString(this._error), false); // rootは解放されるのでエラーオブジェクトを別途作成する\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * パース時のエラー値を返す\r\n   */\r\n  public getParseError(): string {\r\n    return this._error;\r\n  }\r\n\r\n  /**\r\n   * ルート要素の次の要素がファイルの終端だったらtrueを返す\r\n   */\r\n  public checkEndOfFile(): boolean {\r\n    return this._root.getArray()[1].equals('EOF');\r\n  }\r\n\r\n  /**\r\n   * JSONエレメントからValue(float,String,Value*,Array,null,true,false)をパースする\r\n   * エレメントの書式に応じて内部でParseString(), ParseObject(), ParseArray()を呼ぶ\r\n   *\r\n   * @param   buffer      JSONエレメントのバッファ\r\n   * @param   length      パースする長さ\r\n   * @param   begin       パースを開始する位置\r\n   * @param   outEndPos   パース終了時の位置\r\n   * @return      パースから取得したValueオブジェクト\r\n   */\r\n  protected parseValue(\r\n    buffer: string,\r\n    length: number,\r\n    begin: number,\r\n    outEndPos: number[]\r\n  ) {\r\n    if (this._error) return null;\r\n\r\n    let o: Value = null;\r\n    let i: number = begin;\r\n    let f: number;\r\n\r\n    for (; i < length; i++) {\r\n      const c: string = buffer[i];\r\n      switch (c) {\r\n        case '-':\r\n        case '.':\r\n        case '0':\r\n        case '1':\r\n        case '2':\r\n        case '3':\r\n        case '4':\r\n        case '5':\r\n        case '6':\r\n        case '7':\r\n        case '8':\r\n        case '9': {\r\n          const afterString: string[] = new Array(1); // 参照渡しにするため\r\n          f = strtod(buffer.slice(i), afterString);\r\n          outEndPos[0] = buffer.indexOf(afterString[0]);\r\n          return new JsonFloat(f);\r\n        }\r\n        case '\"':\r\n          return new JsonString(\r\n            this.parseString(buffer, length, i + 1, outEndPos)\r\n          ); // \\\"の次の文字から\r\n        case '[':\r\n          o = this.parseArray(buffer, length, i + 1, outEndPos);\r\n          return o;\r\n        case '{':\r\n          o = this.parseObject(buffer, length, i + 1, outEndPos);\r\n          return o;\r\n        case 'n': // null以外にない\r\n          if (i + 3 < length) {\r\n            o = new JsonNullvalue(); // 解放できるようにする\r\n            outEndPos[0] = i + 4;\r\n          } else {\r\n            this._error = 'parse null';\r\n          }\r\n          return o;\r\n        case 't': // true以外にない\r\n          if (i + 3 < length) {\r\n            o = JsonBoolean.trueValue;\r\n            outEndPos[0] = i + 4;\r\n          } else {\r\n            this._error = 'parse true';\r\n          }\r\n          return o;\r\n        case 'f': // false以外にない\r\n          if (i + 4 < length) {\r\n            o = JsonBoolean.falseValue;\r\n            outEndPos[0] = i + 5;\r\n          } else {\r\n            this._error = \"illegal ',' position\";\r\n          }\r\n          return o;\r\n        case ',': // Array separator\r\n          this._error = \"illegal ',' position\";\r\n          return null;\r\n        case ']': // 不正な｝だがスキップする。配列の最後に不要な , があると思われる\r\n          outEndPos[0] = i; // 同じ文字を再処理\r\n          return null;\r\n        case '\\n':\r\n          this._lineCount++;\r\n        // falls through\r\n        case ' ':\r\n        case '\\t':\r\n        case '\\r':\r\n        default:\r\n          // スキップ\r\n          break;\r\n      }\r\n    }\r\n\r\n    this._error = 'illegal end of value';\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 次の「\"」までの文字列をパースする。\r\n   *\r\n   * @param   string  ->  パース対象の文字列\r\n   * @param   length  ->  パースする長さ\r\n   * @param   begin   ->  パースを開始する位置\r\n   * @param  outEndPos   ->  パース終了時の位置\r\n   * @return      パースした文F字列要素\r\n   */\r\n  protected parseString(\r\n    string: string,\r\n    length: number,\r\n    begin: number,\r\n    outEndPos: number[]\r\n  ): string {\r\n    if (this._error) {\r\n      return null;\r\n    }\r\n\r\n    if (!string) {\r\n      this._error = 'string is null';\r\n      return null;\r\n    }\r\n\r\n    let i = begin;\r\n    let c: string, c2: string;\r\n    const ret: csmString = new csmString('');\r\n    let bufStart: number = begin; // sbufに登録されていない文字の開始位置\r\n\r\n    for (; i < length; i++) {\r\n      c = string[i];\r\n\r\n      switch (c) {\r\n        case '\"': {\r\n          // 終端の”、エスケープ文字は別に処理されるのでここに来ない\r\n          outEndPos[0] = i + 1; // ”の次の文字\r\n          ret.append(string.slice(bufStart), i - bufStart); // 前の文字までを登録する\r\n          return ret.s;\r\n        }\r\n        // falls through\r\n        case '//': {\r\n          // エスケープの場合\r\n          i++; // ２文字をセットで扱う\r\n\r\n          if (i - 1 > bufStart) {\r\n            ret.append(string.slice(bufStart), i - bufStart); // 前の文字までを登録する\r\n          }\r\n          bufStart = i + 1; // エスケープ（２文字)の次の文字から\r\n\r\n          if (i < length) {\r\n            c2 = string[i];\r\n\r\n            switch (c2) {\r\n              case '\\\\':\r\n                ret.expansion(1, '\\\\');\r\n                break;\r\n              case '\"':\r\n                ret.expansion(1, '\"');\r\n                break;\r\n              case '/':\r\n                ret.expansion(1, '/');\r\n                break;\r\n              case 'b':\r\n                ret.expansion(1, '\\b');\r\n                break;\r\n              case 'f':\r\n                ret.expansion(1, '\\f');\r\n                break;\r\n              case 'n':\r\n                ret.expansion(1, '\\n');\r\n                break;\r\n              case 'r':\r\n                ret.expansion(1, '\\r');\r\n                break;\r\n              case 't':\r\n                ret.expansion(1, '\\t');\r\n                break;\r\n              case 'u':\r\n                this._error = 'parse string/unicord escape not supported';\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else {\r\n            this._error = 'parse string/escape error';\r\n          }\r\n        }\r\n        // falls through\r\n        default: {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this._error = 'parse string/illegal end';\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * JSONのオブジェクトエレメントをパースしてValueオブジェクトを返す\r\n   *\r\n   * @param buffer    JSONエレメントのバッファ\r\n   * @param length    パースする長さ\r\n   * @param begin     パースを開始する位置\r\n   * @param outEndPos パース終了時の位置\r\n   * @return パースから取得したValueオブジェクト\r\n   */\r\n  protected parseObject(\r\n    buffer: string,\r\n    length: number,\r\n    begin: number,\r\n    outEndPos: number[]\r\n  ): Value {\r\n    if (this._error) {\r\n      return null;\r\n    }\r\n\r\n    if (!buffer) {\r\n      this._error = 'buffer is null';\r\n      return null;\r\n    }\r\n\r\n    const ret: JsonMap = new JsonMap();\r\n\r\n    // Key: Value\r\n    let key = '';\r\n    let i: number = begin;\r\n    let c = '';\r\n    const localRetEndPos2: number[] = Array(1);\r\n    let ok = false;\r\n\r\n    // , が続く限りループ\r\n    for (; i < length; i++) {\r\n      FOR_LOOP: for (; i < length; i++) {\r\n        c = buffer[i];\r\n\r\n        switch (c) {\r\n          case '\"':\r\n            key = this.parseString(buffer, length, i + 1, localRetEndPos2);\r\n            if (this._error) {\r\n              return null;\r\n            }\r\n\r\n            i = localRetEndPos2[0];\r\n            ok = true;\r\n            break FOR_LOOP; //-- loopから出る\r\n          case '}': // 閉じカッコ\r\n            outEndPos[0] = i + 1;\r\n            return ret; // 空\r\n          case ':':\r\n            this._error = \"illegal ':' position\";\r\n            break;\r\n          case '\\n':\r\n            this._lineCount++;\r\n          // falls through\r\n          default:\r\n            break; // スキップする文字\r\n        }\r\n      }\r\n      if (!ok) {\r\n        this._error = 'key not found';\r\n        return null;\r\n      }\r\n\r\n      ok = false;\r\n\r\n      // : をチェック\r\n      FOR_LOOP2: for (; i < length; i++) {\r\n        c = buffer[i];\r\n\r\n        switch (c) {\r\n          case ':':\r\n            ok = true;\r\n            i++;\r\n            break FOR_LOOP2;\r\n          case '}':\r\n            this._error = \"illegal '}' position\";\r\n            break;\r\n          // falls through\r\n          case '\\n':\r\n            this._lineCount++;\r\n          // case ' ': case '\\t' : case '\\r':\r\n          // falls through\r\n          default:\r\n            break; // スキップする文字\r\n        }\r\n      }\r\n\r\n      if (!ok) {\r\n        this._error = \"':' not found\";\r\n        return null;\r\n      }\r\n\r\n      // 値をチェック\r\n      const value: Value = this.parseValue(buffer, length, i, localRetEndPos2);\r\n      if (this._error) {\r\n        return null;\r\n      }\r\n\r\n      i = localRetEndPos2[0];\r\n\r\n      // ret.put(key, value);\r\n      ret.put(key, value);\r\n\r\n      FOR_LOOP3: for (; i < length; i++) {\r\n        c = buffer[i];\r\n\r\n        switch (c) {\r\n          case ',':\r\n            break FOR_LOOP3;\r\n          case '}':\r\n            outEndPos[0] = i + 1;\r\n            return ret; // 正常終了\r\n          case '\\n':\r\n            this._lineCount++;\r\n          // falls through\r\n          default:\r\n            break; // スキップ\r\n        }\r\n      }\r\n    }\r\n\r\n    this._error = 'illegal end of perseObject';\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 次の「\"」までの文字列をパースする。\r\n   * @param buffer    JSONエレメントのバッファ\r\n   * @param length    パースする長さ\r\n   * @param begin     パースを開始する位置\r\n   * @param outEndPos パース終了時の位置\r\n   * @return パースから取得したValueオブジェクト\r\n   */\r\n  protected parseArray(\r\n    buffer: string,\r\n    length: number,\r\n    begin: number,\r\n    outEndPos: number[]\r\n  ): Value {\r\n    if (this._error) {\r\n      return null;\r\n    }\r\n\r\n    if (!buffer) {\r\n      this._error = 'buffer is null';\r\n      return null;\r\n    }\r\n\r\n    let ret: JsonArray = new JsonArray();\r\n\r\n    // key : value\r\n    let i: number = begin;\r\n    let c: string;\r\n    const localRetEndpos2: number[] = new Array(1);\r\n\r\n    // , が続く限りループ\r\n    for (; i < length; i++) {\r\n      // : をチェック\r\n      const value: Value = this.parseValue(buffer, length, i, localRetEndpos2);\r\n\r\n      if (this._error) {\r\n        return null;\r\n      }\r\n      i = localRetEndpos2[0];\r\n\r\n      if (value) {\r\n        ret.add(value);\r\n      }\r\n\r\n      // FOR_LOOP3:\r\n      // boolean breakflag = false;\r\n      FOR_LOOP: for (; i < length; i++) {\r\n        c = buffer[i];\r\n\r\n        switch (c) {\r\n          case ',':\r\n            // breakflag = true;\r\n            // break; // 次のKEY, VAlUEへ\r\n            break FOR_LOOP;\r\n          case ']':\r\n            outEndPos[0] = i + 1;\r\n            return ret; // 終了\r\n          case '\\n':\r\n            ++this._lineCount;\r\n          //case ' ': case '\\t': case '\\r':\r\n          // falls through\r\n          default:\r\n            break; // スキップ\r\n        }\r\n      }\r\n    }\r\n\r\n    ret = void 0;\r\n    this._error = 'illegal end of parseObject';\r\n    return null;\r\n  }\r\n\r\n  _parseCallback: parseJsonObject = CubismJsonExtension.parseJsonObject; // パース時に使う処理のコールバック関数\r\n\r\n  _error: string; // パース時のエラー\r\n  _lineCount: number; // エラー報告に用いる行数カウント\r\n  _root: Value; // パースされたルート要素\r\n}\r\n\r\ninterface parseJsonObject {\r\n  (obj: Value, map: JsonMap): JsonMap;\r\n}\r\n\r\n/**\r\n * パースしたJSONの要素をfloat値として扱う\r\n */\r\nexport class JsonFloat extends Value {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  constructor(v: number) {\r\n    super();\r\n\r\n    this._value = v;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が数値型ならtrue\r\n   */\r\n  public isFloat(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 要素を文字列で返す(csmString型)\r\n   */\r\n  public getString(defaultValue: string, indent: string): string {\r\n    const strbuf = '\\0';\r\n    this._value = parseFloat(strbuf);\r\n    this._stringBuffer = strbuf;\r\n\r\n    return this._stringBuffer;\r\n  }\r\n\r\n  /**\r\n   * 要素を数値型で返す(number)\r\n   */\r\n  public toInt(defaultValue = 0): number {\r\n    return parseInt(this._value.toString());\r\n  }\r\n\r\n  /**\r\n   * 要素を数値型で返す(number)\r\n   */\r\n  public toFloat(defaultValue = 0.0): number {\r\n    return this._value;\r\n  }\r\n\r\n  /**\r\n   * 引数の値と等しければtrue\r\n   */\r\n  public equals(value: csmString): boolean;\r\n  public equals(value: string): boolean;\r\n  public equals(value: number): boolean;\r\n  public equals(value: boolean): boolean;\r\n  public equals(value: any): boolean {\r\n    if ('number' === typeof value) {\r\n      // int\r\n      if (Math.round(value)) {\r\n        return false;\r\n      }\r\n      // float\r\n      else {\r\n        return value == this._value;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private _value: number; // JSON要素の値\r\n}\r\n\r\n/**\r\n * パースしたJSONの要素を真偽値として扱う\r\n */\r\nexport class JsonBoolean extends Value {\r\n  /**\r\n   * Valueの種類が真偽値ならtrue\r\n   */\r\n  public isBool(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 要素を真偽値で返す(boolean)\r\n   */\r\n  public toBoolean(defaultValue = false): boolean {\r\n    return this._boolValue;\r\n  }\r\n\r\n  /**\r\n   * 要素を文字列で返す(csmString型)\r\n   */\r\n  public getString(defaultValue: string, indent: string): string {\r\n    this._stringBuffer = this._boolValue ? 'true' : 'false';\r\n\r\n    return this._stringBuffer;\r\n  }\r\n\r\n  /**\r\n   * 引数の値と等しければtrue\r\n   */\r\n  public equals(value: csmString): boolean;\r\n  public equals(value: string): boolean;\r\n  public equals(value: number): boolean;\r\n  public equals(value: boolean): boolean;\r\n  public equals(value: any): boolean {\r\n    if ('boolean' === typeof value) {\r\n      return value == this._boolValue;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの値が静的ならtrue, 静的なら解放しない\r\n   */\r\n  public isStatic(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   */\r\n  public constructor(v: boolean) {\r\n    super();\r\n\r\n    this._boolValue = v;\r\n  }\r\n\r\n  static trueValue: JsonBoolean; // true\r\n  static falseValue: JsonBoolean; // false\r\n\r\n  private _boolValue: boolean; // JSON要素の値\r\n}\r\n\r\n/**\r\n * パースしたJSONの要素を文字列として扱う\r\n */\r\nexport class JsonString extends Value {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   */\r\n  public constructor(s: string);\r\n  public constructor(s: csmString);\r\n  public constructor(s: any) {\r\n    super();\r\n\r\n    if ('string' === typeof s) {\r\n      this._stringBuffer = s;\r\n    }\r\n\r\n    if (s instanceof csmString) {\r\n      this._stringBuffer = s.s;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が文字列ならtrue\r\n   */\r\n  public isString(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 要素を文字列で返す(csmString型)\r\n   */\r\n  public getString(defaultValue: string, indent: string): string {\r\n    return this._stringBuffer;\r\n  }\r\n\r\n  /**\r\n   * 引数の値と等しければtrue\r\n   */\r\n  public equals(value: csmString): boolean;\r\n  public equals(value: string): boolean;\r\n  public equals(value: number): boolean;\r\n  public equals(value: boolean): boolean;\r\n  public equals(value: any): boolean {\r\n    if ('string' === typeof value) {\r\n      return this._stringBuffer == value;\r\n    }\r\n\r\n    if (value instanceof csmString) {\r\n      return this._stringBuffer == value.s;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * JSONパース時のエラー結果。文字列型のようにふるまう\r\n */\r\nexport class JsonError extends JsonString {\r\n  /**\r\n   * Valueの値が静的ならtrue、静的なら解放しない\r\n   */\r\n  public isStatic(): boolean {\r\n    return this._isStatic;\r\n  }\r\n\r\n  /**\r\n   * エラー情報をセットする\r\n   */\r\n  public setErrorNotForClientCall(s: string): Value {\r\n    this._stringBuffer = s;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   */\r\n  public constructor(s: csmString | string, isStatic: boolean) {\r\n    if ('string' === typeof s) {\r\n      super(s);\r\n    } else {\r\n      super(s);\r\n    }\r\n    this._isStatic = isStatic;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類がエラー値ならtrue\r\n   */\r\n  public isError(): boolean {\r\n    return true;\r\n  }\r\n\r\n  protected _isStatic: boolean; // 静的なValueかどうか\r\n}\r\n\r\n/**\r\n * パースしたJSONの要素をNULL値として持つ\r\n */\r\nexport class JsonNullvalue extends Value {\r\n  /**\r\n   * Valueの種類がNULL値ならtrue\r\n   */\r\n  public isNull(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 要素を文字列で返す(csmString型)\r\n   */\r\n  public getString(defaultValue: string, indent: string): string {\r\n    return this._stringBuffer;\r\n  }\r\n\r\n  /**\r\n   * Valueの値が静的ならtrue, 静的なら解放しない\r\n   */\r\n  public isStatic(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Valueにエラー値をセットする\r\n   */\r\n  public setErrorNotForClientCall(s: string): Value {\r\n    this._stringBuffer = s;\r\n    return JsonError.nullValue;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n\r\n    this._stringBuffer = 'NullValue';\r\n  }\r\n}\r\n\r\n/**\r\n * パースしたJSONの要素を配列として持つ\r\n */\r\nexport class JsonArray extends Value {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._array = new csmVector<Value>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    for (\r\n      let ite: csmVector_iterator<Value> = this._array.begin();\r\n      ite.notEqual(this._array.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      let v: Value = ite.ptr();\r\n\r\n      if (v && !v.isStatic()) {\r\n        v = void 0;\r\n        v = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が配列ならtrue\r\n   */\r\n  public isArray(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[index]\r\n   */\r\n  public getValueByIndex(index: number): Value {\r\n    if (index < 0 || this._array.getSize() <= index) {\r\n      return Value.errorValue.setErrorNotForClientCall(\r\n        CSM_JSON_ERROR_INDEX_OF_BOUNDS\r\n      );\r\n    }\r\n\r\n    const v: Value = this._array.at(index);\r\n\r\n    if (v == null) {\r\n      return Value.nullValue;\r\n    }\r\n\r\n    return v;\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[string | csmString]\r\n   */\r\n  public getValueByString(s: string | csmString): Value {\r\n    return Value.errorValue.setErrorNotForClientCall(\r\n      CSM_JSON_ERROR_TYPE_MISMATCH\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 要素を文字列で返す(csmString型)\r\n   */\r\n  public getString(defaultValue: string, indent: string): string {\r\n    const stringBuffer: string = indent + '[\\n';\r\n\r\n    for (\r\n      let ite: csmVector_iterator<Value> = this._array.begin();\r\n      ite.notEqual(this._array.end());\r\n      ite.increment()\r\n    ) {\r\n      const v: Value = ite.ptr();\r\n      this._stringBuffer += indent + '' + v.getString(indent + ' ') + '\\n';\r\n    }\r\n\r\n    this._stringBuffer = stringBuffer + indent + ']\\n';\r\n\r\n    return this._stringBuffer;\r\n  }\r\n\r\n  /**\r\n   * 配列要素を追加する\r\n   * @param v 追加する要素\r\n   */\r\n  public add(v: Value): void {\r\n    this._array.pushBack(v);\r\n  }\r\n\r\n  /**\r\n   * 要素をコンテナで返す(csmVector<Value>)\r\n   */\r\n  public getVector(defaultValue: csmVector<Value> = null): csmVector<Value> {\r\n    return this._array;\r\n  }\r\n\r\n  /**\r\n   * 要素の数を返す\r\n   */\r\n  public getSize(): number {\r\n    return this._array.getSize();\r\n  }\r\n\r\n  private _array: csmVector<Value>; // JSON要素の値\r\n}\r\n\r\n/**\r\n * パースしたJSONの要素をマップとして持つ\r\n */\r\nexport class JsonMap extends Value {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._map = new csmMap<string, Value>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    const ite: csmMap_iterator<string, Value> = this._map.begin();\r\n\r\n    while (ite.notEqual(this._map.end())) {\r\n      let v: Value = ite.ptr().second;\r\n\r\n      if (v && !v.isStatic()) {\r\n        v = void 0;\r\n        v = null;\r\n      }\r\n\r\n      ite.preIncrement();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Valueの値がMap型ならtrue\r\n   */\r\n  public isMap(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[string | csmString]\r\n   */\r\n  public getValueByString(s: string | csmString): Value {\r\n    if (s instanceof csmString) {\r\n      const ret: Value = this._map.getValue(s.s);\r\n      if (ret == null) {\r\n        return Value.nullValue;\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    for (\r\n      let iter: csmMap_iterator<string, Value> = this._map.begin();\r\n      iter.notEqual(this._map.end());\r\n      iter.preIncrement()\r\n    ) {\r\n      if (iter.ptr().first == s) {\r\n        if (iter.ptr().second == null) {\r\n          return Value.nullValue;\r\n        }\r\n        return iter.ptr().second;\r\n      }\r\n    }\r\n\r\n    return Value.nullValue;\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[index]\r\n   */\r\n  public getValueByIndex(index: number): Value {\r\n    return Value.errorValue.setErrorNotForClientCall(\r\n      CSM_JSON_ERROR_TYPE_MISMATCH\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 要素を文字列で返す(csmString型)\r\n   */\r\n  public getString(defaultValue: string, indent: string) {\r\n    this._stringBuffer = indent + '{\\n';\r\n\r\n    const ite: csmMap_iterator<string, Value> = this._map.begin();\r\n    while (ite.notEqual(this._map.end())) {\r\n      const key = ite.ptr().first;\r\n      const v: Value = ite.ptr().second;\r\n\r\n      this._stringBuffer +=\r\n        indent + ' ' + key + ' : ' + v.getString(indent + '   ') + ' \\n';\r\n      ite.preIncrement();\r\n    }\r\n\r\n    this._stringBuffer += indent + '}\\n';\r\n\r\n    return this._stringBuffer;\r\n  }\r\n\r\n  /**\r\n   * 要素をMap型で返す\r\n   */\r\n  public getMap(defaultValue?: csmMap<string, Value>): csmMap<string, Value> {\r\n    return this._map;\r\n  }\r\n\r\n  /**\r\n   * Mapに要素を追加する\r\n   */\r\n  public put(key: string, v: Value): void {\r\n    this._map.setValue(key, v);\r\n  }\r\n\r\n  /**\r\n   * Mapからキーのリストを取得する\r\n   */\r\n  public getKeys(): csmVector<string> {\r\n    if (!this._keys) {\r\n      this._keys = new csmVector<string>();\r\n\r\n      const ite: csmMap_iterator<string, Value> = this._map.begin();\r\n\r\n      while (ite.notEqual(this._map.end())) {\r\n        const key: string = ite.ptr().first;\r\n        this._keys.pushBack(key);\r\n        ite.preIncrement();\r\n      }\r\n    }\r\n    return this._keys;\r\n  }\r\n\r\n  /**\r\n   * Mapの要素数を取得する\r\n   */\r\n  public getSize(): number {\r\n    return this._keys.getSize();\r\n  }\r\n\r\n  private _map: csmMap<string, Value>; // JSON要素の値\r\n  private _keys: csmVector<string>; // JSON要素の値\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismjson';\r\nimport { CubismJsonExtension } from './cubismjsonextension';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismJson = $.CubismJson;\r\n  export type CubismJson = $.CubismJson;\r\n  export const JsonArray = $.JsonArray;\r\n  export type JsonArray = $.JsonArray;\r\n  export const JsonBoolean = $.JsonBoolean;\r\n  export type JsonBoolean = $.JsonBoolean;\r\n  export const JsonError = $.JsonError;\r\n  export type JsonError = $.JsonError;\r\n  export const JsonFloat = $.JsonFloat;\r\n  export type JsonFloat = $.JsonFloat;\r\n  export const JsonMap = $.JsonMap;\r\n  export type JsonMap = $.JsonMap;\r\n  export const JsonNullvalue = $.JsonNullvalue;\r\n  export type JsonNullvalue = $.JsonNullvalue;\r\n  export const JsonString = $.JsonString;\r\n  export type JsonString = $.JsonString;\r\n  export const Value = $.Value;\r\n  export type Value = $.Value;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdManager } from './id/cubismidmanager';\r\nimport { CubismRenderer } from './rendering/cubismrenderer';\r\nimport {\r\n  CSM_ASSERT,\r\n  CubismLogInfo,\r\n  CubismLogWarning\r\n} from './utils/cubismdebug';\r\nimport { Value } from './utils/cubismjson';\r\n\r\nexport function strtod(s: string, endPtr: string[]): number {\r\n  let index = 0;\r\n  for (let i = 1; ; i++) {\r\n    const testC: string = s.slice(i - 1, i);\r\n\r\n    // 인덱스와 부정적인 가능성이 있기 때문에 건너 뛰기\r\n    if (testC == 'e' || testC == '-' || testC == 'E') {\r\n      continue;\r\n    } // 文字列の範囲を広げていく\r\n\r\n    const test: string = s.substring(0, i);\r\n    const number = Number(test);\r\n    if (isNaN(number)) {\r\n      // 数値として認識できなくなったので終了\r\n      break;\r\n    } // 最後に数値としてできたindexを格納しておく\r\n\r\n    index = i;\r\n  }\r\n  let d = parseFloat(s); // パースした数値\r\n\r\n  if (isNaN(d)) {\r\n    // 数値として認識できなくなったので終了\r\n    d = NaN;\r\n  }\r\n\r\n  endPtr[0] = s.slice(index); // 後続の文字列\r\n  return d;\r\n}\r\n\r\n// ファイルスコープの変数を初期化\r\n\r\nlet s_isStarted = false;\r\nlet s_isInitialized = false;\r\nlet s_option: Option = null;\r\nlet s_cubismIdManager: CubismIdManager = null;\r\n\r\n/**\r\n * Framework内で使う定数の宣言\r\n */\r\nexport const Constant = Object.freeze<Record<string, number>>({\r\n  vertexOffset: 0, // メッシュ頂点のオフセット値\r\n  vertexStep: 2 // メッシュ頂点のステップ値\r\n});\r\n\r\nexport function csmDelete<T>(address: T): void {\r\n  if (!address) {\r\n    return;\r\n  }\r\n\r\n  address = void 0;\r\n}\r\n\r\n/**\r\n * Live2D Cubism SDK Original Workflow SDKのエントリポイント\r\n * 利用開始時はCubismFramework.initialize()を呼び、CubismFramework.dispose()で終了する。\r\n */\r\nexport class CubismFramework {\r\n  /**\r\n   * Cubism FrameworkのAPIを使用可能にする。\r\n   *  APIを実行する前に必ずこの関数を実行すること。\r\n   *  一度準備が完了して以降は、再び実行しても内部処理がスキップされます。\r\n   *\r\n   * @param    option      Optionクラスのインスタンス\r\n   *\r\n   * @return   準備処理が完了したらtrueが返ります。\r\n   */\r\n  public static startUp(option: Option = null): boolean {\r\n    if (s_isStarted) {\r\n      CubismLogInfo('CubismFramework.startUp() is already done.');\r\n      return s_isStarted;\r\n    }\r\n\r\n    s_option = option;\r\n\r\n    if (s_option != null) {\r\n      Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);\r\n    }\r\n\r\n    s_isStarted = true;\r\n\r\n    // Live2D Cubism Coreバージョン情報を表示\r\n    if (s_isStarted) {\r\n      const version: number = Live2DCubismCore.Version.csmGetVersion();\r\n      const major: number = (version & 0xff000000) >> 24;\r\n      const minor: number = (version & 0x00ff0000) >> 16;\r\n      const patch: number = version & 0x0000ffff;\r\n      const versionNumber: number = version;\r\n\r\n      CubismLogInfo(\r\n        `Live2D Cubism Core version: {0}.{1}.{2} ({3})`,\r\n        ('00' + major).slice(-2),\r\n        ('00' + minor).slice(-2),\r\n        ('0000' + patch).slice(-4),\r\n        versionNumber\r\n      );\r\n    }\r\n\r\n    CubismLogInfo('CubismFramework.startUp() is complete.');\r\n\r\n    return s_isStarted;\r\n  }\r\n\r\n  /**\r\n   * StartUp()で初期化したCubismFrameworkの各パラメータをクリアします。\r\n   * Dispose()したCubismFrameworkを再利用する際に利用してください。\r\n   */\r\n  public static cleanUp(): void {\r\n    s_isStarted = false;\r\n    s_isInitialized = false;\r\n    s_option = null;\r\n    s_cubismIdManager = null;\r\n  }\r\n\r\n  /**\r\n   * Cubism Framework内のリソースを初期化してモデルを表示可能な状態にします。<br>\r\n   *     再度Initialize()するには先にDispose()を実行する必要があります。\r\n   *\r\n   * @param memorySize 初期化時メモリ量 [byte(s)]\r\n   *    여러 모델이 표시 될 때 모델이 업데이트되지 않을 때 사용하십시오.하십시오.\r\n   *    指定する際は必ず1024*1024*16 byte(16MB)以上の値を指定してください。\r\n   *    それ以外はすべて1024*1024*16 byteに丸めます。\r\n   */\r\n  public static initialize(memorySize = 0): void {\r\n    CSM_ASSERT(s_isStarted);\r\n    if (!s_isStarted) {\r\n      CubismLogWarning('CubismFramework is not started.');\r\n      return;\r\n    }\r\n\r\n    // --- s_isInitializedによる連続初期化ガード ---\r\n    // 連続してリソース確保が行われないようにする。\r\n    // 再度Initialize()するには先にDispose()を実行する必要がある。\r\n    if (s_isInitialized) {\r\n      CubismLogWarning(\r\n        'CubismFramework.initialize() skipped, already initialized.'\r\n      );\r\n      return;\r\n    }\r\n\r\n    //---- static 初期化 ----\r\n    Value.staticInitializeNotForClientCall();\r\n\r\n    s_cubismIdManager = new CubismIdManager();\r\n\r\n    // --- HACK: 初期化時メモリ量の拡張(単位byte) ---\r\n    // 여러 모델이 표시 될 때 모델이 업데이트되지 않을 때 사용하십시오.\r\n    // 指定する際は必ず1024*1024*16 byte(16MB)以上の値を指定してください。\r\n    // それ以外はすべて1024*1024*16 byteに丸めます。\r\n    Live2DCubismCore.Memory.initializeAmountOfMemory(memorySize);\r\n\r\n    s_isInitialized = true;\r\n\r\n    CubismLogInfo('CubismFramework.initialize() is complete.');\r\n  }\r\n\r\n  /**\r\n   * Cubism Framework内の全てのリソースを解放します。\r\n   *      ただし、外部で確保されたリソースについては解放しません。\r\n   *      外部で適切に破棄する必要があります。\r\n   */\r\n  public static dispose(): void {\r\n    CSM_ASSERT(s_isStarted);\r\n    if (!s_isStarted) {\r\n      CubismLogWarning('CubismFramework is not started.');\r\n      return;\r\n    }\r\n\r\n    // --- s_isInitializedによる未初期化解放ガード ---\r\n    // dispose()するには先にinitialize()を実行する必要がある。\r\n    if (!s_isInitialized) {\r\n      // false...リソース未確保の場合\r\n      CubismLogWarning('CubismFramework.dispose() skipped, not initialized.');\r\n      return;\r\n    }\r\n\r\n    Value.staticReleaseNotForClientCall();\r\n\r\n    s_cubismIdManager.release();\r\n    s_cubismIdManager = null;\r\n\r\n    // レンダラの静的リソース（シェーダプログラム他）を解放する\r\n    CubismRenderer.staticRelease();\r\n\r\n    s_isInitialized = false;\r\n\r\n    CubismLogInfo('CubismFramework.dispose() is complete.');\r\n  }\r\n\r\n  /**\r\n   * Cubism FrameworkのAPIを使用する準備が完了したかどうか\r\n   * @return APIを使用する準備が完了していればtrueが返ります。\r\n   */\r\n  public static isStarted(): boolean {\r\n    return s_isStarted;\r\n  }\r\n\r\n  /**\r\n   * Cubism Frameworkのリソース初期化がすでに行われているかどうか\r\n   * @return リソース確保が完了していればtrueが返ります\r\n   */\r\n  public static isInitialized(): boolean {\r\n    return s_isInitialized;\r\n  }\r\n\r\n  /**\r\n   * Core APIにバインドしたログ関数を実行する\r\n   *\r\n   * @praram message ログメッセージ\r\n   */\r\n  public static coreLogFunction(message: string): void {\r\n    // Return if logging not possible.\r\n    if (!Live2DCubismCore.Logging.csmGetLogFunction()) {\r\n      return;\r\n    }\r\n\r\n    Live2DCubismCore.Logging.csmGetLogFunction()(message);\r\n  }\r\n\r\n  /**\r\n   * 現在のログ出力レベル設定の値を返す。\r\n   *\r\n   * @return  現在のログ出力レベル設定の値\r\n   */\r\n  public static getLoggingLevel(): LogLevel {\r\n    if (s_option != null) {\r\n      return s_option.loggingLevel;\r\n    }\r\n    return LogLevel.LogLevel_Off;\r\n  }\r\n\r\n  /**\r\n   * ID 관리자 인스턴스를 얻으십시오\r\n   * @return CubismManager 클래스 인스턴스\r\n   */\r\n  public static getIdManager(): CubismIdManager {\r\n    return s_cubismIdManager;\r\n  }\r\n\r\n  /**\r\n   * 静的クラスとして使用する\r\n   * インスタンス化させない\r\n   */\r\n  private constructor() {}\r\n}\r\n\r\nexport class Option {\r\n  logFunction: Live2DCubismCore.csmLogFunction; // ログ出力の関数オブジェクト\r\n  loggingLevel: LogLevel; // ログ出力レベルの設定\r\n}\r\n\r\n/**\r\n * ログ出力のレベル\r\n */\r\nexport enum LogLevel {\r\n  LogLevel_Verbose = 0, // 詳細ログ\r\n  LogLevel_Debug, // デバッグログ\r\n  LogLevel_Info, // Infoログ\r\n  LogLevel_Warning, // 警告ログ\r\n  LogLevel_Error, // エラーログ\r\n  LogLevel_Off // ログ出力無効\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './live2dcubismframework';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const Constant = $.Constant;\r\n  export const csmDelete = $.csmDelete;\r\n  export const CubismFramework = $.CubismFramework;\r\n  export type CubismFramework = $.CubismFramework;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { LogLevel } from '@framework/live2dcubismframework';\r\n\r\n/**\r\n * Sample Appで使用する定数\r\n */\r\n\r\n// 캔버스 너비 및 높이 픽셀 값 또는 동적 화면 크기 ( 'Auto').\r\nexport const CanvasSize: { width: number; height: number } | 'auto' = 'auto';\r\n\r\n// 화면\r\nexport const ViewScale = 1.0;\r\nexport const ViewMaxScale = 2.0;\r\nexport const ViewMinScale = 0.8;\r\n\r\nexport const ViewLogicalLeft = -1.0;\r\nexport const ViewLogicalRight = 1.0;\r\nexport const ViewLogicalBottom = -1.0;\r\nexport const ViewLogicalTop = 1.0;\r\n\r\nexport const ViewLogicalMaxLeft = -2.0;\r\nexport const ViewLogicalMaxRight = 2.0;\r\nexport const ViewLogicalMaxBottom = -2.0;\r\nexport const ViewLogicalMaxTop = 2.0;\r\n\r\n// 상대 경로\r\nexport const ResourcesPath = '../../Resources/';\r\n\r\n// 모델 뒤에 배경의 이미지 파일\r\nexport const BackImageName = 'back_class_normal.png';\r\n\r\n// 기어\r\nexport const GearImageName = 'icon_gear.png';\r\n\r\n// 끝 버튼\r\nexport const PowerImageName = 'CloseNormal.png';\r\n\r\n// 모델 정의 ---------------------------------------------- --------------------\r\n// 모델과의 디렉토리 이름 배열이 배치됩니다.\r\n// 디렉토리 이름이 model3.json의 이름과 일치하게합니다.\r\nexport const ModelDir: string[] = [\r\n  'usa01c_01',\r\n  'dosrhd님',\r\n  'usa01c_02',\r\n  'usa02c_02',\r\n  'usa03c_02',\r\n  'usa04c_02',\r\n  '버츄얼 슬라임ver2'\r\n];\r\nexport const ModelDirSize: number = ModelDir.length;\r\n\r\n// 외부 정의 파일 (JSON)과 결합\r\nexport const MotionGroupIdle = 'Idle'; // 공회전\r\nexport const MotionGroupTapBody = 'TapBody'; // 몸을 두드릴 때\r\n\r\n// 외부 정의 파일 (JSON)과 결합\r\nexport const HitAreaNameHead = 'Head';\r\nexport const HitAreaNameBody = 'Body';\r\n\r\n// 모션 우선 순위 상수\r\nexport const PriorityNone = 0;\r\nexport const PriorityIdle = 1;\r\nexport const PriorityNormal = 2;\r\nexport const PriorityForce = 3;\r\n\r\n//MOC3 일관성 검증 옵션 \r\nexport const MOCConsistencyValidationEnable = true;\r\n\r\n//디버그 로그 디스플레이 옵션\r\nexport const DebugLogEnable = true;\r\nexport const DebugTouchLogEnable = false;\r\n\r\n// 프레임 워크에서 로그 출력의 레벨 설정\r\nexport const CubismLoggingLevel: LogLevel = LogLevel.LogLevel_Verbose;\r\n\r\n// 기본 렌더링 대상 크기\r\nexport const RenderTargetWidth = 1900;\r\nexport const RenderTargetHeight = 1000;\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nexport let canvas: HTMLCanvasElement = null;\r\nexport let gl: WebGLRenderingContext = null;\r\nexport let s_instance: LAppGlManager = null;\r\n\r\n/**\r\n * Cubism SDK샘플에서 사용되는 WebGL을 관리하는 클래스\r\n */\r\nexport class LAppGlManager {\r\n  /**\r\n   * 클래스 인스턴스 (싱글 톤)를 반환합니다.\r\n   * 인스턴스가 생성되지 않으면 인스턴스가 내부에 생성됩니다.\r\n   *\r\n   * @return 수업 인스턴스\r\n   */\r\n  public static getInstance(): LAppGlManager {\r\n    if (s_instance == null) {\r\n      s_instance = new LAppGlManager();\r\n    }\r\n\r\n    return s_instance;\r\n  }\r\n\r\n  /**\r\n   * 클래스의 인스턴스 (싱글 톤)를 해제하십시오.\r\n   */\r\n  public static releaseInstance(): void {\r\n    if (s_instance != null) {\r\n      s_instance.release();\r\n    }\r\n\r\n    s_instance = null;\r\n  }\r\n\r\n  constructor() {\r\n    // 캔버스 생성\r\n    canvas = document.createElement('canvas');\r\n\r\n    // GL 컨텍스트를 초기화하십시오\r\n    // @ts-ignore\r\n    gl = canvas.getContext('webgl2');\r\n\r\n    if (!gl) {\r\n      // GL의 초기 실패는 실패했습니다\r\n      alert('Cannot initialize WebGL. This browser does not support.');\r\n      gl = null;\r\n\r\n      document.body.innerHTML =\r\n        'This browser does not support the <code>&lt;canvas&gt;</code> element.';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 풀어 주다.\r\n   */\r\n  public release(): void {}\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * @brief パラメータIDのデフォルト値を保持する定数<br>\r\n *         デフォルト値の仕様は以下のマニュアルに基づく<br>\r\n *         https://docs.live2d.com/cubism-editor-manual/standard-parametor-list/\r\n */\r\nexport const CubismDefaultParameterId = Object.freeze<Record<string, string>>({\r\n  // パーツID\r\n  HitAreaPrefix: 'HitArea',\r\n  HitAreaHead: 'Head',\r\n  HitAreaBody: 'Body',\r\n  PartsIdCore: 'Parts01Core',\r\n  PartsArmPrefix: 'Parts01Arm_',\r\n  PartsArmLPrefix: 'Parts01ArmL_',\r\n  PartsArmRPrefix: 'Parts01ArmR_',\r\n  // 매개 변수 ID\r\n  ParamAngleX: 'ParamAngleX',\r\n  ParamAngleY: 'ParamAngleY',\r\n  ParamAngleZ: 'ParamAngleZ',\r\n  ParamEyeLOpen: 'ParamEyeLOpen',\r\n  ParamEyeLSmile: 'ParamEyeLSmile',\r\n  ParamEyeROpen: 'ParamEyeROpen',\r\n  ParamEyeRSmile: 'ParamEyeRSmile',\r\n  ParamEyeBallX: 'ParamEyeBallX',\r\n  ParamEyeBallY: 'ParamEyeBallY',\r\n  ParamEyeBallForm: 'ParamEyeBallForm',\r\n  ParamBrowLY: 'ParamBrowLY',\r\n  ParamBrowRY: 'ParamBrowRY',\r\n  ParamBrowLX: 'ParamBrowLX',\r\n  ParamBrowRX: 'ParamBrowRX',\r\n  ParamBrowLAngle: 'ParamBrowLAngle',\r\n  ParamBrowRAngle: 'ParamBrowRAngle',\r\n  ParamBrowLForm: 'ParamBrowLForm',\r\n  ParamBrowRForm: 'ParamBrowRForm',\r\n  ParamMouthForm: 'ParamMouthForm',\r\n  ParamMouthOpenY: 'ParamMouthOpenY',\r\n  ParamCheek: 'ParamCheek',\r\n  ParamBodyAngleX: 'ParamBodyAngleX',\r\n  ParamBodyAngleY: 'ParamBodyAngleY',\r\n  ParamBodyAngleZ: 'ParamBodyAngleZ',\r\n  ParamBreath: 'ParamBreath',\r\n  ParamArmLA: 'ParamArmLA',\r\n  ParamArmRA: 'ParamArmRA',\r\n  ParamArmLB: 'ParamArmLB',\r\n  ParamArmRB: 'ParamArmRB',\r\n  ParamHandL: 'ParamHandL',\r\n  ParamHandR: 'ParamHandR',\r\n  ParamHairFront: 'ParamHairFront',\r\n  ParamHairSide: 'ParamHairSide',\r\n  ParamHairBack: 'ParamHairBack',\r\n  ParamHairFluffy: 'ParamHairFluffy',\r\n  ParamShoulderY: 'ParamShoulderY',\r\n  ParamBustX: 'ParamBustX',\r\n  ParamBustY: 'ParamBustY',\r\n  ParamBaseX: 'ParamBaseX',\r\n  ParamBaseY: 'ParamBaseY',\r\n  ParamNONE: 'NONE:'\r\n});\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismdefaultparameterid';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const HitAreaBody = $.CubismDefaultParameterId.HitAreaBody;\r\n  export const HitAreaHead = $.CubismDefaultParameterId.HitAreaHead;\r\n  export const HitAreaPrefix = $.CubismDefaultParameterId.HitAreaPrefix;\r\n  export const ParamAngleX = $.CubismDefaultParameterId.ParamAngleX;\r\n  export const ParamAngleY = $.CubismDefaultParameterId.ParamAngleY;\r\n  export const ParamAngleZ = $.CubismDefaultParameterId.ParamAngleZ;\r\n  export const ParamArmLA = $.CubismDefaultParameterId.ParamArmLA;\r\n  export const ParamArmLB = $.CubismDefaultParameterId.ParamArmLB;\r\n  export const ParamArmRA = $.CubismDefaultParameterId.ParamArmRA;\r\n  export const ParamArmRB = $.CubismDefaultParameterId.ParamArmRB;\r\n  export const ParamBaseX = $.CubismDefaultParameterId.ParamBaseX;\r\n  export const ParamBaseY = $.CubismDefaultParameterId.ParamBaseY;\r\n  export const ParamBodyAngleX = $.CubismDefaultParameterId.ParamBodyAngleX;\r\n  export const ParamBodyAngleY = $.CubismDefaultParameterId.ParamBodyAngleY;\r\n  export const ParamBodyAngleZ = $.CubismDefaultParameterId.ParamBodyAngleZ;\r\n  export const ParamBreath = $.CubismDefaultParameterId.ParamBreath;\r\n  export const ParamBrowLAngle = $.CubismDefaultParameterId.ParamBrowLAngle;\r\n  export const ParamBrowLForm = $.CubismDefaultParameterId.ParamBrowLForm;\r\n  export const ParamBrowLX = $.CubismDefaultParameterId.ParamBrowLX;\r\n  export const ParamBrowLY = $.CubismDefaultParameterId.ParamBrowLY;\r\n  export const ParamBrowRAngle = $.CubismDefaultParameterId.ParamBrowRAngle;\r\n  export const ParamBrowRForm = $.CubismDefaultParameterId.ParamBrowRForm;\r\n  export const ParamBrowRX = $.CubismDefaultParameterId.ParamBrowRX;\r\n  export const ParamBrowRY = $.CubismDefaultParameterId.ParamBrowRY;\r\n  export const ParamBustX = $.CubismDefaultParameterId.ParamBustX;\r\n  export const ParamBustY = $.CubismDefaultParameterId.ParamBustY;\r\n  export const ParamCheek = $.CubismDefaultParameterId.ParamCheek;\r\n  export const ParamEyeBallForm = $.CubismDefaultParameterId.ParamEyeBallForm;\r\n  export const ParamEyeBallX = $.CubismDefaultParameterId.ParamEyeBallX;\r\n  export const ParamEyeBallY = $.CubismDefaultParameterId.ParamEyeBallY;\r\n  export const ParamEyeLOpen = $.CubismDefaultParameterId.ParamEyeLOpen;\r\n  export const ParamEyeLSmile = $.CubismDefaultParameterId.ParamEyeLSmile;\r\n  export const ParamEyeROpen = $.CubismDefaultParameterId.ParamEyeROpen;\r\n  export const ParamEyeRSmile = $.CubismDefaultParameterId.ParamEyeRSmile;\r\n  export const ParamHairBack = $.CubismDefaultParameterId.ParamHairBack;\r\n  export const ParamHairFluffy = $.CubismDefaultParameterId.ParamHairFluffy;\r\n  export const ParamHairFront = $.CubismDefaultParameterId.ParamHairFront;\r\n  export const ParamHairSide = $.CubismDefaultParameterId.ParamHairSide;\r\n  export const ParamHandL = $.CubismDefaultParameterId.ParamHandL;\r\n  export const ParamHandR = $.CubismDefaultParameterId.ParamHandR;\r\n  export const ParamMouthForm = $.CubismDefaultParameterId.ParamMouthForm;\r\n  export const ParamMouthOpenY = $.CubismDefaultParameterId.ParamMouthOpenY;\r\n  export const ParamNONE = $.CubismDefaultParameterId.ParamNONE;\r\n  export const ParamShoulderY = $.CubismDefaultParameterId.ParamShoulderY;\r\n  export const PartsArmLPrefix = $.CubismDefaultParameterId.PartsArmLPrefix;\r\n  export const PartsArmPrefix = $.CubismDefaultParameterId.PartsArmPrefix;\r\n  export const PartsArmRPrefix = $.CubismDefaultParameterId.PartsArmRPrefix;\r\n  export const PartsIdCore = $.CubismDefaultParameterId.PartsIdCore;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from './id/cubismid';\r\nimport { csmMap } from './type/csmmap';\r\n\r\n/**\r\n * モデル設定情報を取り扱う関数を宣言した純粋仮想クラス。\r\n *\r\n * このクラスを継承することで、モデル設定情報を取り扱うクラスになる。\r\n */\r\nexport abstract class ICubismModelSetting {\r\n  /**\r\n   * Mocファイルの名前を取得する\r\n   * @return Mocファイルの名前\r\n   */\r\n  public abstract getModelFileName(): string;\r\n\r\n  /**\r\n   * モデルが使用するテクスチャの数を取得する\r\n   * テクスチャの数\r\n   */\r\n  public abstract getTextureCount(): number;\r\n\r\n  /**\r\n   * テクスチャが配置されたディレクトリの名前を取得する\r\n   * @return テクスチャが配置されたディレクトリの名前\r\n   */\r\n  public abstract getTextureDirectory(): string;\r\n\r\n  /**\r\n   * モデルが使用するテクスチャの名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return テクスチャの名前\r\n   */\r\n  public abstract getTextureFileName(index: number): string;\r\n\r\n  /**\r\n   * モデルに設定された当たり判定の数を取得する\r\n   * @return モデルに設定された当たり判定の数\r\n   */\r\n  public abstract getHitAreasCount(): number;\r\n\r\n  /**\r\n   * 当たり判定に設定されたIDを取得する\r\n   *\r\n   * @param index 配列のindex\r\n   * @return 当たり判定に設定されたID\r\n   */\r\n  public abstract getHitAreaId(index: number): CubismIdHandle;\r\n\r\n  /**\r\n   * 当たり判定に設定された名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return 当たり判定に設定された名前\r\n   */\r\n  public abstract getHitAreaName(index: number): string;\r\n\r\n  /**\r\n   * 物理演算設定ファイルの名前を取得する\r\n   * @return 物理演算設定ファイルの名前\r\n   */\r\n  public abstract getPhysicsFileName(): string;\r\n\r\n  /**\r\n   * パーツ切り替え設定ファイルの名前を取得する\r\n   * @return パーツ切り替え設定ファイルの名前\r\n   */\r\n  public abstract getPoseFileName(): string;\r\n\r\n  /**\r\n   * 表情設定ファイルの数を取得する\r\n   * @return 表情設定ファイルの数\r\n   */\r\n  public abstract getExpressionCount(): number;\r\n\r\n  /**\r\n   * 表情設定ファイルを識別する名前（別名）を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return 表情の名前\r\n   */\r\n  public abstract getExpressionName(index: number): string;\r\n\r\n  /**\r\n   * 表情設定ファイルの名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return 表情設定ファイルの名前\r\n   */\r\n  public abstract getExpressionFileName(index: number): string;\r\n\r\n  /**\r\n   * モーショングループの数を取得する\r\n   * @return モーショングループの数\r\n   */\r\n  public abstract getMotionGroupCount(): number;\r\n\r\n  /**\r\n   * モーショングループの名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return モーショングループの名前\r\n   */\r\n  public abstract getMotionGroupName(index: number): string;\r\n\r\n  /**\r\n   * モーショングループに含まれるモーションの数を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @return モーショングループの数\r\n   */\r\n  public abstract getMotionCount(groupName: string): number;\r\n\r\n  /**\r\n   * グループ名とインデックス値からモーションファイル名を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index     配列のインデックス値\r\n   * @return モーションファイルの名前\r\n   */\r\n  public abstract getMotionFileName(groupName: string, index: number): string;\r\n\r\n  /**\r\n   * モーションに対応するサウンドファイルの名前を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index 配列のインデックス値\r\n   * @return サウンドファイルの名前\r\n   */\r\n  public abstract getMotionSoundFileName(\r\n    groupName: string,\r\n    index: number\r\n  ): string;\r\n\r\n  /**\r\n   * モーション開始時のフェードイン処理時間を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index 配列のインデックス値\r\n   * @return フェードイン処理時間[秒]\r\n   */\r\n  public abstract getMotionFadeInTimeValue(\r\n    groupName: string,\r\n    index: number\r\n  ): number;\r\n\r\n  /**\r\n   * モーション終了時のフェードアウト処理時間を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index 配列のインデックス値\r\n   * @return フェードアウト処理時間[秒]\r\n   */\r\n  public abstract getMotionFadeOutTimeValue(\r\n    groupName: string,\r\n    index: number\r\n  ): number;\r\n\r\n  /**\r\n   * ユーザーデータのファイル名を取得する\r\n   * @return ユーザーデータのファイル名\r\n   */\r\n  public abstract getUserDataFile(): string;\r\n\r\n  /**\r\n   * レイアウト情報を取得する\r\n   * @param outLayoutMap csmMapクラスのインスタンス\r\n   * @return true レイアウト情報が存在する\r\n   * @return false レイアウト情報が存在しない\r\n   */\r\n  public abstract getLayoutMap(outLayoutMap: csmMap<string, number>): boolean;\r\n\r\n  /**\r\n   * 目パチに関連付けられたパラメータの数を取得する\r\n   * @return 目パチに関連付けられたパラメータの数\r\n   */\r\n  public abstract getEyeBlinkParameterCount(): number;\r\n\r\n  /**\r\n   * 目パチに関連付けられたパラメータのIDを取得する\r\n   * @param index 配列のインデックス値\r\n   * @return パラメータID\r\n   */\r\n  public abstract getEyeBlinkParameterId(index: number): CubismIdHandle;\r\n\r\n  /**\r\n   * LIP 동기화와 관련된 매개 변수 수를 얻으십시오\r\n   * @return 립싱크와 관련된 매개 변수 수\r\n   */\r\n  public abstract getLipSyncParameterCount(): number;\r\n\r\n  /**\r\n   * LIP 동기화와 관련된 매개 변수 수를 얻으십시오\r\n   * @param index 고용 지수 가치\r\n   * @return 매개 변수 ID\r\n   */\r\n  public abstract getLipSyncParameterId(index: number): CubismIdHandle;\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './icubismmodelsetting';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const ICubismModelSetting = $.ICubismModelSetting;\r\n  export type ICubismModelSetting = $.ICubismModelSetting;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { ICubismModelSetting } from './icubismmodelsetting';\r\nimport { CubismIdHandle } from './id/cubismid';\r\nimport { CubismFramework } from './live2dcubismframework';\r\nimport { csmMap, iterator } from './type/csmmap';\r\nimport { csmVector } from './type/csmvector';\r\nimport { CubismJson, Value } from './utils/cubismjson';\r\n\r\n/**\r\n * Model3Jsonのキー文字列\r\n */\r\n\r\n// JSON Keys\r\nconst Version = 'Version';\r\nconst FileReferences = 'FileReferences';\r\nconst Groups = 'Groups';\r\nconst Layout = 'Layout';\r\nconst HitAreas = 'HitAreas';\r\n\r\nconst Moc = 'Moc';\r\nconst Textures = 'Textures';\r\nconst Physics = 'Physics';\r\nconst Pose = 'Pose';\r\nconst Expressions = 'Expressions';\r\nconst Motions = 'Motions';\r\n\r\nconst UserData = 'UserData';\r\nconst Name = 'Name';\r\nconst FilePath = 'File';\r\nconst Id = 'Id';\r\nconst Ids = 'Ids';\r\nconst Target = 'Target';\r\n\r\n// Motions\r\nconst Idle = 'Idle';\r\nconst TapBody = 'TapBody';\r\nconst PinchIn = 'PinchIn';\r\nconst PinchOut = 'PinchOut';\r\nconst Shake = 'Shake';\r\nconst FlickHead = 'FlickHead';\r\nconst Parameter = 'Parameter';\r\n\r\nconst SoundPath = 'Sound';\r\nconst FadeInTime = 'FadeInTime';\r\nconst FadeOutTime = 'FadeOutTime';\r\n\r\n// Layout\r\nconst CenterX = 'CenterX';\r\nconst CenterY = 'CenterY';\r\nconst X = 'X';\r\nconst Y = 'Y';\r\nconst Width = 'Width';\r\nconst Height = 'Height';\r\n\r\nconst LipSync = 'LipSync';\r\nconst EyeBlink = 'EyeBlink';\r\n\r\nconst InitParameter = 'init_param';\r\nconst InitPartsVisible = 'init_parts_visible';\r\nconst Val = 'val';\r\n\r\nenum FrequestNode {\r\n  FrequestNode_Groups, // getRoot().getValueByString(Groups)\r\n  FrequestNode_Moc, // getRoot().getValueByString(FileReferences).getValueByString(Moc)\r\n  FrequestNode_Motions, // getRoot().getValueByString(FileReferences).getValueByString(Motions)\r\n  FrequestNode_Expressions, // getRoot().getValueByString(FileReferences).getValueByString(Expressions)\r\n  FrequestNode_Textures, // getRoot().getValueByString(FileReferences).getValueByString(Textures)\r\n  FrequestNode_Physics, // getRoot().getValueByString(FileReferences).getValueByString(Physics)\r\n  FrequestNode_Pose, // getRoot().getValueByString(FileReferences).getValueByString(Pose)\r\n  FrequestNode_HitAreas // getRoot().getValueByString(HitAreas)\r\n}\r\n\r\n/**\r\n * Model3Jsonパーサー\r\n *\r\n * model3.jsonファイルをパースして値を取得する\r\n */\r\nexport class CubismModelSettingJson extends ICubismModelSetting {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   *\r\n   * @param buffer    Model3Jsonをバイト配列として読み込んだデータバッファ\r\n   * @param size      Model3Jsonのデータサイズ\r\n   */\r\n  public constructor(buffer: ArrayBuffer, size: number) {\r\n    super();\r\n    this._json = CubismJson.create(buffer, size);\r\n\r\n    if (this.getJson()) {\r\n      this._jsonValue = new csmVector<Value>();\r\n\r\n      // 順番はenum FrequestNodeと一致させる\r\n      this._jsonValue.pushBack(\r\n        this.getJson().getRoot().getValueByString(Groups)\r\n      );\r\n      this._jsonValue.pushBack(\r\n        this.getJson()\r\n          .getRoot()\r\n          .getValueByString(FileReferences)\r\n          .getValueByString(Moc)\r\n      );\r\n      this._jsonValue.pushBack(\r\n        this.getJson()\r\n          .getRoot()\r\n          .getValueByString(FileReferences)\r\n          .getValueByString(Motions)\r\n      );\r\n      this._jsonValue.pushBack(\r\n        this.getJson()\r\n          .getRoot()\r\n          .getValueByString(FileReferences)\r\n          .getValueByString(Expressions)\r\n      );\r\n      this._jsonValue.pushBack(\r\n        this.getJson()\r\n          .getRoot()\r\n          .getValueByString(FileReferences)\r\n          .getValueByString(Textures)\r\n      );\r\n      this._jsonValue.pushBack(\r\n        this.getJson()\r\n          .getRoot()\r\n          .getValueByString(FileReferences)\r\n          .getValueByString(Physics)\r\n      );\r\n      this._jsonValue.pushBack(\r\n        this.getJson()\r\n          .getRoot()\r\n          .getValueByString(FileReferences)\r\n          .getValueByString(Pose)\r\n      );\r\n      this._jsonValue.pushBack(\r\n        this.getJson().getRoot().getValueByString(HitAreas)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    CubismJson.delete(this._json);\r\n\r\n    this._jsonValue = null;\r\n  }\r\n\r\n  /**\r\n   * CubismJsonオブジェクトを取得する\r\n   *\r\n   * @return CubismJson\r\n   */\r\n  public getJson(): CubismJson {\r\n    return this._json;\r\n  }\r\n\r\n  /**\r\n   * Mocファイルの名前を取得する\r\n   * @return Mocファイルの名前\r\n   */\r\n  public getModelFileName(): string {\r\n    if (!this.isExistModelFile()) {\r\n      return '';\r\n    }\r\n    return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();\r\n  }\r\n\r\n  /**\r\n   * モデルが使用するテクスチャの数を取得する\r\n   * テクスチャの数\r\n   */\r\n  public getTextureCount(): number {\r\n    if (!this.isExistTextureFiles()) {\r\n      return 0;\r\n    }\r\n\r\n    return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();\r\n  }\r\n\r\n  /**\r\n   * テクスチャが配置されたディレクトリの名前を取得する\r\n   * @return テクスチャが配置されたディレクトリの名前\r\n   */\r\n  public getTextureDirectory(): string {\r\n    const texturePath = this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Textures)\r\n      .getValueByIndex(0)\r\n      .getRawString();\r\n\r\n    const pathArray = texturePath.split('/');\r\n    // 最後の要素はテクスチャ名なので不要\r\n    const arrayLength = pathArray.length - 1;\r\n    let textureDirectoryStr = '';\r\n\r\n    // 分割したパスを結合\r\n    for (let i = 0; i < arrayLength; i++) {\r\n      textureDirectoryStr += pathArray[i];\r\n      if (i < arrayLength - 1) {\r\n        textureDirectoryStr += '/';\r\n      }\r\n    }\r\n\r\n    return textureDirectoryStr;\r\n  }\r\n\r\n  /**\r\n   * モデルが使用するテクスチャの名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return テクスチャの名前\r\n   */\r\n  public getTextureFileName(index: number): string {\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Textures)\r\n      .getValueByIndex(index)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * モデルに設定された当たり判定の数を取得する\r\n   * @return モデルに設定された当たり判定の数\r\n   */\r\n  public getHitAreasCount(): number {\r\n    if (!this.isExistHitAreas()) {\r\n      return 0;\r\n    }\r\n\r\n    return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();\r\n  }\r\n\r\n  /**\r\n   * 当たり判定に設定されたIDを取得する\r\n   *\r\n   * @param index 配列のindex\r\n   * @return 当たり判定に設定されたID\r\n   */\r\n  public getHitAreaId(index: number): CubismIdHandle {\r\n    return CubismFramework.getIdManager().getId(\r\n      this._jsonValue\r\n        .at(FrequestNode.FrequestNode_HitAreas)\r\n        .getValueByIndex(index)\r\n        .getValueByString(Id)\r\n        .getRawString()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 当たり判定に設定された名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return 当たり判定に設定された名前\r\n   */\r\n  public getHitAreaName(index: number): string {\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_HitAreas)\r\n      .getValueByIndex(index)\r\n      .getValueByString(Name)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * 物理演算設定ファイルの名前を取得する\r\n   * @return 物理演算設定ファイルの名前\r\n   */\r\n  public getPhysicsFileName(): string {\r\n    if (!this.isExistPhysicsFile()) {\r\n      return '';\r\n    }\r\n\r\n    return this._jsonValue.at(FrequestNode.FrequestNode_Physics).getRawString();\r\n  }\r\n\r\n  /**\r\n   * パーツ切り替え設定ファイルの名前を取得する\r\n   * @return パーツ切り替え設定ファイルの名前\r\n   */\r\n  public getPoseFileName(): string {\r\n    if (!this.isExistPoseFile()) {\r\n      return '';\r\n    }\r\n\r\n    return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();\r\n  }\r\n\r\n  /**\r\n   * 表情設定ファイルの数を取得する\r\n   * @return 表情設定ファイルの数\r\n   */\r\n  public getExpressionCount(): number {\r\n    if (!this.isExistExpressionFile()) {\r\n      return 0;\r\n    }\r\n\r\n    return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getSize();\r\n  }\r\n\r\n  /**\r\n   * 表情設定ファイルを識別する名前（別名）を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return 表情の名前\r\n   */\r\n  public getExpressionName(index: number): string {\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Expressions)\r\n      .getValueByIndex(index)\r\n      .getValueByString(Name)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * 表情設定ファイルの名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return 表情設定ファイルの名前\r\n   */\r\n  public getExpressionFileName(index: number): string {\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Expressions)\r\n      .getValueByIndex(index)\r\n      .getValueByString(FilePath)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * モーショングループの数を取得する\r\n   * @return モーショングループの数\r\n   */\r\n  public getMotionGroupCount(): number {\r\n    if (!this.isExistMotionGroups()) {\r\n      return 0;\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getKeys()\r\n      .getSize();\r\n  }\r\n\r\n  /**\r\n   * モーショングループの名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return モーショングループの名前\r\n   */\r\n  public getMotionGroupName(index: number): string {\r\n    if (!this.isExistMotionGroups()) {\r\n      return null;\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getKeys()\r\n      .at(index);\r\n  }\r\n\r\n  /**\r\n   * モーショングループに含まれるモーションの数を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @return モーショングループの数\r\n   */\r\n  public getMotionCount(groupName: string): number {\r\n    if (!this.isExistMotionGroupName(groupName)) {\r\n      return 0;\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getSize();\r\n  }\r\n\r\n  /**\r\n   * グループ名とインデックス値からモーションファイル名を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index     配列のインデックス値\r\n   * @return モーションファイルの名前\r\n   */\r\n  public getMotionFileName(groupName: string, index: number): string {\r\n    if (!this.isExistMotionGroupName(groupName)) {\r\n      return '';\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(FilePath)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * モーションに対応するサウンドファイルの名前を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index 配列のインデックス値\r\n   * @return サウンドファイルの名前\r\n   */\r\n  public getMotionSoundFileName(groupName: string, index: number): string {\r\n    if (!this.isExistMotionSoundFile(groupName, index)) {\r\n      return '';\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(SoundPath)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * モーション開始時のフェードイン処理時間を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index 配列のインデックス値\r\n   * @return フェードイン処理時間[秒]\r\n   */\r\n  public getMotionFadeInTimeValue(groupName: string, index: number): number {\r\n    if (!this.isExistMotionFadeIn(groupName, index)) {\r\n      return -1.0;\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(FadeInTime)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーション終了時のフェードアウト処理時間を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index 配列のインデックス値\r\n   * @return フェードアウト処理時間[秒]\r\n   */\r\n  public getMotionFadeOutTimeValue(groupName: string, index: number): number {\r\n    if (!this.isExistMotionFadeOut(groupName, index)) {\r\n      return -1.0;\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(FadeOutTime)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * ユーザーデータのファイル名を取得する\r\n   * @return ユーザーデータのファイル名\r\n   */\r\n  public getUserDataFile(): string {\r\n    if (!this.isExistUserDataFile()) {\r\n      return '';\r\n    }\r\n\r\n    return this.getJson()\r\n      .getRoot()\r\n      .getValueByString(FileReferences)\r\n      .getValueByString(UserData)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * レイアウト情報を取得する\r\n   * @param outLayoutMap csmMapクラスのインスタンス\r\n   * @return true レイアウト情報が存在する\r\n   * @return false レイアウト情報が存在しない\r\n   */\r\n  public getLayoutMap(outLayoutMap: csmMap<string, number>): boolean {\r\n    // 存在しない要素にアクセスするとエラーになるためValueがnullの場合はnullを代入する\r\n    const map: csmMap<string, Value> = this.getJson()\r\n      .getRoot()\r\n      .getValueByString(Layout)\r\n      .getMap();\r\n\r\n    if (map == null) {\r\n      return false;\r\n    }\r\n\r\n    let ret = false;\r\n\r\n    for (\r\n      const ite: iterator<string, Value> = map.begin();\r\n      ite.notEqual(map.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());\r\n      ret = true;\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * 눈 균열과 관련된 매개 변수 수를 얻습니다\r\n   * @return 눈 균열과 관련된 매개 변수 수\r\n   */\r\n  public getEyeBlinkParameterCount(): number {\r\n    if (!this.isExistEyeBlinkParameters()) {\r\n      return 0;\r\n    }\r\n\r\n    let num = 0;\r\n    for (\r\n      let i = 0;\r\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n      i++\r\n    ) {\r\n      const refI: Value = this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Groups)\r\n        .getValueByIndex(i);\r\n      if (refI.isNull() || refI.isError()) {\r\n        continue;\r\n      }\r\n\r\n      if (refI.getValueByString(Name).getRawString() == EyeBlink) {\r\n        num = refI.getValueByString(Ids).getVector().getSize();\r\n        break;\r\n      }\r\n    }\r\n\r\n    return num;\r\n  }\r\n\r\n  /**\r\n   * 目パチに関連付けられたパラメータのIDを取得する\r\n   * @param index 配列のインデックス値\r\n   * @return パラメータID\r\n   */\r\n  public getEyeBlinkParameterId(index: number): CubismIdHandle {\r\n    if (!this.isExistEyeBlinkParameters()) {\r\n      return null;\r\n    }\r\n\r\n    for (\r\n      let i = 0;\r\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n      i++\r\n    ) {\r\n      const refI: Value = this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Groups)\r\n        .getValueByIndex(i);\r\n      if (refI.isNull() || refI.isError()) {\r\n        continue;\r\n      }\r\n\r\n      if (refI.getValueByString(Name).getRawString() == EyeBlink) {\r\n        return CubismFramework.getIdManager().getId(\r\n          refI.getValueByString(Ids).getValueByIndex(index).getRawString()\r\n        );\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * リップシンクに関連付けられたパラメータの数を取得する\r\n   * @return リップシンクに関連付けられたパラメータの数\r\n   */\r\n  public getLipSyncParameterCount(): number {\r\n    if (!this.isExistLipSyncParameters()) {\r\n      return 0;\r\n    }\r\n\r\n    let num = 0;\r\n    for (\r\n      let i = 0;\r\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n      i++\r\n    ) {\r\n      const refI: Value = this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Groups)\r\n        .getValueByIndex(i);\r\n      if (refI.isNull() || refI.isError()) {\r\n        continue;\r\n      }\r\n\r\n      if (refI.getValueByString(Name).getRawString() == LipSync) {\r\n        num = refI.getValueByString(Ids).getVector().getSize();\r\n        break;\r\n      }\r\n    }\r\n\r\n    return num;\r\n  }\r\n\r\n  /**\r\n   * リップシンクに関連付けられたパラメータの数を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return パラメータID\r\n   */\r\n  public getLipSyncParameterId(index: number): CubismIdHandle {\r\n    if (!this.isExistLipSyncParameters()) {\r\n      return null;\r\n    }\r\n\r\n    for (\r\n      let i = 0;\r\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n      i++\r\n    ) {\r\n      const refI: Value = this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Groups)\r\n        .getValueByIndex(i);\r\n      if (refI.isNull() || refI.isError()) {\r\n        continue;\r\n      }\r\n\r\n      if (refI.getValueByString(Name).getRawString() == LipSync) {\r\n        return CubismFramework.getIdManager().getId(\r\n          refI.getValueByString(Ids).getValueByIndex(index).getRawString()\r\n        );\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * モデルファイルのキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistModelFile(): boolean {\r\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Moc);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * テクスチャファイルのキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistTextureFiles(): boolean {\r\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Textures);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 当たり判定のキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistHitAreas(): boolean {\r\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 物理演算ファイルのキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistPhysicsFile(): boolean {\r\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Physics);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * ポーズ設定ファイルのキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistPoseFile(): boolean {\r\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Pose);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 表情設定ファイルのキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistExpressionFile(): boolean {\r\n    const node: Value = this._jsonValue.at(\r\n      FrequestNode.FrequestNode_Expressions\r\n    );\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * モーショングループのキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistMotionGroups(): boolean {\r\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Motions);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 引数で指定したモーショングループのキーが存在するかどうかを確認する\r\n   * @param groupName  グループ名\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistMotionGroupName(groupName: string): boolean {\r\n    const node: Value = this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 引数で指定したモーションに対応するサウンドファイルのキーが存在するかどうかを確認する\r\n   * @param groupName  グループ名\r\n   * @param index 配列のインデックス値\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistMotionSoundFile(groupName: string, index: number): boolean {\r\n    const node: Value = this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(SoundPath);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 引数で指定したモーションに対応するフェードイン時間のキーが存在するかどうかを確認する\r\n   * @param groupName  グループ名\r\n   * @param index 配列のインデックス値\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistMotionFadeIn(groupName: string, index: number): boolean {\r\n    const node: Value = this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(FadeInTime);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 引数で指定したモーションに対応するフェードアウト時間のキーが存在するかどうかを確認する\r\n   * @param groupName  グループ名\r\n   * @param index 配列のインデックス値\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistMotionFadeOut(groupName: string, index: number): boolean {\r\n    const node: Value = this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(FadeOutTime);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * UserDataのファイル名が存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistUserDataFile(): boolean {\r\n    const node: Value = this.getJson()\r\n      .getRoot()\r\n      .getValueByString(FileReferences)\r\n      .getValueByString(UserData);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 目ぱちに対応付けられたパラメータが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistEyeBlinkParameters(): boolean {\r\n    if (\r\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\r\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    for (\r\n      let i = 0;\r\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n      ++i\r\n    ) {\r\n      if (\r\n        this._jsonValue\r\n          .at(FrequestNode.FrequestNode_Groups)\r\n          .getValueByIndex(i)\r\n          .getValueByString(Name)\r\n          .getRawString() == EyeBlink\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * リップシンクに対応付けられたパラメータが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistLipSyncParameters(): boolean {\r\n    if (\r\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\r\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()\r\n    ) {\r\n      return false;\r\n    }\r\n    for (\r\n      let i = 0;\r\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n      ++i\r\n    ) {\r\n      if (\r\n        this._jsonValue\r\n          .at(FrequestNode.FrequestNode_Groups)\r\n          .getValueByIndex(i)\r\n          .getValueByString(Name)\r\n          .getRawString() == LipSync\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private _json: CubismJson;\r\n  private _jsonValue: csmVector<Value>;\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmodelsettingjson';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismModelSettingJson = $.CubismModelSettingJson;\r\n  export type CubismModelSettingJson = $.CubismModelSettingJson;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmVector } from '../type/csmvector';\r\n\r\n/**\r\n * 송풍기\r\n *\r\n * 호흡기 기능을 제공합니다.\r\n */\r\nexport class CubismBreath {\r\n  /**\r\n   * 인스턴스 생성\r\n   */\r\n  public static create(): CubismBreath {\r\n    return new CubismBreath();\r\n  }\r\n\r\n  /**\r\n   * 인스턴스 폐기\r\n   * @param instance 대상 입방체\r\n   */\r\n  public static delete(instance: CubismBreath): void {\r\n    if (instance != null) {\r\n      instance = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 호흡 매개 변수 연결\r\n   * @param breathParameters 호흡에 연결하려는 매개 변수 목록\r\n   */\r\n  public setParameters(breathParameters: csmVector<BreathParameterData>): void {\r\n    this._breathParameters = breathParameters;\r\n  }\r\n\r\n  /**\r\n   * 호흡과 관련된 매개 변수 획득\r\n   * @return 호흡과 연결된 매개 변수 목록\r\n   */\r\n  public getParameters(): csmVector<BreathParameterData> {\r\n    return this._breathParameters;\r\n  }\r\n\r\n  /**\r\n   * 모델 매개 변수를 업데이트합니다\r\n   * @param model 대상 모델\r\n   * @param deltaTimeSeconds 델타 시간[秒]\r\n   */\r\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\r\n    this._currentTime += deltaTimeSeconds;\r\n\r\n    const t: number = this._currentTime * 2.0 * 3.14159;\r\n\r\n    for (let i = 0; i < this._breathParameters.getSize(); ++i) {\r\n      const data: BreathParameterData = this._breathParameters.at(i);\r\n\r\n      model.addParameterValueById(\r\n        data.parameterId,\r\n        data.offset + data.peak * Math.sin(t / data.cycle),\r\n        data.weight\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._currentTime = 0.0;\r\n  }\r\n\r\n  _breathParameters: csmVector<BreathParameterData>; // 呼吸にひもづいているパラメータのリスト\r\n  _currentTime: number; // 積算時間[秒]\r\n}\r\n\r\n/**\r\n * 呼吸のパラメータ情報\r\n */\r\nexport class BreathParameterData {\r\n  /**\r\n   * コンストラクタ\r\n   * @param parameterId   呼吸をひもづけるパラメータID\r\n   * @param offset        呼吸を正弦波としたときの、波のオフセット\r\n   * @param peak          呼吸を正弦波としたときの、波の高さ\r\n   * @param cycle         呼吸を正弦波としたときの、波の周期\r\n   * @param weight        パラメータへの重み\r\n   */\r\n  constructor(\r\n    parameterId?: CubismIdHandle,\r\n    offset?: number,\r\n    peak?: number,\r\n    cycle?: number,\r\n    weight?: number\r\n  ) {\r\n    this.parameterId = parameterId == undefined ? null : parameterId;\r\n    this.offset = offset == undefined ? 0.0 : offset;\r\n    this.peak = peak == undefined ? 0.0 : peak;\r\n    this.cycle = cycle == undefined ? 0.0 : cycle;\r\n    this.weight = weight == undefined ? 0.0 : weight;\r\n  }\r\n\r\n  parameterId: CubismIdHandle; // 呼吸をひもづけるパラメータID\\\r\n  offset: number; // 呼吸を正弦波としたときの、波のオフセット\r\n  peak: number; // 呼吸を正弦波としたときの、波の高さ\r\n  cycle: number; // 呼吸を正弦波としたときの、波の周期\r\n  weight: number; // パラメータへの重み\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismbreath';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const BreathParameterData = $.BreathParameterData;\r\n  export type BreathParameterData = $.BreathParameterData;\r\n  export const CubismBreath = $.CubismBreath;\r\n  export type CubismBreath = $.CubismBreath;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { ICubismModelSetting } from '../icubismmodelsetting';\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmVector } from '../type/csmvector';\r\n\r\n/**\r\n * 自動まばたき機能\r\n *\r\n * 自動まばたき機能を提供する。\r\n */\r\nexport class CubismEyeBlink {\r\n  /**\r\n   * 인스턴스를 만듭니다\r\n   * @param modelSetting 모델 설정 정보\r\n   * @return 생성 인스턴스\r\n   * @note 인수가 null이면 매개 변수 ID가 설정되지 않은 빈 인스턴스를 만듭니다.\r\n   */\r\n  public static create(\r\n    modelSetting: ICubismModelSetting = null\r\n  ): CubismEyeBlink {\r\n    return new CubismEyeBlink(modelSetting);\r\n  }\r\n\r\n  /**\r\n   * 인스턴스 폐기\r\n   * @param eyeBlink Cubismeyeblink를 대상으로합니다\r\n   */\r\n  public static delete(eyeBlink: CubismEyeBlink): void {\r\n    if (eyeBlink != null) {\r\n      eyeBlink = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 회전 간격 세트\r\n   * @param blinkingInterval 깜박이는 시간[秒]\r\n   */\r\n  public setBlinkingInterval(blinkingInterval: number): void {\r\n    this._blinkingIntervalSeconds = blinkingInterval;\r\n  }\r\n\r\n  /**\r\n   * 깜박이는 모션의 상세한 설정\r\n   * @param closing   눈꺼풀을 닫는 데 필요한 시간[秒]\r\n   * @param closed    작업이 눈꺼풀을 닫는 데 필요한 시간[秒]\r\n   * @param opening   눈꺼풀을 여는 데 필요한 시간이 필요합니다[秒]\r\n   */\r\n  public setBlinkingSetting(\r\n    closing: number,\r\n    closed: number,\r\n    opening: number\r\n  ): void {\r\n    this._closingSeconds = closing;\r\n    this._closedSeconds = closed;\r\n    this._openingSeconds = opening;\r\n  }\r\n\r\n  /**\r\n   * まばたきさせるパラメータIDのリストの設定\r\n   * @param parameterIds パラメータのIDのリスト\r\n   */\r\n  public setParameterIds(parameterIds: csmVector<CubismIdHandle>): void {\r\n    this._parameterIds = parameterIds;\r\n  }\r\n\r\n  /**\r\n   * まばたきさせるパラメータIDのリストの取得\r\n   * @return パラメータIDのリスト\r\n   */\r\n  public getParameterIds(): csmVector<CubismIdHandle> {\r\n    return this._parameterIds;\r\n  }\r\n\r\n  /**\r\n   * 모델 매개 변수를 업데이트합니다\r\n   * @param model 대상 모델\r\n   * @param deltaTimeSeconds 델타 시간[秒]\r\n   */\r\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\r\n    this._userTimeSeconds += deltaTimeSeconds;\r\n    let parameterValue: number;\r\n    let t = 0.0;\r\n    const blinkingState: EyeState = this._blinkingState;\r\n\r\n    switch (blinkingState) {\r\n      case EyeState.EyeState_Closing:\r\n        t =\r\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n          this._closingSeconds;\r\n\r\n        if (t >= 1.0) {\r\n          t = 1.0;\r\n          this._blinkingState = EyeState.EyeState_Closed;\r\n          this._stateStartTimeSeconds = this._userTimeSeconds;\r\n        }\r\n\r\n        parameterValue = 1.0 - t;\r\n\r\n        break;\r\n      case EyeState.EyeState_Closed:\r\n        t =\r\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n          this._closedSeconds;\r\n\r\n        if (t >= 1.0) {\r\n          this._blinkingState = EyeState.EyeState_Opening;\r\n          this._stateStartTimeSeconds = this._userTimeSeconds;\r\n        }\r\n\r\n        parameterValue = 0.0;\r\n\r\n        break;\r\n      case EyeState.EyeState_Opening:\r\n        t =\r\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n          this._openingSeconds;\r\n\r\n        if (t >= 1.0) {\r\n          t = 1.0;\r\n          this._blinkingState = EyeState.EyeState_Interval;\r\n          this._nextBlinkingTime = this.determinNextBlinkingTiming();\r\n        }\r\n\r\n        parameterValue = t;\r\n\r\n        break;\r\n      case EyeState.EyeState_Interval:\r\n        if (this._nextBlinkingTime < this._userTimeSeconds) {\r\n          this._blinkingState = EyeState.EyeState_Closing;\r\n          this._stateStartTimeSeconds = this._userTimeSeconds;\r\n        }\r\n\r\n        parameterValue = 1.0;\r\n\r\n        break;\r\n      case EyeState.EyeState_First:\r\n      default:\r\n        this._blinkingState = EyeState.EyeState_Interval;\r\n        this._nextBlinkingTime = this.determinNextBlinkingTiming();\r\n\r\n        parameterValue = 1.0;\r\n        break;\r\n    }\r\n\r\n    if (!CubismEyeBlink.CloseIfZero) {\r\n      parameterValue = -parameterValue;\r\n    }\r\n\r\n    for (let i = 0; i < this._parameterIds.getSize(); ++i) {\r\n      model.setParameterValueById(this._parameterIds.at(i), parameterValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 건설자\r\n   * @param modelSetting 모델 설정 정보\r\n   */\r\n  public constructor(modelSetting: ICubismModelSetting) {\r\n    this._blinkingState = EyeState.EyeState_First;\r\n    this._nextBlinkingTime = 0.0;\r\n    this._stateStartTimeSeconds = 0.0;\r\n    this._blinkingIntervalSeconds = 4.0;\r\n    this._closingSeconds = 0.1;\r\n    this._closedSeconds = 0.05;\r\n    this._openingSeconds = 0.15;\r\n    this._userTimeSeconds = 0.0;\r\n    this._parameterIds = new csmVector<CubismIdHandle>();\r\n\r\n    if (modelSetting == null) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {\r\n      this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 다음 깜박임 타이밍의 결정\r\n   *\r\n   * @return 次のまばたきを行う時刻[秒]\r\n   */\r\n  public determinNextBlinkingTiming(): number {\r\n    const r: number = Math.random();\r\n    return (\r\n      this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0)\r\n    );\r\n  }\r\n\r\n  _blinkingState: number; // 현재 상태\r\n  _parameterIds: csmVector<CubismIdHandle>; // 작동 할 매개 변수 목록\r\n  _nextBlinkingTime: number; // 다음 깜박이 시간[秒]\r\n  _stateStartTimeSeconds: number; // 현재 상태가 시작된 시간[秒]\r\n  _blinkingIntervalSeconds: number; // 스파크 간격[秒]\r\n  _closingSeconds: number; // 눈꺼풀을 닫는 데 필요한 시간[秒]\r\n  _closedSeconds: number; // 작업이 눈꺼풀을 닫는 데 필요한 시간[秒]\r\n  _openingSeconds: number; // 눈꺼풀을 여는 데 필요한 시간이 필요합니다[秒]\r\n  _userTimeSeconds: number; // 델타 시간 통합 값[秒]\r\n\r\n  /**\r\n   ID로 지정된 눈의 파라미터가, 0일 때 닫는다면 true , 1일 때 닫는다면 false .\r\n   */\r\n  static readonly CloseIfZero: boolean = true;\r\n}\r\n\r\n/**\r\n * 깜박임 상태\r\n *\r\n * 깜박임 상태를 나타내는 Emula\r\n */\r\nexport enum EyeState {\r\n  EyeState_First = 0, // 초기 상태\r\n  EyeState_Interval, // 깜박이지 않았습니다\r\n  EyeState_Closing, // 눈꺼풀 한가운데의 상태가 닫히고 있습니다\r\n  EyeState_Closed, // 눈꺼풀이 닫힙니다\r\n  EyeState_Opening // 눈꺼풀 가운데의 상태가 열립니다\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismeyeblink';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismEyeBlink = $.CubismEyeBlink;\r\n  export type CubismEyeBlink = $.CubismEyeBlink;\r\n  export const EyeState = $.EyeState;\r\n  export type EyeState = $.EyeState;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmVector, iterator } from '../type/csmvector';\r\nimport { CubismJson, Value } from '../utils/cubismjson';\r\n\r\nconst Epsilon = 0.001;\r\nconst DefaultFadeInSeconds = 0.5;\r\n\r\n// Pose.jsonのタグ\r\nconst FadeIn = 'FadeInTime';\r\nconst Link = 'Link';\r\nconst Groups = 'Groups';\r\nconst Id = 'Id';\r\n\r\n/**\r\n * パーツの不透明度の設定\r\n *\r\n * パーツの不透明度の管理と設定を行う。\r\n */\r\nexport class CubismPose {\r\n  /**\r\n   * 인스턴스 생성\r\n   * @param pose3json pose3.jsonのデータ\r\n   * @param size pose3.jsonのデータのサイズ[byte]\r\n   * @return 作成されたインスタンス\r\n   */\r\n  public static create(pose3json: ArrayBuffer, size: number): CubismPose {\r\n    const json: CubismJson = CubismJson.create(pose3json, size);\r\n    if (!json) {\r\n      return null;\r\n    }\r\n\r\n    const ret: CubismPose = new CubismPose();\r\n    const root: Value = json.getRoot();\r\n\r\n    // 페이드 시간 지정\r\n    if (!root.getValueByString(FadeIn).isNull()) {\r\n      ret._fadeTimeSeconds = root\r\n        .getValueByString(FadeIn)\r\n        .toFloat(DefaultFadeInSeconds);\r\n\r\n      if (ret._fadeTimeSeconds <= 0.0) {\r\n        ret._fadeTimeSeconds = DefaultFadeInSeconds;\r\n      }\r\n    }\r\n\r\n    // 파츠 그룹\r\n    const poseListInfo: Value = root.getValueByString(Groups);\r\n    const poseCount: number = poseListInfo.getSize();\r\n\r\n    for (let poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\r\n      const idListInfo: Value = poseListInfo.getValueByIndex(poseIndex);\r\n      const idCount: number = idListInfo.getSize();\r\n      let groupCount = 0;\r\n\r\n      for (let groupIndex = 0; groupIndex < idCount; ++groupIndex) {\r\n        const partInfo: Value = idListInfo.getValueByIndex(groupIndex);\r\n        const partData: PartData = new PartData();\r\n        const parameterId: CubismIdHandle =\r\n          CubismFramework.getIdManager().getId(\r\n            partInfo.getValueByString(Id).getRawString()\r\n          );\r\n\r\n        partData.partId = parameterId;\r\n\r\n        // 연결할 파츠 세트\r\n        if (!partInfo.getValueByString(Link).isNull()) {\r\n          const linkListInfo: Value = partInfo.getValueByString(Link);\r\n          const linkCount: number = linkListInfo.getSize();\r\n\r\n          for (let linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\r\n            const linkPart: PartData = new PartData();\r\n            const linkId: CubismIdHandle = CubismFramework.getIdManager().getId(\r\n              linkListInfo.getValueByIndex(linkIndex).getString()\r\n            );\r\n\r\n            linkPart.partId = linkId;\r\n\r\n            partData.link.pushBack(linkPart);\r\n          }\r\n        }\r\n\r\n        ret._partGroups.pushBack(partData.clone());\r\n\r\n        ++groupCount;\r\n      }\r\n\r\n      ret._partGroupCounts.pushBack(groupCount);\r\n    }\r\n\r\n    CubismJson.delete(json);\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * 인스턴스 파기\r\n   * @param pose 対象のCubismPose\r\n   */\r\n  public static delete(pose: CubismPose): void {\r\n    if (pose != null) {\r\n      pose = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 모델 매개 변수를 업데이트합니다\r\n   * @param model 対象のモデル\r\n   * @param deltaTimeSeconds デルタ時間[秒]\r\n   */\r\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\r\n    // 前回のモデルと同じでない場合は初期化が必要\r\n    if (model != this._lastModel) {\r\n      // パラメータインデックスの初期化\r\n      this.reset(model);\r\n    }\r\n\r\n    this._lastModel = model;\r\n\r\n    // 설정에서 시간을 변경하면 경과 시간이 음수 일 수 있으므로 경과 시간에 해당합니다.\r\n    if (deltaTimeSeconds < 0.0) {\r\n      deltaTimeSeconds = 0.0;\r\n    }\r\n\r\n    let beginIndex = 0;\r\n\r\n    for (let i = 0; i < this._partGroupCounts.getSize(); i++) {\r\n      const partGroupCount: number = this._partGroupCounts.at(i);\r\n\r\n      this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\r\n\r\n      beginIndex += partGroupCount;\r\n    }\r\n\r\n    this.copyPartOpacities(model);\r\n  }\r\n\r\n  /**\r\n   * 表示を初期化\r\n   * @param model 対象のモデル\r\n   * @note 不透明度の初期値が0でないパラメータは、不透明度を１に設定する\r\n   */\r\n  public reset(model: CubismModel): void {\r\n    let beginIndex = 0;\r\n\r\n    for (let i = 0; i < this._partGroupCounts.getSize(); ++i) {\r\n      const groupCount: number = this._partGroupCounts.at(i);\r\n\r\n      for (let j: number = beginIndex; j < beginIndex + groupCount; ++j) {\r\n        this._partGroups.at(j).initialize(model);\r\n\r\n        const partsIndex: number = this._partGroups.at(j).partIndex;\r\n        const paramIndex: number = this._partGroups.at(j).parameterIndex;\r\n\r\n        if (partsIndex < 0) {\r\n          continue;\r\n        }\r\n\r\n        model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);\r\n        model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);\r\n\r\n        for (let k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {\r\n          this._partGroups.at(j).link.at(k).initialize(model);\r\n        }\r\n      }\r\n\r\n      beginIndex += groupCount;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パーツの不透明度をコピー\r\n   *\r\n   * @param model 対象のモデル\r\n   */\r\n  public copyPartOpacities(model: CubismModel): void {\r\n    for (\r\n      let groupIndex = 0;\r\n      groupIndex < this._partGroups.getSize();\r\n      ++groupIndex\r\n    ) {\r\n      const partData: PartData = this._partGroups.at(groupIndex);\r\n\r\n      if (partData.link.getSize() == 0) {\r\n        continue; // 連動するパラメータはない\r\n      }\r\n\r\n      const partIndex: number = this._partGroups.at(groupIndex).partIndex;\r\n      const opacity: number = model.getPartOpacityByIndex(partIndex);\r\n\r\n      for (\r\n        let linkIndex = 0;\r\n        linkIndex < partData.link.getSize();\r\n        ++linkIndex\r\n      ) {\r\n        const linkPart: PartData = partData.link.at(linkIndex);\r\n        const linkPartIndex: number = linkPart.partIndex;\r\n\r\n        if (linkPartIndex < 0) {\r\n          continue;\r\n        }\r\n\r\n        model.setPartOpacityByIndex(linkPartIndex, opacity);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パーツのフェード操作を行う。\r\n   * @param model 対象のモデル\r\n   * @param deltaTimeSeconds デルタ時間[秒]\r\n   * @param beginIndex フェード操作を行うパーツグループの先頭インデックス\r\n   * @param partGroupCount フェード操作を行うパーツグループの個数\r\n   */\r\n  public doFade(\r\n    model: CubismModel,\r\n    deltaTimeSeconds: number,\r\n    beginIndex: number,\r\n    partGroupCount: number\r\n  ): void {\r\n    let visiblePartIndex = -1;\r\n    let newOpacity = 1.0;\r\n\r\n    const phi = 0.5;\r\n    const backOpacityThreshold = 0.15;\r\n\r\n    // 現在、表示状態になっているパーツを取得\r\n    for (let i: number = beginIndex; i < beginIndex + partGroupCount; ++i) {\r\n      const partIndex: number = this._partGroups.at(i).partIndex;\r\n      const paramIndex: number = this._partGroups.at(i).parameterIndex;\r\n\r\n      if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\r\n        if (visiblePartIndex >= 0) {\r\n          break;\r\n        }\r\n\r\n        visiblePartIndex = i;\r\n        newOpacity = model.getPartOpacityByIndex(partIndex);\r\n\r\n        // 新しい不透明度を計算\r\n        newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\r\n\r\n        if (newOpacity > 1.0) {\r\n          newOpacity = 1.0;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (visiblePartIndex < 0) {\r\n      visiblePartIndex = 0;\r\n      newOpacity = 1.0;\r\n    }\r\n\r\n    // 表示パーツ、非表示パーツの不透明度を設定する\r\n    for (let i: number = beginIndex; i < beginIndex + partGroupCount; ++i) {\r\n      const partsIndex: number = this._partGroups.at(i).partIndex;\r\n\r\n      // 表示パーツの設定\r\n      if (visiblePartIndex == i) {\r\n        model.setPartOpacityByIndex(partsIndex, newOpacity); // 先に設定\r\n      }\r\n      // 非表示パーツの設定\r\n      else {\r\n        let opacity: number = model.getPartOpacityByIndex(partsIndex);\r\n        let a1: number; // 計算によって求められる不透明度\r\n\r\n        if (newOpacity < phi) {\r\n          a1 = (newOpacity * (phi - 1)) / phi + 1.0; // (0,1),(phi,phi)を通る直線式\r\n        } else {\r\n          a1 = ((1 - newOpacity) * phi) / (1.0 - phi); // (1,0),(phi,phi)を通る直線式\r\n        }\r\n\r\n        // 背景の見える割合を制限する場合\r\n        const backOpacity: number = (1.0 - a1) * (1.0 - newOpacity);\r\n\r\n        if (backOpacity > backOpacityThreshold) {\r\n          a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);\r\n        }\r\n\r\n        if (opacity > a1) {\r\n          opacity = a1; // 計算の不透明度よりも大きければ（濃ければ）不透明度を上げる\r\n        }\r\n\r\n        model.setPartOpacityByIndex(partsIndex, opacity);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._fadeTimeSeconds = DefaultFadeInSeconds;\r\n    this._lastModel = null;\r\n    this._partGroups = new csmVector<PartData>();\r\n    this._partGroupCounts = new csmVector<number>();\r\n  }\r\n\r\n  _partGroups: csmVector<PartData>; // パーツグループ\r\n  _partGroupCounts: csmVector<number>; // それぞれのパーツグループの個数\r\n  _fadeTimeSeconds: number; // フェード時間[秒]\r\n  _lastModel: CubismModel; // 前回操作したモデル\r\n}\r\n\r\n/**\r\n * パーツにまつわるデータを管理\r\n */\r\nexport class PartData {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  constructor(v?: PartData) {\r\n    this.parameterIndex = 0;\r\n    this.partIndex = 0;\r\n    this.link = new csmVector<PartData>();\r\n\r\n    if (v != undefined) {\r\n      this.partId = v.partId;\r\n\r\n      for (\r\n        const ite: iterator<PartData> = v.link.begin();\r\n        ite.notEqual(v.link.end());\r\n        ite.preIncrement()\r\n      ) {\r\n        this.link.pushBack(ite.ptr().clone());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * =演算子のオーバーロード\r\n   */\r\n  public assignment(v: PartData): PartData {\r\n    this.partId = v.partId;\r\n\r\n    for (\r\n      const ite: iterator<PartData> = v.link.begin();\r\n      ite.notEqual(v.link.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      this.link.pushBack(ite.ptr().clone());\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 初期化\r\n   * @param model 初期化に使用するモデル\r\n   */\r\n  public initialize(model: CubismModel): void {\r\n    this.parameterIndex = model.getParameterIndex(this.partId);\r\n    this.partIndex = model.getPartIndex(this.partId);\r\n\r\n    model.setParameterValueByIndex(this.parameterIndex, 1);\r\n  }\r\n\r\n  /**\r\n   * オブジェクトのコピーを生成する\r\n   */\r\n  public clone(): PartData {\r\n    const clonePartData: PartData = new PartData();\r\n\r\n    clonePartData.partId = this.partId;\r\n    clonePartData.parameterIndex = this.parameterIndex;\r\n    clonePartData.partIndex = this.partIndex;\r\n    clonePartData.link = new csmVector<PartData>();\r\n\r\n    for (\r\n      let ite: iterator<PartData> = this.link.begin();\r\n      ite.notEqual(this.link.end());\r\n      ite.increment()\r\n    ) {\r\n      clonePartData.link.pushBack(ite.ptr().clone());\r\n    }\r\n\r\n    return clonePartData;\r\n  }\r\n\r\n  partId: CubismIdHandle; // パーツID\r\n  parameterIndex: number; // パラメータのインデックス\r\n  partIndex: number; // パーツのインデックス\r\n  link: csmVector<PartData>; // 連動するパラメータ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismpose';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismPose = $.CubismPose;\r\n  export type CubismPose = $.CubismPose;\r\n  export const PartData = $.PartData;\r\n  export type PartData = $.PartData;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { csmMap, iterator } from '../type/csmmap';\r\nimport { CubismMatrix44 } from './cubismmatrix44';\r\n\r\n/**\r\n * モデル座標設定用の4x4行列\r\n *\r\n * モデル座標設定用の4x4行列クラス\r\n */\r\nexport class CubismModelMatrix extends CubismMatrix44 {\r\n  /**\r\n   * コンストラクタ\r\n   *\r\n   * @param w 横幅\r\n   * @param h 縦幅\r\n   */\r\n  constructor(w?: number, h?: number) {\r\n    super();\r\n\r\n    this._width = w !== undefined ? w : 0.0;\r\n    this._height = h !== undefined ? h : 0.0;\r\n\r\n    this.setHeight(2.0);\r\n  }\r\n\r\n  /**\r\n   * 横幅を設定\r\n   *\r\n   * @param w 横幅\r\n   */\r\n  public setWidth(w: number): void {\r\n    const scaleX: number = w / this._width;\r\n    const scaleY: number = scaleX;\r\n    this.scale(scaleX, scaleY);\r\n  }\r\n\r\n  /**\r\n   * 縦幅を設定\r\n   * @param h 縦幅\r\n   */\r\n  public setHeight(h: number): void {\r\n    const scaleX: number = h / this._height;\r\n    const scaleY: number = scaleX;\r\n    this.scale(scaleX, scaleY);\r\n  }\r\n\r\n  /**\r\n   * 位置を設定\r\n   *\r\n   * @param x X軸の位置\r\n   * @param y Y軸の位置\r\n   */\r\n  public setPosition(x: number, y: number): void {\r\n    this.translate(x, y);\r\n  }\r\n\r\n  /**\r\n   * 中心位置を設定\r\n   *\r\n   * @param x X軸の中心位置\r\n   * @param y Y軸の中心位置\r\n   *\r\n   * @note widthかheightを設定したあとでないと、拡大率が正しく取得できないためずれる。\r\n   */\r\n  public setCenterPosition(x: number, y: number) {\r\n    this.centerX(x);\r\n    this.centerY(y);\r\n  }\r\n\r\n  /**\r\n   * 上辺の位置を設定する\r\n   *\r\n   * @param y 上辺のY軸位置\r\n   */\r\n  public top(y: number): void {\r\n    this.setY(y);\r\n  }\r\n\r\n  /**\r\n   * 下辺の位置を設定する\r\n   *\r\n   * @param y 下辺のY軸位置\r\n   */\r\n  public bottom(y: number) {\r\n    const h: number = this._height * this.getScaleY();\r\n\r\n    this.translateY(y - h);\r\n  }\r\n\r\n  /**\r\n   * 左辺の位置を設定\r\n   *\r\n   * @param x 左辺のX軸位置\r\n   */\r\n  public left(x: number): void {\r\n    this.setX(x);\r\n  }\r\n\r\n  /**\r\n   * 右辺の位置を設定\r\n   *\r\n   * @param x 右辺のX軸位置\r\n   */\r\n  public right(x: number): void {\r\n    const w = this._width * this.getScaleX();\r\n\r\n    this.translateX(x - w);\r\n  }\r\n\r\n  /**\r\n   * X軸の中心位置を設定\r\n   *\r\n   * @param x X軸の中心位置\r\n   */\r\n  public centerX(x: number): void {\r\n    const w = this._width * this.getScaleX();\r\n\r\n    this.translateX(x - w / 2.0);\r\n  }\r\n\r\n  /**\r\n   * X軸の位置を設定\r\n   *\r\n   * @param x X軸の位置\r\n   */\r\n  public setX(x: number): void {\r\n    this.translateX(x);\r\n  }\r\n\r\n  /**\r\n   * Y軸の中心位置を設定\r\n   *\r\n   * @param y Y軸の中心位置\r\n   */\r\n  public centerY(y: number): void {\r\n    const h: number = this._height * this.getScaleY();\r\n\r\n    this.translateY(y - h / 2.0);\r\n  }\r\n\r\n  /**\r\n   * Y軸の位置を設定する\r\n   *\r\n   * @param y Y軸の位置\r\n   */\r\n  public setY(y: number): void {\r\n    this.translateY(y);\r\n  }\r\n\r\n  /**\r\n   * レイアウト情報から位置を設定\r\n   *\r\n   * @param layout レイアウト情報\r\n   */\r\n  public setupFromLayout(layout: csmMap<string, number>): void {\r\n    const keyWidth = 'width';\r\n    const keyHeight = 'height';\r\n    const keyX = 'x';\r\n    const keyY = 'y';\r\n    const keyCenterX = 'center_x';\r\n    const keyCenterY = 'center_y';\r\n    const keyTop = 'top';\r\n    const keyBottom = 'bottom';\r\n    const keyLeft = 'left';\r\n    const keyRight = 'right';\r\n\r\n    for (\r\n      const ite: iterator<string, number> = layout.begin();\r\n      ite.notEqual(layout.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      const key: string = ite.ptr().first;\r\n      const value: number = ite.ptr().second;\r\n\r\n      if (key == keyWidth) {\r\n        this.setWidth(value);\r\n      } else if (key == keyHeight) {\r\n        this.setHeight(value);\r\n      }\r\n    }\r\n\r\n    for (\r\n      const ite: iterator<string, number> = layout.begin();\r\n      ite.notEqual(layout.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      const key: string = ite.ptr().first;\r\n      const value: number = ite.ptr().second;\r\n\r\n      if (key == keyX) {\r\n        this.setX(value);\r\n      } else if (key == keyY) {\r\n        this.setY(value);\r\n      } else if (key == keyCenterX) {\r\n        this.centerX(value);\r\n      } else if (key == keyCenterY) {\r\n        this.centerY(value);\r\n      } else if (key == keyTop) {\r\n        this.top(value);\r\n      } else if (key == keyBottom) {\r\n        this.bottom(value);\r\n      } else if (key == keyLeft) {\r\n        this.left(value);\r\n      } else if (key == keyRight) {\r\n        this.right(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _width: number; // 横幅\r\n  private _height: number; // 縦幅\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmodelmatrix';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismModelMatrix = $.CubismModelMatrix;\r\n  export type CubismModelMatrix = $.CubismModelMatrix;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * 2次元ベクトル型\r\n *\r\n * 2次元ベクトル型の機能を提供する。\r\n */\r\nexport class CubismVector2 {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor(\r\n    public x?: number,\r\n    public y?: number\r\n  ) {\r\n    this.x = x == undefined ? 0.0 : x;\r\n\r\n    this.y = y == undefined ? 0.0 : y;\r\n  }\r\n\r\n  /**\r\n   * ベクトルの加算\r\n   *\r\n   * @param vector2 加算するベクトル値\r\n   * @return 加算結果 ベクトル値\r\n   */\r\n  public add(vector2: CubismVector2): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n    ret.x = this.x + vector2.x;\r\n    ret.y = this.y + vector2.y;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * ベクトルの減算\r\n   *\r\n   * @param vector2 減算するベクトル値\r\n   * @return 減算結果 ベクトル値\r\n   */\r\n  public substract(vector2: CubismVector2): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n    ret.x = this.x - vector2.x;\r\n    ret.y = this.y - vector2.y;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * ベクトルの乗算\r\n   *\r\n   * @param vector2 乗算するベクトル値\r\n   * @return 乗算結果 ベクトル値\r\n   */\r\n  public multiply(vector2: CubismVector2): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n    ret.x = this.x * vector2.x;\r\n    ret.y = this.y * vector2.y;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * ベクトルの乗算(スカラー)\r\n   *\r\n   * @param scalar 乗算するスカラー値\r\n   * @return 乗算結果 ベクトル値\r\n   */\r\n  public multiplyByScaler(scalar: number): CubismVector2 {\r\n    return this.multiply(new CubismVector2(scalar, scalar));\r\n  }\r\n\r\n  /**\r\n   * ベクトルの除算\r\n   *\r\n   * @param vector2 除算するベクトル値\r\n   * @return 除算結果 ベクトル値\r\n   */\r\n  public division(vector2: CubismVector2): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n    ret.x = this.x / vector2.x;\r\n    ret.y = this.y / vector2.y;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * ベクトルの除算(スカラー)\r\n   *\r\n   * @param scalar 除算するスカラー値\r\n   * @return 除算結果 ベクトル値\r\n   */\r\n  public divisionByScalar(scalar: number): CubismVector2 {\r\n    return this.division(new CubismVector2(scalar, scalar));\r\n  }\r\n\r\n  /**\r\n   * ベクトルの長さを取得する\r\n   *\r\n   * @return ベクトルの長さ\r\n   */\r\n  public getLength(): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  /**\r\n   * ベクトルの距離の取得\r\n   *\r\n   * @param a 点\r\n   * @return ベクトルの距離\r\n   */\r\n  public getDistanceWith(a: CubismVector2): number {\r\n    return Math.sqrt(\r\n      (this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * ドット積の計算\r\n   *\r\n   * @param a 値\r\n   * @return 結果\r\n   */\r\n  public dot(a: CubismVector2): number {\r\n    return this.x * a.x + this.y * a.y;\r\n  }\r\n\r\n  /**\r\n   * 正規化の適用\r\n   */\r\n  public normalize(): void {\r\n    const length: number = Math.pow(this.x * this.x + this.y * this.y, 0.5);\r\n\r\n    this.x = this.x / length;\r\n    this.y = this.y / length;\r\n  }\r\n\r\n  /**\r\n   * 等しさの確認（等しいか？）\r\n   *\r\n   * 値が等しいか？\r\n   *\r\n   * @param rhs 確認する値\r\n   * @return true 値は等しい\r\n   * @return false 値は等しくない\r\n   */\r\n  public isEqual(rhs: CubismVector2): boolean {\r\n    return this.x == rhs.x && this.y == rhs.y;\r\n  }\r\n\r\n  /**\r\n   * 等しさの確認（等しくないか？）\r\n   *\r\n   * 値が等しくないか？\r\n   *\r\n   * @param rhs 確認する値\r\n   * @return true 値は等しくない\r\n   * @return false 値は等しい\r\n   */\r\n  public isNotEqual(rhs: CubismVector2): boolean {\r\n    return !this.isEqual(rhs);\r\n  }\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismvector2';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismVector2 = $.CubismVector2;\r\n  export type CubismVector2 = $.CubismVector2;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismVector2 } from './cubismvector2';\r\n\r\n/**\r\n * 数値計算などに使用するユーティリティクラス\r\n */\r\nexport class CubismMath {\r\n  static readonly Epsilon: number = 0.00001;\r\n\r\n  /**\r\n   * 第一引数の値を最小値と最大値の範囲に収めた値を返す\r\n   *\r\n   * @param value 収められる値\r\n   * @param min   範囲の最小値\r\n   * @param max   範囲の最大値\r\n   * @return 最小値と最大値の範囲に収めた値\r\n   */\r\n  static range(value: number, min: number, max: number): number {\r\n    if (value < min) {\r\n      value = min;\r\n    } else if (value > max) {\r\n      value = max;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * サイン関数の値を求める\r\n   *\r\n   * @param x 角度値（ラジアン）\r\n   * @return サイン関数sin(x)の値\r\n   */\r\n  static sin(x: number): number {\r\n    return Math.sin(x);\r\n  }\r\n\r\n  /**\r\n   * コサイン関数の値を求める\r\n   *\r\n   * @param x 角度値(ラジアン)\r\n   * @return コサイン関数cos(x)の値\r\n   */\r\n  static cos(x: number): number {\r\n    return Math.cos(x);\r\n  }\r\n\r\n  /**\r\n   * 値の絶対値を求める\r\n   *\r\n   * @param x 絶対値を求める値\r\n   * @return 値の絶対値\r\n   */\r\n  static abs(x: number): number {\r\n    return Math.abs(x);\r\n  }\r\n\r\n  /**\r\n   * 平方根(ルート)を求める\r\n   * @param x -> 平方根を求める値\r\n   * @return 値の平方根\r\n   */\r\n  static sqrt(x: number): number {\r\n    return Math.sqrt(x);\r\n  }\r\n\r\n  /**\r\n   * 立方根を求める\r\n   * @param x -> 立方根を求める値\r\n   * @return 値の立方根\r\n   */\r\n  static cbrt(x: number): number {\r\n    if (x === 0) {\r\n      return x;\r\n    }\r\n\r\n    let cx: number = x;\r\n    const isNegativeNumber: boolean = cx < 0;\r\n\r\n    if (isNegativeNumber) {\r\n      cx = -cx;\r\n    }\r\n\r\n    let ret: number;\r\n    if (cx === Infinity) {\r\n      ret = Infinity;\r\n    } else {\r\n      ret = Math.exp(Math.log(cx) / 3);\r\n      ret = (cx / (ret * ret) + 2 * ret) / 3;\r\n    }\r\n    return isNegativeNumber ? -ret : ret;\r\n  }\r\n\r\n  /**\r\n   * イージング処理されたサインを求める\r\n   * フェードイン・アウト時のイージングに利用できる\r\n   *\r\n   * @param value イージングを行う値\r\n   * @return イージング処理されたサイン値\r\n   */\r\n  static getEasingSine(value: number): number {\r\n    if (value < 0.0) {\r\n      return 0.0;\r\n    } else if (value > 1.0) {\r\n      return 1.0;\r\n    }\r\n\r\n    return 0.5 - 0.5 * this.cos(value * Math.PI);\r\n  }\r\n\r\n  /**\r\n   * 大きい方の値を返す\r\n   *\r\n   * @param left 左辺の値\r\n   * @param right 右辺の値\r\n   * @return 大きい方の値\r\n   */\r\n  static max(left: number, right: number): number {\r\n    return left > right ? left : right;\r\n  }\r\n\r\n  /**\r\n   * 小さい方の値を返す\r\n   *\r\n   * @param left  左辺の値\r\n   * @param right 右辺の値\r\n   * @return 小さい方の値\r\n   */\r\n  static min(left: number, right: number): number {\r\n    return left > right ? right : left;\r\n  }\r\n\r\n  /**\r\n   * 角度値をラジアン値に変換する\r\n   *\r\n   * @param degrees   角度値\r\n   * @return 角度値から変換したラジアン値\r\n   */\r\n  static degreesToRadian(degrees: number): number {\r\n    return (degrees / 180.0) * Math.PI;\r\n  }\r\n\r\n  /**\r\n   * ラジアン値を角度値に変換する\r\n   *\r\n   * @param radian    ラジアン値\r\n   * @return ラジアン値から変換した角度値\r\n   */\r\n  static radianToDegrees(radian: number): number {\r\n    return (radian * 180.0) / Math.PI;\r\n  }\r\n\r\n  /**\r\n   * ２つのベクトルからラジアン値を求める\r\n   *\r\n   * @param from  始点ベクトル\r\n   * @param to    終点ベクトル\r\n   * @return ラジアン値から求めた方向ベクトル\r\n   */\r\n  static directionToRadian(from: CubismVector2, to: CubismVector2): number {\r\n    const q1: number = Math.atan2(to.y, to.x);\r\n    const q2: number = Math.atan2(from.y, from.x);\r\n\r\n    let ret: number = q1 - q2;\r\n\r\n    while (ret < -Math.PI) {\r\n      ret += Math.PI * 2.0;\r\n    }\r\n\r\n    while (ret > Math.PI) {\r\n      ret -= Math.PI * 2.0;\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * ２つのベクトルから角度値を求める\r\n   *\r\n   * @param from  始点ベクトル\r\n   * @param to    終点ベクトル\r\n   * @return 角度値から求めた方向ベクトル\r\n   */\r\n  static directionToDegrees(from: CubismVector2, to: CubismVector2): number {\r\n    const radian: number = this.directionToRadian(from, to);\r\n    let degree: number = this.radianToDegrees(radian);\r\n\r\n    if (to.x - from.x > 0.0) {\r\n      degree = -degree;\r\n    }\r\n\r\n    return degree;\r\n  }\r\n\r\n  /**\r\n   * ラジアン値を方向ベクトルに変換する。\r\n   *\r\n   * @param totalAngle    ラジアン値\r\n   * @return ラジアン値から変換した方向ベクトル\r\n   */\r\n\r\n  static radianToDirection(totalAngle: number): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2();\r\n\r\n    ret.x = this.sin(totalAngle);\r\n    ret.y = this.cos(totalAngle);\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * 三次方程式の三次項の係数が0になったときに補欠的に二次方程式の解をもとめる。\r\n   * a * x^2 + b * x + c = 0\r\n   *\r\n   * @param   a -> 二次項の係数値\r\n   * @param   b -> 一次項の係数値\r\n   * @param   c -> 定数項の値\r\n   * @return  二次方程式の解\r\n   */\r\n  static quadraticEquation(a: number, b: number, c: number): number {\r\n    if (this.abs(a) < CubismMath.Epsilon) {\r\n      if (this.abs(b) < CubismMath.Epsilon) {\r\n        return -c;\r\n      }\r\n      return -c / b;\r\n    }\r\n\r\n    return -(b + this.sqrt(b * b - 4.0 * a * c)) / (2.0 * a);\r\n  }\r\n\r\n  /**\r\n   * カルダノの公式によってベジェのt値に該当する３次方程式の解を求める。\r\n   * 重解になったときには0.0～1.0の値になる解を返す。\r\n   *\r\n   * a * x^3 + b * x^2 + c * x + d = 0\r\n   *\r\n   * @param   a -> 三次項の係数値\r\n   * @param   b -> 二次項の係数値\r\n   * @param   c -> 一次項の係数値\r\n   * @param   d -> 定数項の値\r\n   * @return  0.0～1.0の間にある解\r\n   */\r\n  static cardanoAlgorithmForBezier(\r\n    a: number,\r\n    b: number,\r\n    c: number,\r\n    d: number\r\n  ): number {\r\n    if (this.sqrt(a) < CubismMath.Epsilon) {\r\n      return this.range(this.quadraticEquation(b, c, d), 0.0, 1.0);\r\n    }\r\n\r\n    const ba: number = b / a;\r\n    const ca: number = c / a;\r\n    const da: number = d / a;\r\n\r\n    const p: number = (3.0 * ca - ba * ba) / 3.0;\r\n    const p3: number = p / 3.0;\r\n    const q: number = (2.0 * ba * ba * ba - 9.0 * ba * ca + 27.0 * da) / 27.0;\r\n    const q2: number = q / 2.0;\r\n    const discriminant: number = q2 * q2 + p3 * p3 * p3;\r\n\r\n    const center = 0.5;\r\n    const threshold: number = center + 0.01;\r\n\r\n    if (discriminant < 0.0) {\r\n      const mp3: number = -p / 3.0;\r\n      const mp33: number = mp3 * mp3 * mp3;\r\n      const r: number = this.sqrt(mp33);\r\n      const t: number = -q / (2.0 * r);\r\n      const cosphi: number = this.range(t, -1.0, 1.0);\r\n      const phi: number = Math.acos(cosphi);\r\n      const crtr: number = this.cbrt(r);\r\n      const t1: number = 2.0 * crtr;\r\n\r\n      const root1: number = t1 * this.cos(phi / 3.0) - ba / 3.0;\r\n      if (this.abs(root1 - center) < threshold) {\r\n        return this.range(root1, 0.0, 1.0);\r\n      }\r\n\r\n      const root2: number =\r\n        t1 * this.cos((phi + 2.0 * Math.PI) / 3.0) - ba / 3.0;\r\n      if (this.abs(root2 - center) < threshold) {\r\n        return this.range(root2, 0.0, 1.0);\r\n      }\r\n\r\n      const root3: number =\r\n        t1 * this.cos((phi + 4.0 * Math.PI) / 3.0) - ba / 3.0;\r\n      return this.range(root3, 0.0, 1.0);\r\n    }\r\n\r\n    if (discriminant == 0.0) {\r\n      let u1: number;\r\n      if (q2 < 0.0) {\r\n        u1 = this.cbrt(-q2);\r\n      } else {\r\n        u1 = -this.cbrt(q2);\r\n      }\r\n\r\n      const root1: number = 2.0 * u1 - ba / 3.0;\r\n      if (this.abs(root1 - center) < threshold) {\r\n        return this.range(root1, 0.0, 1.0);\r\n      }\r\n\r\n      const root2: number = -u1 - ba / 3.0;\r\n      return this.range(root2, 0.0, 1.0);\r\n    }\r\n\r\n    const sd: number = this.sqrt(discriminant);\r\n    const u1: number = this.cbrt(sd - q2);\r\n    const v1: number = this.cbrt(sd + q2);\r\n    const root1: number = u1 - v1 - ba / 3.0;\r\n    return this.range(root1, 0.0, 1.0);\r\n  }\r\n\r\n  /**\r\n   * 浮動小数点の余りを求める。\r\n   *\r\n   * @param dividend 被除数（割られる値）\r\n   * @param divisor 除数（割る値）\r\n   * @returns 余り\r\n   */\r\n  static mod(dividend: number, divisor: number): number {\r\n    if (\r\n      !isFinite(dividend) ||\r\n      divisor === 0 ||\r\n      isNaN(dividend) ||\r\n      isNaN(divisor)\r\n    ) {\r\n      console.warn(\r\n        `divided: ${dividend}, divisor: ${divisor} mod() returns 'NaN'.`\r\n      );\r\n      return NaN;\r\n    }\r\n\r\n    // 絶対値に変換する。\r\n    const absDividend = Math.abs(dividend);\r\n    const absDivisor = Math.abs(divisor);\r\n\r\n    // 絶対値で割り算する。\r\n    let result =\r\n      absDividend - Math.floor(absDividend / absDivisor) * absDivisor;\r\n\r\n    // 符号を被除数のものに指定する。\r\n    result *= Math.sign(dividend);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  private constructor() {}\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmath';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMath = $.CubismMath;\r\n  export type CubismMath = $.CubismMath;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMath } from './cubismmath';\r\n\r\nconst FrameRate = 30;\r\nconst Epsilon = 0.01;\r\n\r\n/**\r\n * 얼굴 방향을위한 제어 기능\r\n *\r\n * 얼굴을 향한 제어 기능을 제공하는 클래스.\r\n */\r\nexport class CubismTargetPoint {\r\n  /**\r\n   * 건설자\r\n   */\r\n  public constructor() {\r\n    this._faceTargetX = 0.0;\r\n    this._faceTargetY = 0.0;\r\n    this._faceX = 0.0;\r\n    this._faceY = 0.0;\r\n    this._faceVX = 0.0;\r\n    this._faceVY = 0.0;\r\n    this._lastTimeSeconds = 0.0;\r\n    this._userTimeSeconds = 0.0;\r\n  }\r\n\r\n  /**\r\n   * 갱신\r\n   */\r\n  public update(deltaTimeSeconds: number): void {\r\n    // 델타 시간을 추가하십시오\r\n    this._userTimeSeconds += deltaTimeSeconds;\r\n\r\n    // 중앙에서 왼쪽과 오른쪽으로 목을 스윙 할 때의 평균 속도는 두 번째 속도입니다.가속 / 감속을 고려하여 최대 속도의 두 배\r\n    //얼굴의 스윙은 중심 (0.0)에서 왼쪽과 오른쪽으로 (+-1.0)이어야합니다.\r\n    const faceParamMaxV: number = 40.0 / 10.0; // 40 분 ~ 7.5 초 (5.3/SC)\r\n    const maxV: number = (faceParamMaxV * 1.0) / FrameRate; // 1 불꽃 주위에 변경 될 수있는 최대 속도\r\n\r\n    if (this._lastTimeSeconds == 0.0) {\r\n      this._lastTimeSeconds = this._userTimeSeconds;\r\n      return;\r\n    }\r\n\r\n    const deltaTimeWeight: number =\r\n      (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;\r\n    this._lastTimeSeconds = this._userTimeSeconds;\r\n\r\n    // 최대 속도에 도달 할 시간\r\n    const timeToMaxSpeed = 0.15;\r\n    const frameToMaxSpeed: number = timeToMaxSpeed * FrameRate; // sec * frame/sec\r\n    const maxA: number = (deltaTimeWeight * maxV) / frameToMaxSpeed; // 1frameあたりの加速度\r\n\r\n    // 조준 방향은 방향 (dx, dy)의 벡터입니다.\r\n    const dx: number = this._faceTargetX - this._faceX;\r\n    const dy: number = this._faceTargetY - this._faceY;\r\n\r\n    if (CubismMath.abs(dx) <= Epsilon && CubismMath.abs(dy) <= Epsilon) {\r\n      return; // 변화가 없습니다\r\n    }\r\n\r\n    // 최대 속도보다 큰 경우 속도를 줄입니다.\r\n    const d: number = CubismMath.sqrt(dx * dx + dy * dy);\r\n\r\n    // 여행 방향의 최대 속도 벡터\r\n    const vx: number = (maxV * dx) / d;\r\n    const vy: number = (maxV * dy) / d;\r\n\r\n    // 현재 속도에서 새로운 속도로 변경 (가속도) (가속도)\r\n    let ax: number = vx - this._faceVX;\r\n    let ay: number = vy - this._faceVY;\r\n\r\n    const a: number = CubismMath.sqrt(ax * ax + ay * ay);\r\n\r\n    // 가속 당시\r\n    if (a < -maxA || a > maxA) {\r\n      ax *= maxA / a;\r\n      ay *= maxA / a;\r\n    }\r\n\r\n    // 원래 속도에 가속도를 추가하고 새로운 속도로 만듭니다.\r\n    this._faceVX += ax;\r\n    this._faceVY += ay;\r\n\r\n    //원하는 방향에 접근 할 때 부드러운 감속 처리\r\n    // 세트 가속에서 멈출 수있는 거리와 속도의 관계로 인해\r\n    // 취할 수있는 최대 속도를 계산하고 그보다 더 많은 속도를 떨어 뜨립니다.\r\n    // * 원래, 인간은 근력으로 힘 (가속)을 조정할 수 있으므로 자유의 정도가 높지만 간단한 가공으로 이루어집니다.\r\n    {\r\n      // 加速度、速度、距離の関係式。\r\n      //            2  6           2               3\r\n      //      sqrt(a  t  + 16 a h t  - 8 a h) - a t\r\n      // v = --------------------------------------\r\n      //                    2\r\n      //                 4 t  - 2\r\n      // (t=1)\r\n      // \t時刻tは、あらかじめ加速度、速度を1/60(フレームレート、単位なし)で\r\n      // \t考えているので、t＝１として消してよい（※未検証）\r\n\r\n      const maxV: number =\r\n        0.5 *\r\n        (CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -\r\n          maxA);\r\n      const curV: number = CubismMath.sqrt(\r\n        this._faceVX * this._faceVX + this._faceVY * this._faceVY\r\n      );\r\n\r\n      if (curV > maxV) {\r\n        // 현재 속도> 최대 속도 동안 최대 속도로 감속\r\n        this._faceVX *= maxV / curV;\r\n        this._faceVY *= maxV / curV;\r\n      }\r\n    }\r\n\r\n    this._faceX += this._faceVX;\r\n    this._faceY += this._faceVY;\r\n  }\r\n\r\n  /**\r\n   * x 축면의 얼굴의 가치를 얻으십시오.\r\n   *\r\n   * @return x 축면의 얼굴의 값 (-1.0 ~ 1.0)\r\n   */\r\n  public getX(): number {\r\n    return this._faceX;\r\n  }\r\n\r\n  /**\r\n   * y 축면의 얼굴의 가치를 얻으십시오.\r\n   *\r\n   * @return y 축 얼굴의 값 (-1.0 ~ 1.0)\r\n   */\r\n  public getY(): number {\r\n    return this._faceY;\r\n  }\r\n\r\n  /**\r\n   * 얼굴 방향의 목표 값을 설정하십시오\r\n   *\r\n   * @param x x 축면의 얼굴의 값 (-1.0 ~ 1.0)\r\n   * @param y y 축 얼굴의 값 (-1.0 ~ 1.0)\r\n   */\r\n  public set(x: number, y: number): void {\r\n    this._faceTargetX = x;\r\n    this._faceTargetY = y;\r\n  }\r\n\r\n  private _faceTargetX: number; // x 얼굴의 대상 값 (이 값에 접근)\r\n  private _faceTargetY: number; // y 얼굴의 얼굴에있는 목표 값 (이 값에 접근)\r\n  private _faceX: number; // 얼굴 방향 X (-1.0 ~ 1.0)\r\n  private _faceY: number; // 안면 방향 Y (-1.0 ~ 1.0)\r\n  private _faceVX: number; //얼굴 방향의 변화 속도 x\r\n  private _faceVY: number; //얼굴 방향 y의 속도 y 변경\r\n  private _lastTimeSeconds: number; // 마지막 실행 시간 [두 번째]\r\n  private _userTimeSeconds: number; // 델타 시간 통합 가치 [두 번째]\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismtargetpoint';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismTargetPoint = $.CubismTargetPoint;\r\n  export type CubismTargetPoint = $.CubismTargetPoint;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMath } from '../math/cubismmath';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmString } from '../type/csmstring';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CSM_ASSERT, CubismDebug } from '../utils/cubismdebug';\r\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\r\n\r\n/** モーション再生終了コールバック関数定義 */\r\nexport type FinishedMotionCallback = (self: ACubismMotion) => void;\r\n\r\n/**\r\n * モーションの抽象基底クラス\r\n *\r\n * モーションの抽象基底クラス。MotionQueueManagerによってモーションの再生を管理する。\r\n */\r\nexport abstract class ACubismMotion {\r\n  /**\r\n   * インスタンスの破棄\r\n   */\r\n  public static delete(motion: ACubismMotion): void {\r\n    motion.release();\r\n    motion = null;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._fadeInSeconds = -1.0;\r\n    this._fadeOutSeconds = -1.0;\r\n    this._weight = 1.0;\r\n    this._offsetSeconds = 0.0; // 再生の開始時刻\r\n    this._firedEventValues = new csmVector<csmString>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    this._weight = 0.0;\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータ\r\n   * @param model 対象のモデル\r\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\r\n   * @param userTimeSeconds デルタ時間の積算値[秒]\r\n   */\r\n  public updateParameters(\r\n    model: CubismModel,\r\n    motionQueueEntry: CubismMotionQueueEntry,\r\n    userTimeSeconds: number\r\n  ): void {\r\n    if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\r\n      return;\r\n    }\r\n\r\n    this.setupMotionQueueEntry(motionQueueEntry, userTimeSeconds);\r\n\r\n    const fadeWeight = this.updateFadeWeight(motionQueueEntry, userTimeSeconds);\r\n\r\n    //---- 全てのパラメータIDをループする ----\r\n    this.doUpdateParameters(\r\n      model,\r\n      userTimeSeconds,\r\n      fadeWeight,\r\n      motionQueueEntry\r\n    );\r\n\r\n    // 後処理\r\n    // 終了時刻を過ぎたら終了フラグを立てる(CubismMotionQueueManager)\r\n    if (\r\n      motionQueueEntry.getEndTime() > 0 &&\r\n      motionQueueEntry.getEndTime() < userTimeSeconds\r\n    ) {\r\n      motionQueueEntry.setIsFinished(true); // 終了\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @brief モデルの再生開始処理\r\n   *\r\n   * モーションの再生を開始するためのセットアップを行う。\r\n   *\r\n   * @param[in]   motionQueueEntry    CubismMotionQueueManagerで管理されているモーション\r\n   * @param[in]   userTimeSeconds     デルタ時間の積算値[秒]\r\n   */\r\n  public setupMotionQueueEntry(\r\n    motionQueueEntry: CubismMotionQueueEntry,\r\n    userTimeSeconds: number\r\n  ) {\r\n    if (motionQueueEntry == null || motionQueueEntry.isStarted()) {\r\n      return;\r\n    }\r\n\r\n    if (!motionQueueEntry.isAvailable()) {\r\n      return;\r\n    }\r\n\r\n    motionQueueEntry.setIsStarted(true);\r\n    motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds); // モーションの開始時刻を記録\r\n    motionQueueEntry.setFadeInStartTime(userTimeSeconds); // フェードインの開始時刻\r\n\r\n    const duration = this.getDuration();\r\n\r\n    if (motionQueueEntry.getEndTime() < 0.0) {\r\n      // 開始していないうちに終了設定している場合がある\r\n      motionQueueEntry.setEndTime(\r\n        duration <= 0.0 ? -1 : motionQueueEntry.getStartTime() + duration\r\n      );\r\n      // duration == -1 の場合はループする\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @brief モデルのウェイト更新\r\n   *\r\n   * モーションのウェイトを更新する。\r\n   *\r\n   * @param[in]   motionQueueEntry    CubismMotionQueueManagerで管理されているモーション\r\n   * @param[in]   userTimeSeconds     デルタ時間の積算値[秒]\r\n   */\r\n  public updateFadeWeight(\r\n    motionQueueEntry: CubismMotionQueueEntry,\r\n    userTimeSeconds: number\r\n  ): number {\r\n    if (motionQueueEntry == null) {\r\n      CubismDebug.print(LogLevel.LogLevel_Error, 'motionQueueEntry is null.');\r\n    }\r\n\r\n    let fadeWeight: number = this._weight; // 現在の値と掛け合わせる割合\r\n\r\n    //---- フェードイン・アウトの処理 ----\r\n    // 単純なサイン関数でイージングする\r\n    const fadeIn: number =\r\n      this._fadeInSeconds == 0.0\r\n        ? 1.0\r\n        : CubismMath.getEasingSine(\r\n            (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n              this._fadeInSeconds\r\n          );\r\n\r\n    const fadeOut: number =\r\n      this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0\r\n        ? 1.0\r\n        : CubismMath.getEasingSine(\r\n            (motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n              this._fadeOutSeconds\r\n          );\r\n\r\n    fadeWeight = fadeWeight * fadeIn * fadeOut;\r\n\r\n    motionQueueEntry.setState(userTimeSeconds, fadeWeight);\r\n\r\n    CSM_ASSERT(0.0 <= fadeWeight && fadeWeight <= 1.0);\r\n\r\n    return fadeWeight;\r\n  }\r\n\r\n  /**\r\n   * フェードインの時間を設定する\r\n   * @param fadeInSeconds フェードインにかかる時間[秒]\r\n   */\r\n  public setFadeInTime(fadeInSeconds: number): void {\r\n    this._fadeInSeconds = fadeInSeconds;\r\n  }\r\n\r\n  /**\r\n   * フェードアウトの時間を設定する\r\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\r\n   */\r\n  public setFadeOutTime(fadeOutSeconds: number): void {\r\n    this._fadeOutSeconds = fadeOutSeconds;\r\n  }\r\n\r\n  /**\r\n   * フェードアウトにかかる時間の取得\r\n   * @return フェードアウトにかかる時間[秒]\r\n   */\r\n  public getFadeOutTime(): number {\r\n    return this._fadeOutSeconds;\r\n  }\r\n\r\n  /**\r\n   * フェードインにかかる時間の取得\r\n   * @return フェードインにかかる時間[秒]\r\n   */\r\n  public getFadeInTime(): number {\r\n    return this._fadeInSeconds;\r\n  }\r\n\r\n  /**\r\n   * モーション適用の重みの設定\r\n   * @param weight 重み（0.0 - 1.0）\r\n   */\r\n  public setWeight(weight: number): void {\r\n    this._weight = weight;\r\n  }\r\n\r\n  /**\r\n   * モーション適用の重みの取得\r\n   * @return 重み（0.0 - 1.0）\r\n   */\r\n  public getWeight(): number {\r\n    return this._weight;\r\n  }\r\n\r\n  /**\r\n   * モーションの長さの取得\r\n   * @return モーションの長さ[秒]\r\n   *\r\n   * @note ループの時は「-1」。\r\n   *       ループでない場合は、オーバーライドする。\r\n   *       正の値の時は取得される時間で終了する。\r\n   *       「-1」の時は外部から停止命令がない限り終わらない処理となる。\r\n   */\r\n  public getDuration(): number {\r\n    return -1.0;\r\n  }\r\n\r\n  /**\r\n   * モーションのループ1回分の長さの取得\r\n   * @return モーションのループ一回分の長さ[秒]\r\n   *\r\n   * @note ループしない場合は、getDuration()と同じ値を返す\r\n   *       ループ一回分の長さが定義できない場合(プログラム的に動き続けるサブクラスなど)の場合は「-1」を返す\r\n   */\r\n  public getLoopDuration(): number {\r\n    return -1.0;\r\n  }\r\n\r\n  /**\r\n   * モーション再生の開始時刻の設定\r\n   * @param offsetSeconds モーション再生の開始時刻[秒]\r\n   */\r\n  public setOffsetTime(offsetSeconds: number): void {\r\n    this._offsetSeconds = offsetSeconds;\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータ更新\r\n   *\r\n   * イベント発火のチェック。\r\n   * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\r\n   *\r\n   * @param beforeCheckTimeSeconds 前回のイベントチェック時間[秒]\r\n   * @param motionTimeSeconds 今回の再生時間[秒]\r\n   */\r\n  public getFiredEvent(\r\n    beforeCheckTimeSeconds: number,\r\n    motionTimeSeconds: number\r\n  ): csmVector<csmString> {\r\n    return this._firedEventValues;\r\n  }\r\n\r\n  /**\r\n   * モーションを更新して、モデルにパラメータ値を反映する\r\n   * @param model 対象のモデル\r\n   * @param userTimeSeconds デルタ時間の積算値[秒]\r\n   * @param weight モーションの重み\r\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\r\n   * @return true モデルへパラメータ値の反映あり\r\n   * @return false モデルへのパラメータ値の反映なし（モーションの変化なし）\r\n   */\r\n  public abstract doUpdateParameters(\r\n    model: CubismModel,\r\n    userTimeSeconds: number,\r\n    weight: number,\r\n    motionQueueEntry: CubismMotionQueueEntry\r\n  ): void;\r\n\r\n  /**\r\n   * モーション再生終了コールバックの登録\r\n   *\r\n   * モーション再生終了コールバックを登録する。\r\n   * isFinishedフラグを設定するタイミングで呼び出される。\r\n   * 以下の状態の際には呼び出されない:\r\n   *   1. 再生中のモーションが「ループ」として設定されているとき\r\n   *   2. コールバックが登録されていない時\r\n   *\r\n   * @param onFinishedMotionHandler モーション再生終了コールバック関数\r\n   */\r\n  public setFinishedMotionHandler = (\r\n    onFinishedMotionHandler: FinishedMotionCallback\r\n  ) => (this._onFinishedMotion = onFinishedMotionHandler);\r\n\r\n  /**\r\n   * モーション再生終了コールバックの取得\r\n   *\r\n   * モーション再生終了コールバックを取得する。\r\n   *\r\n   * @return 登録されているモーション再生終了コールバック関数\r\n   */\r\n  public getFinishedMotionHandler = () => this._onFinishedMotion;\r\n\r\n  /**\r\n   * 透明度のカーブが存在するかどうかを確認する\r\n   *\r\n   * @returns true  -> キーが存在する\r\n   *          false -> キーが存在しない\r\n   */\r\n  public isExistModelOpacity(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 透明度のカーブのインデックスを返す\r\n   *\r\n   * @returns success:透明度のカーブのインデックス\r\n   */\r\n  public getModelOpacityIndex(): number {\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * 透明度のIdを返す\r\n   *\r\n   * @param index モーションカーブのインデックス\r\n   * @returns success:透明度のId\r\n   */\r\n  public getModelOpacityId(index: number): CubismIdHandle {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 指定時間の透明度の値を返す\r\n   *\r\n   * @returns success:モーションの現在時間におけるOpacityの値\r\n   *\r\n   * @note  更新後の値を取るにはUpdateParameters() の後に呼び出す。\r\n   */\r\n  protected getModelOpacityValue(): number {\r\n    return 1.0;\r\n  }\r\n\r\n  public _fadeInSeconds: number; // フェードインにかかる時間[秒]\r\n  public _fadeOutSeconds: number; // フェードアウトにかかる時間[秒]\r\n  public _weight: number; // モーションの重み\r\n  public _offsetSeconds: number; // モーション再生の開始時間[秒]\r\n\r\n  public _firedEventValues: csmVector<csmString>;\r\n\r\n  // モーション再生終了コールバック関数\r\n  public _onFinishedMotion?: FinishedMotionCallback;\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './acubismmotion';\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { LogLevel } from '../live2dcubismframework';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const ACubismMotion = $.ACubismMotion;\r\n  export type ACubismMotion = $.ACubismMotion;\r\n  export type FinishedMotionCallback = $.FinishedMotionCallback;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CubismJson, Value } from '../utils/cubismjson';\r\nimport { ACubismMotion } from './acubismmotion';\r\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\r\n\r\n// exp3.jsonのキーとデフォルト\r\nconst ExpressionKeyFadeIn = 'FadeInTime';\r\nconst ExpressionKeyFadeOut = 'FadeOutTime';\r\nconst ExpressionKeyParameters = 'Parameters';\r\nconst ExpressionKeyId = 'Id';\r\nconst ExpressionKeyValue = 'Value';\r\nconst ExpressionKeyBlend = 'Blend';\r\nconst BlendValueAdd = 'Add';\r\nconst BlendValueMultiply = 'Multiply';\r\nconst BlendValueOverwrite = 'Overwrite';\r\nconst DefaultFadeTime = 1.0;\r\n\r\n/**\r\n * 表情のモーション\r\n *\r\n * 表情のモーションクラス。\r\n */\r\nexport class CubismExpressionMotion extends ACubismMotion {\r\n  static readonly DefaultAdditiveValue = 0.0; // 加算適用の初期値\r\n  static readonly DefaultMultiplyValue = 1.0; // 乗算適用の初期値\r\n\r\n  /**\r\n   * インスタンスを作成する。\r\n   * @param buffer expファイルが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   * @return 作成されたインスタンス\r\n   */\r\n  public static create(\r\n    buffer: ArrayBuffer,\r\n    size: number\r\n  ): CubismExpressionMotion {\r\n    const expression: CubismExpressionMotion = new CubismExpressionMotion();\r\n    expression.parse(buffer, size);\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータの更新の実行\r\n   * @param model 対象のモデル\r\n   * @param userTimeSeconds デルタ時間の積算値[秒]\r\n   * @param weight モーションの重み\r\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\r\n   */\r\n  public doUpdateParameters(\r\n    model: CubismModel,\r\n    userTimeSeconds: number,\r\n    weight: number,\r\n    motionQueueEntry: CubismMotionQueueEntry\r\n  ): void {\r\n    for (let i = 0; i < this._parameters.getSize(); ++i) {\r\n      const parameter: ExpressionParameter = this._parameters.at(i);\r\n\r\n      switch (parameter.blendType) {\r\n        case ExpressionBlendType.Additive: {\r\n          model.addParameterValueById(\r\n            parameter.parameterId,\r\n            parameter.value,\r\n            weight\r\n          );\r\n          break;\r\n        }\r\n        case ExpressionBlendType.Multiply: {\r\n          model.multiplyParameterValueById(\r\n            parameter.parameterId,\r\n            parameter.value,\r\n            weight\r\n          );\r\n          break;\r\n        }\r\n        case ExpressionBlendType.Overwrite: {\r\n          model.setParameterValueById(\r\n            parameter.parameterId,\r\n            parameter.value,\r\n            weight\r\n          );\r\n          break;\r\n        }\r\n        default:\r\n          // 仕様にない値を設定した時はすでに加算モードになっている\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @brief 식별 모델 매개 변수 계산\r\n   *\r\n   * 모델의 표현에 대한 매개 변수를 계산합니다.\r\n   *\r\n   * @param[in]   model                        대상 모델\r\n   * @param[in]   userTimeSeconds              델타 시간 통합 값[秒]\r\n   * @param[in]   motionQueueEntry             CubismMotionQueueManager모션 관리\r\n   * @param[in]   expressionParameterValues    모델에 적용되는 각 매개 변수의 값\r\n   * @param[in]   expressionIndex              표현 인덱스\r\n   * @param[in]   fadeWeight                   표현 중량\r\n   */\r\n  public calculateExpressionParameters(\r\n    model: CubismModel,\r\n    userTimeSeconds: number,\r\n    motionQueueEntry: CubismMotionQueueEntry,\r\n    expressionParameterValues: csmVector<ExpressionParameterValue>,\r\n    expressionIndex: number,\r\n    fadeWeight: number\r\n  ) {\r\n    if (motionQueueEntry == null || expressionParameterValues == null) {\r\n      return;\r\n    }\r\n\r\n    if (!motionQueueEntry.isAvailable()) {\r\n      return;\r\n    }\r\n\r\n    // CubismExpressionMotion._fadeWeight 폐지 될 것입니다.\r\n    // 처리는 호환성으로 인해 유지되지만 실제로 사용되지는 않습니다.\r\n    this._fadeWeight = this.updateFadeWeight(motionQueueEntry, userTimeSeconds);\r\n\r\n    // 모델에 적용되는 값을 계산하십시오\r\n    for (let i = 0; i < expressionParameterValues.getSize(); ++i) {\r\n      const expressionParameterValue = expressionParameterValues.at(i);\r\n\r\n      if (expressionParameterValue.parameterId == null) {\r\n        continue;\r\n      }\r\n\r\n      const currentParameterValue = (expressionParameterValue.overwriteValue =\r\n        model.getParameterValueById(expressionParameterValue.parameterId));\r\n\r\n      const expressionParameters = this.getExpressionParameters();\r\n      let parameterIndex = -1;\r\n      for (let j = 0; j < expressionParameters.getSize(); ++j) {\r\n        if (\r\n          expressionParameterValue.parameterId !=\r\n          expressionParameters.at(j).parameterId\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        parameterIndex = j;\r\n\r\n        break;\r\n      }\r\n\r\n      // 재생 중에 표현식으로 언급되지 않은 매개 변수는 초기 값을 적용합니다.\r\n      if (parameterIndex < 0) {\r\n        if (expressionIndex == 0) {\r\n          expressionParameterValue.additiveValue =\r\n            CubismExpressionMotion.DefaultAdditiveValue;\r\n          expressionParameterValue.multiplyValue =\r\n            CubismExpressionMotion.DefaultMultiplyValue;\r\n          expressionParameterValue.overwriteValue = currentParameterValue;\r\n        } else {\r\n          expressionParameterValue.additiveValue = this.calculateValue(\r\n            expressionParameterValue.additiveValue,\r\n            CubismExpressionMotion.DefaultAdditiveValue,\r\n            fadeWeight\r\n          );\r\n          expressionParameterValue.multiplyValue = this.calculateValue(\r\n            expressionParameterValue.multiplyValue,\r\n            CubismExpressionMotion.DefaultMultiplyValue,\r\n            fadeWeight\r\n          );\r\n          expressionParameterValue.overwriteValue = this.calculateValue(\r\n            expressionParameterValue.overwriteValue,\r\n            currentParameterValue,\r\n            fadeWeight\r\n          );\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // 値を計算\r\n      const value = expressionParameters.at(parameterIndex).value;\r\n      let newAdditiveValue, newMultiplyValue, newOverwriteValue;\r\n      switch (expressionParameters.at(parameterIndex).blendType) {\r\n        case ExpressionBlendType.Additive:\r\n          newAdditiveValue = value;\r\n          newMultiplyValue = CubismExpressionMotion.DefaultMultiplyValue;\r\n          newOverwriteValue = currentParameterValue;\r\n          break;\r\n\r\n        case ExpressionBlendType.Multiply:\r\n          newAdditiveValue = CubismExpressionMotion.DefaultAdditiveValue;\r\n          newMultiplyValue = value;\r\n          newOverwriteValue = currentParameterValue;\r\n          break;\r\n\r\n        case ExpressionBlendType.Overwrite:\r\n          newAdditiveValue = CubismExpressionMotion.DefaultAdditiveValue;\r\n          newMultiplyValue = CubismExpressionMotion.DefaultMultiplyValue;\r\n          newOverwriteValue = value;\r\n          break;\r\n\r\n        default:\r\n          return;\r\n      }\r\n\r\n      if (expressionIndex == 0) {\r\n        expressionParameterValue.additiveValue = newAdditiveValue;\r\n        expressionParameterValue.multiplyValue = newMultiplyValue;\r\n        expressionParameterValue.overwriteValue = newOverwriteValue;\r\n      } else {\r\n        expressionParameterValue.additiveValue =\r\n          expressionParameterValue.additiveValue * (1.0 - fadeWeight) +\r\n          newAdditiveValue * fadeWeight;\r\n        expressionParameterValue.multiplyValue =\r\n          expressionParameterValue.multiplyValue * (1.0 - fadeWeight) +\r\n          newMultiplyValue * fadeWeight;\r\n        expressionParameterValue.overwriteValue =\r\n          expressionParameterValue.overwriteValue * (1.0 - fadeWeight) +\r\n          newOverwriteValue * fadeWeight;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @brief 表情が参照しているパラメータを取得\r\n   *\r\n   * 表情が参照しているパラメータを取得する\r\n   *\r\n   * @return 表情パラメータ\r\n   */\r\n  public getExpressionParameters() {\r\n    return this._parameters;\r\n  }\r\n\r\n  /**\r\n   * @brief 表情のフェードの値を取得\r\n   *\r\n   * 現在の表情のフェードのウェイト値を取得する\r\n   *\r\n   * @returns 表情のフェードのウェイト値\r\n   *\r\n   * @deprecated CubismExpressionMotion.fadeWeightが削除予定のため非推奨。\r\n   * CubismExpressionMotionManager.getFadeWeight(index: number): number を使用してください。\r\n   * @see CubismExpressionMotionManager#getFadeWeight(index: number)\r\n   */\r\n  public getFadeWeight() {\r\n    return this._fadeWeight;\r\n  }\r\n\r\n  protected parse(buffer: ArrayBuffer, size: number) {\r\n    const json: CubismJson = CubismJson.create(buffer, size);\r\n    if (!json) {\r\n      return;\r\n    }\r\n\r\n    const root: Value = json.getRoot();\r\n\r\n    this.setFadeInTime(\r\n      root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime)\r\n    ); // フェードイン\r\n    this.setFadeOutTime(\r\n      root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime)\r\n    ); // フェードアウト\r\n\r\n    // 各パラメータについて\r\n    const parameterCount = root\r\n      .getValueByString(ExpressionKeyParameters)\r\n      .getSize();\r\n    this._parameters.prepareCapacity(parameterCount);\r\n\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      const param: Value = root\r\n        .getValueByString(ExpressionKeyParameters)\r\n        .getValueByIndex(i);\r\n      const parameterId: CubismIdHandle = CubismFramework.getIdManager().getId(\r\n        param.getValueByString(ExpressionKeyId).getRawString()\r\n      ); // パラメータID\r\n\r\n      const value: number = param\r\n        .getValueByString(ExpressionKeyValue)\r\n        .toFloat(); // 値\r\n\r\n      // 計算方法の設定\r\n      let blendType: ExpressionBlendType;\r\n\r\n      if (\r\n        param.getValueByString(ExpressionKeyBlend).isNull() ||\r\n        param.getValueByString(ExpressionKeyBlend).getString() == BlendValueAdd\r\n      ) {\r\n        blendType = ExpressionBlendType.Additive;\r\n      } else if (\r\n        param.getValueByString(ExpressionKeyBlend).getString() ==\r\n        BlendValueMultiply\r\n      ) {\r\n        blendType = ExpressionBlendType.Multiply;\r\n      } else if (\r\n        param.getValueByString(ExpressionKeyBlend).getString() ==\r\n        BlendValueOverwrite\r\n      ) {\r\n        blendType = ExpressionBlendType.Overwrite;\r\n      } else {\r\n        // その他 仕様にない値を設定した時は加算モードにすることで復旧\r\n        blendType = ExpressionBlendType.Additive;\r\n      }\r\n\r\n      // 設定オブジェクトを作成してリストに追加する\r\n      const item: ExpressionParameter = new ExpressionParameter();\r\n\r\n      item.parameterId = parameterId;\r\n      item.blendType = blendType;\r\n      item.value = value;\r\n\r\n      this._parameters.pushBack(item);\r\n    }\r\n\r\n    CubismJson.delete(json); // JSONデータは不要になったら削除する\r\n  }\r\n\r\n  /**\r\n   * @brief ブレンド計算\r\n   *\r\n   * 入力された値でブレンド計算をする。\r\n   *\r\n   * @param source 現在の値\r\n   * @param destination 適用する値\r\n   * @param weight ウェイト\r\n   * @returns 計算結果\r\n   */\r\n  public calculateValue(\r\n    source: number,\r\n    destination: number,\r\n    fadeWeight: number\r\n  ): number {\r\n    return source * (1.0 - fadeWeight) + destination * fadeWeight;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  protected constructor() {\r\n    super();\r\n    this._parameters = new csmVector<ExpressionParameter>();\r\n    this._fadeWeight = 0.0;\r\n  }\r\n\r\n  private _parameters: csmVector<ExpressionParameter>; // 表情のパラメータ情報リスト\r\n\r\n  /**\r\n   * 表情の現在のウェイト\r\n   *\r\n   * @deprecated 不具合を引き起こす要因となるため非推奨。\r\n   */\r\n  private _fadeWeight: number;\r\n}\r\n\r\n/**\r\n * 表情パラメータ値の計算方式\r\n */\r\nexport enum ExpressionBlendType {\r\n  Additive = 0, // 加算\r\n  Multiply = 1, // 乗算\r\n  Overwrite = 2 // 上書き\r\n}\r\n\r\n/**\r\n * 表情のパラメータ情報\r\n */\r\nexport class ExpressionParameter {\r\n  parameterId: CubismIdHandle; // パラメータID\r\n  blendType: ExpressionBlendType; // パラメータの演算種類\r\n  value: number; // 値\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismexpressionmotion';\r\nimport { ExpressionParameterValue } from './cubismexpressionmotionmanager';\r\nimport { CubismDefaultParameterId } from '../cubismdefaultparameterid';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismExpressionMotion = $.CubismExpressionMotion;\r\n  export type CubismExpressionMotion = $.CubismExpressionMotion;\r\n  export const ExpressionBlendType = $.ExpressionBlendType;\r\n  export type ExpressionBlendType = $.ExpressionBlendType;\r\n  export const ExpressionParameter = $.ExpressionParameter;\r\n  export type ExpressionParameter = $.ExpressionParameter;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { ACubismMotion } from './acubismmotion';\r\nimport { CubismMotionQueueEntryHandle } from './cubismmotionqueuemanager';\r\n\r\n/**\r\n * CubismMotionQueueManagerで再生している各モーションの管理クラス。\r\n */\r\nexport class CubismMotionQueueEntry {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._autoDelete = false;\r\n    this._motion = null;\r\n    this._available = true;\r\n    this._finished = false;\r\n    this._started = false;\r\n    this._startTimeSeconds = -1.0;\r\n    this._fadeInStartTimeSeconds = 0.0;\r\n    this._endTimeSeconds = -1.0;\r\n    this._stateTimeSeconds = 0.0;\r\n    this._stateWeight = 0.0;\r\n    this._lastEventCheckSeconds = 0.0;\r\n    this._motionQueueEntryHandle = this;\r\n    this._fadeOutSeconds = 0.0;\r\n    this._isTriggeredFadeOut = false;\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    if (this._autoDelete && this._motion) {\r\n      ACubismMotion.delete(this._motion); //\r\n    }\r\n  }\r\n\r\n  /**\r\n   * フェードアウト時間と開始判定の設定\r\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\r\n   */\r\n  public setFadeOut(fadeOutSeconds: number): void {\r\n    this._fadeOutSeconds = fadeOutSeconds;\r\n    this._isTriggeredFadeOut = true;\r\n  }\r\n\r\n  /**\r\n   * フェードアウトの開始\r\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\r\n   * @param userTimeSeconds デルタ時間の積算値[秒]\r\n   */\r\n  public startFadeOut(fadeOutSeconds: number, userTimeSeconds: number): void {\r\n    const newEndTimeSeconds: number = userTimeSeconds + fadeOutSeconds;\r\n    this._isTriggeredFadeOut = true;\r\n\r\n    if (\r\n      this._endTimeSeconds < 0.0 ||\r\n      newEndTimeSeconds < this._endTimeSeconds\r\n    ) {\r\n      this._endTimeSeconds = newEndTimeSeconds;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * モーションの終了の確認\r\n   *\r\n   * @return true モーションが終了した\r\n   * @return false 終了していない\r\n   */\r\n  public isFinished(): boolean {\r\n    return this._finished;\r\n  }\r\n\r\n  /**\r\n   * モーションの開始の確認\r\n   * @return true モーションが開始した\r\n   * @return false 開始していない\r\n   */\r\n  public isStarted(): boolean {\r\n    return this._started;\r\n  }\r\n\r\n  /**\r\n   * モーションの開始時刻の取得\r\n   * @return モーションの開始時刻[秒]\r\n   */\r\n  public getStartTime(): number {\r\n    return this._startTimeSeconds;\r\n  }\r\n\r\n  /**\r\n   * フェードインの開始時刻の取得\r\n   * @return フェードインの開始時刻[秒]\r\n   */\r\n  public getFadeInStartTime(): number {\r\n    return this._fadeInStartTimeSeconds;\r\n  }\r\n\r\n  /**\r\n   * フェードインの終了時刻の取得\r\n   * @return フェードインの終了時刻の取得\r\n   */\r\n  public getEndTime(): number {\r\n    return this._endTimeSeconds;\r\n  }\r\n\r\n  /**\r\n   * モーションの開始時刻の設定\r\n   * @param startTime モーションの開始時刻\r\n   */\r\n  public setStartTime(startTime: number): void {\r\n    this._startTimeSeconds = startTime;\r\n  }\r\n\r\n  /**\r\n   * フェードインの開始時刻の設定\r\n   * @param startTime フェードインの開始時刻[秒]\r\n   */\r\n  public setFadeInStartTime(startTime: number): void {\r\n    this._fadeInStartTimeSeconds = startTime;\r\n  }\r\n\r\n  /**\r\n   * フェードインの終了時刻の設定\r\n   * @param endTime フェードインの終了時刻[秒]\r\n   */\r\n  public setEndTime(endTime: number): void {\r\n    this._endTimeSeconds = endTime;\r\n  }\r\n\r\n  /**\r\n   * モーションの終了の設定\r\n   * @param f trueならモーションの終了\r\n   */\r\n  public setIsFinished(f: boolean): void {\r\n    this._finished = f;\r\n  }\r\n\r\n  /**\r\n   * モーション開始の設定\r\n   * @param f trueならモーションの開始\r\n   */\r\n  public setIsStarted(f: boolean): void {\r\n    this._started = f;\r\n  }\r\n\r\n  /**\r\n   * モーションの有効性の確認\r\n   * @return true モーションは有効\r\n   * @return false モーションは無効\r\n   */\r\n  public isAvailable(): boolean {\r\n    return this._available;\r\n  }\r\n\r\n  /**\r\n   * モーションの有効性の設定\r\n   * @param v trueならモーションは有効\r\n   */\r\n  public setIsAvailable(v: boolean): void {\r\n    this._available = v;\r\n  }\r\n\r\n  /**\r\n   * モーションの状態の設定\r\n   * @param timeSeconds 現在時刻[秒]\r\n   * @param weight モーション尾重み\r\n   */\r\n  public setState(timeSeconds: number, weight: number): void {\r\n    this._stateTimeSeconds = timeSeconds;\r\n    this._stateWeight = weight;\r\n  }\r\n\r\n  /**\r\n   * モーションの現在時刻の取得\r\n   * @return モーションの現在時刻[秒]\r\n   */\r\n  public getStateTime(): number {\r\n    return this._stateTimeSeconds;\r\n  }\r\n\r\n  /**\r\n   * モーションの重みの取得\r\n   * @return モーションの重み\r\n   */\r\n  public getStateWeight(): number {\r\n    return this._stateWeight;\r\n  }\r\n\r\n  /**\r\n   * 最後にイベントの発火をチェックした時間を取得\r\n   *\r\n   * @return 最後にイベントの発火をチェックした時間[秒]\r\n   */\r\n  public getLastCheckEventSeconds(): number {\r\n    return this._lastEventCheckSeconds;\r\n  }\r\n\r\n  /**\r\n   * 最後にイベントをチェックした時間を設定\r\n   * @param checkSeconds 最後にイベントをチェックした時間[秒]\r\n   */\r\n  public setLastCheckEventSeconds(checkSeconds: number): void {\r\n    this._lastEventCheckSeconds = checkSeconds;\r\n  }\r\n\r\n  /**\r\n   * フェードアウト開始判定の取得\r\n   * @return フェードアウト開始するかどうか\r\n   */\r\n  public isTriggeredFadeOut(): boolean {\r\n    return this._isTriggeredFadeOut;\r\n  }\r\n\r\n  /**\r\n   * フェードアウト時間の取得\r\n   * @return フェードアウト時間[秒]\r\n   */\r\n  public getFadeOutSeconds(): number {\r\n    return this._fadeOutSeconds;\r\n  }\r\n\r\n  /**\r\n   * モーションの取得\r\n   *\r\n   * @return モーション\r\n   */\r\n  public getCubismMotion(): ACubismMotion {\r\n    return this._motion;\r\n  }\r\n\r\n  _autoDelete: boolean; // 自動削除\r\n  _motion: ACubismMotion; // モーション\r\n\r\n  _available: boolean; // 有効化フラグ\r\n  _finished: boolean; // 終了フラグ\r\n  _started: boolean; // 開始フラグ\r\n  _startTimeSeconds: number; // モーション再生開始時刻[秒]\r\n  _fadeInStartTimeSeconds: number; // フェードイン開始時刻（ループの時は初回のみ）[秒]\r\n  _endTimeSeconds: number; // 終了予定時刻[秒]\r\n  _stateTimeSeconds: number; // 時刻の状態[秒]\r\n  _stateWeight: number; // 重みの状態\r\n  _lastEventCheckSeconds: number; // 最終のMotion側のチェックした時間\r\n  private _fadeOutSeconds: number; // フェードアウト時間[秒]\r\n  private _isTriggeredFadeOut: boolean; // フェードアウト開始フラグ\r\n\r\n  _motionQueueEntryHandle: CubismMotionQueueEntryHandle; // インスタンスごとに一意の値を持つ識別番号\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmotionqueueentry';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMotionQueueEntry = $.CubismMotionQueueEntry;\r\n  export type CubismMotionQueueEntry = $.CubismMotionQueueEntry;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { ACubismMotion } from './acubismmotion';\r\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\r\nimport { csmVector, iterator } from '../type/csmvector';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmString } from '../type/csmstring';\r\n\r\n/**\r\n * モーション再生の管理\r\n *\r\n * モーション再生の管理用クラス。CubismMotionモーションなどACubismMotionのサブクラスを再生するために使用する。\r\n *\r\n * @note 再生中に別のモーションが StartMotion()された場合は、新しいモーションに滑らかに変化し旧モーションは中断する。\r\n *       表情用モーション、体用モーションなどを分けてモーション化した場合など、\r\n *       複数のモーションを同時に再生させる場合は、複数のCubismMotionQueueManagerインスタンスを使用する。\r\n */\r\nexport class CubismMotionQueueManager {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._userTimeSeconds = 0.0;\r\n    this._eventCallBack = null;\r\n    this._eventCustomData = null;\r\n    this._motions = new csmVector<CubismMotionQueueEntry>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ\r\n   */\r\n  public release(): void {\r\n    for (let i = 0; i < this._motions.getSize(); ++i) {\r\n      if (this._motions.at(i)) {\r\n        this._motions.at(i).release();\r\n        this._motions.set(i, null);\r\n      }\r\n    }\r\n\r\n    this._motions = null;\r\n  }\r\n\r\n  /**\r\n   * 指定したモーションの開始\r\n   *\r\n   * 指定したモーションを開始する。同じタイプのモーションが既にある場合は、既存のモーションに終了フラグを立て、フェードアウトを開始させる。\r\n   *\r\n   * @param   motion          開始するモーション\r\n   * @param   autoDelete      再生が終了したモーションのインスタンスを削除するなら true\r\n   * @param   userTimeSeconds Deprecated: デルタ時間の積算値[秒] 関数内で参照していないため使用は非推奨。\r\n   * @return                      開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」\r\n   */\r\n  public startMotion(\r\n    motion: ACubismMotion,\r\n    autoDelete: boolean,\r\n    userTimeSeconds?: number\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (motion == null) {\r\n      return InvalidMotionQueueEntryHandleValue;\r\n    }\r\n\r\n    let motionQueueEntry: CubismMotionQueueEntry = null;\r\n\r\n    // 既にモーションがあれば終了フラグを立てる\r\n    for (let i = 0; i < this._motions.getSize(); ++i) {\r\n      motionQueueEntry = this._motions.at(i);\r\n      if (motionQueueEntry == null) {\r\n        continue;\r\n      }\r\n\r\n      motionQueueEntry.setFadeOut(motionQueueEntry._motion.getFadeOutTime()); // フェードアウト設定\r\n    }\r\n\r\n    motionQueueEntry = new CubismMotionQueueEntry(); // 終了時に破棄する\r\n    motionQueueEntry._autoDelete = autoDelete;\r\n    motionQueueEntry._motion = motion;\r\n\r\n    this._motions.pushBack(motionQueueEntry);\r\n\r\n    return motionQueueEntry._motionQueueEntryHandle;\r\n  }\r\n\r\n  /**\r\n   * 全てのモーションの終了の確認\r\n   * @return true 全て終了している\r\n   * @return false 終了していない\r\n   */\r\n  public isFinished(): boolean {\r\n    // ------- 処理を行う -------\r\n    // 既にモーションがあれば終了フラグを立てる\r\n\r\n    for (\r\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n      ite.notEqual(this._motions.end());\r\n\r\n    ) {\r\n      let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n      if (motionQueueEntry == null) {\r\n        ite = this._motions.erase(ite); // 削除\r\n        continue;\r\n      }\r\n\r\n      const motion: ACubismMotion = motionQueueEntry._motion;\r\n\r\n      if (motion == null) {\r\n        motionQueueEntry.release();\r\n        motionQueueEntry = null;\r\n        ite = this._motions.erase(ite); // 削除\r\n        continue;\r\n      }\r\n\r\n      // ----- 終了済みの処理があれば削除する ------\r\n      if (!motionQueueEntry.isFinished()) {\r\n        return false;\r\n      } else {\r\n        ite.preIncrement();\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 指定したモーションの終了の確認\r\n   * @param motionQueueEntryNumber モーションの識別番号\r\n   * @return true 全て終了している\r\n   * @return false 終了していない\r\n   */\r\n  public isFinishedByHandle(\r\n    motionQueueEntryNumber: CubismMotionQueueEntryHandle\r\n  ): boolean {\r\n    for (\r\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n      ite.notEqual(this._motions.end());\r\n      ite.increment()\r\n    ) {\r\n      const motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n      if (motionQueueEntry == null) {\r\n        continue;\r\n      }\r\n\r\n      if (\r\n        motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber &&\r\n        !motionQueueEntry.isFinished()\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 全てのモーションを停止する\r\n   */\r\n  public stopAllMotions(): void {\r\n    // ------- 処理を行う -------\r\n    // 既にモーションがあれば終了フラグを立てる\r\n\r\n    for (\r\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n      ite.notEqual(this._motions.end());\r\n\r\n    ) {\r\n      let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n      if (motionQueueEntry == null) {\r\n        ite = this._motions.erase(ite);\r\n\r\n        continue;\r\n      }\r\n\r\n      // ----- 終了済みの処理があれば削除する ------\r\n      motionQueueEntry.release();\r\n      motionQueueEntry = null;\r\n      ite = this._motions.erase(ite); // 削除\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @brief CubismMotionQueueEntryの配列の取得\r\n   *\r\n   * CubismMotionQueueEntryの配列を取得する。\r\n   *\r\n   * @return  CubismMotionQueueEntryの配列へのポインタ\r\n   * @retval  NULL   見つからなかった\r\n   */\r\n  public getCubismMotionQueueEntries(): csmVector<CubismMotionQueueEntry> {\r\n    return this._motions;\r\n  }\r\n\r\n  /**\r\n   * 指定したCubismMotionQueueEntryの取得\r\n\r\n   * @param   motionQueueEntryNumber  モーションの識別番号\r\n   * @return  指定したCubismMotionQueueEntry\r\n   * @return  null   見つからなかった\r\n   */\r\n  public getCubismMotionQueueEntry(\r\n    motionQueueEntryNumber: any\r\n  ): CubismMotionQueueEntry {\r\n    //------- 処理を行う -------\r\n    for (\r\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n      ite.notEqual(this._motions.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      const motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n      if (motionQueueEntry == null) {\r\n        continue;\r\n      }\r\n\r\n      if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {\r\n        return motionQueueEntry;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * イベントを受け取るCallbackの登録\r\n   *\r\n   * @param callback コールバック関数\r\n   * @param customData コールバックに返されるデータ\r\n   */\r\n  public setEventCallback(\r\n    callback: CubismMotionEventFunction,\r\n    customData: any = null\r\n  ): void {\r\n    this._eventCallBack = callback;\r\n    this._eventCustomData = customData;\r\n  }\r\n\r\n  /**\r\n   * モーションを更新して、モデルにパラメータ値を反映する。\r\n   *\r\n   * @param   model   対象のモデル\r\n   * @param   userTimeSeconds   デルタ時間の積算値[秒]\r\n   * @return  true    モデルへパラメータ値の反映あり\r\n   * @return  false   モデルへパラメータ値の反映なし(モーションの変化なし)\r\n   */\r\n  public doUpdateMotion(model: CubismModel, userTimeSeconds: number): boolean {\r\n    let updated = false;\r\n\r\n    // ------- 処理を行う --------\r\n    // 既にモーションがあれば終了フラグを立てる\r\n\r\n    for (\r\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n      ite.notEqual(this._motions.end());\r\n\r\n    ) {\r\n      let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n      if (motionQueueEntry == null) {\r\n        ite = this._motions.erase(ite); // 削除\r\n        continue;\r\n      }\r\n\r\n      const motion: ACubismMotion = motionQueueEntry._motion;\r\n\r\n      if (motion == null) {\r\n        motionQueueEntry.release();\r\n        motionQueueEntry = null;\r\n        ite = this._motions.erase(ite); // 削除\r\n\r\n        continue;\r\n      }\r\n\r\n      // ------ 値を反映する ------\r\n      motion.updateParameters(model, motionQueueEntry, userTimeSeconds);\r\n      updated = true;\r\n\r\n      // ------ ユーザトリガーイベントを検査する ----\r\n      const firedList: csmVector<csmString> = motion.getFiredEvent(\r\n        motionQueueEntry.getLastCheckEventSeconds() -\r\n          motionQueueEntry.getStartTime(),\r\n        userTimeSeconds - motionQueueEntry.getStartTime()\r\n      );\r\n\r\n      for (let i = 0; i < firedList.getSize(); ++i) {\r\n        this._eventCallBack(this, firedList.at(i), this._eventCustomData);\r\n      }\r\n\r\n      motionQueueEntry.setLastCheckEventSeconds(userTimeSeconds);\r\n\r\n      // ------ 終了済みの処理があれば削除する ------\r\n      if (motionQueueEntry.isFinished()) {\r\n        motionQueueEntry.release();\r\n        motionQueueEntry = null;\r\n        ite = this._motions.erase(ite); // 削除\r\n      } else {\r\n        if (motionQueueEntry.isTriggeredFadeOut()) {\r\n          motionQueueEntry.startFadeOut(\r\n            motionQueueEntry.getFadeOutSeconds(),\r\n            userTimeSeconds\r\n          );\r\n        }\r\n        ite.preIncrement();\r\n      }\r\n    }\r\n\r\n    return updated;\r\n  }\r\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\r\n\r\n  _motions: csmVector<CubismMotionQueueEntry>; // モーション\r\n  _eventCallBack: CubismMotionEventFunction; // コールバック関数\r\n  _eventCustomData: any; // コールバックに戻されるデータ\r\n}\r\n\r\n/**\r\n * イベントのコールバック関数を定義\r\n *\r\n * イベントのコールバックに登録できる関数の型情報\r\n * @param caller        発火したイベントを再生させたCubismMotionQueueManager\r\n * @param eventValue    発火したイベントの文字列データ\r\n * @param customData   コールバックに返される登録時に指定されたデータ\r\n */\r\nexport interface CubismMotionEventFunction {\r\n  (\r\n    caller: CubismMotionQueueManager,\r\n    eventValue: csmString,\r\n    customData: any\r\n  ): void;\r\n}\r\n\r\n/**\r\n * モーションの識別番号\r\n *\r\n * モーションの識別番号の定義\r\n */\r\nexport declare type CubismMotionQueueEntryHandle = any;\r\nexport const InvalidMotionQueueEntryHandleValue: CubismMotionQueueEntryHandle =\r\n  -1;\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmotionqueuemanager';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMotionQueueManager = $.CubismMotionQueueManager;\r\n  export type CubismMotionQueueManager = $.CubismMotionQueueManager;\r\n  export const InvalidMotionQueueEntryHandleValue =\r\n    $.InvalidMotionQueueEntryHandleValue;\r\n  export type CubismMotionQueueEntryHandle = $.CubismMotionQueueEntryHandle;\r\n  export type CubismMotionEventFunction = $.CubismMotionEventFunction;\r\n}\r\n","import { CubismId, CubismIdHandle } from '../id/cubismid';\r\nimport { LogLevel, csmDelete } from '../live2dcubismframework';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmVector, iterator } from '../type/csmvector';\r\nimport { ACubismMotion } from './acubismmotion';\r\nimport { CubismExpressionMotion } from './cubismexpressionmotion';\r\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\r\nimport {\r\n  CubismMotionQueueEntryHandle,\r\n  CubismMotionQueueManager\r\n} from './cubismmotionqueuemanager';\r\n\r\n/**\r\n * @brief パラメータに適用する表情の値を持たせる構造体\r\n */\r\nexport class ExpressionParameterValue {\r\n  parameterId: CubismIdHandle; // パラメーターID\r\n  additiveValue: number; // 加算値\r\n  multiplyValue: number; // 乗算値\r\n  overwriteValue: number; // 上書き値\r\n}\r\n\r\n/**\r\n * @brief 表情モーションの管理\r\n *\r\n * 表情モーションの管理をおこなうクラス。\r\n */\r\nexport class CubismExpressionMotionManager extends CubismMotionQueueManager {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._currentPriority = 0;\r\n    this._reservePriority = 0;\r\n    this._expressionParameterValues = new csmVector<ExpressionParameterValue>();\r\n    this._fadeWeights = new csmVector<number>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    if (this._expressionParameterValues) {\r\n      csmDelete(this._expressionParameterValues);\r\n      this._expressionParameterValues = null;\r\n    }\r\n\r\n    if (this._fadeWeights) {\r\n      csmDelete(this._fadeWeights);\r\n      this._fadeWeights = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @brief 再生中のモーションの優先度の取得\r\n   *\r\n   * 再生中のモーションの優先度を取得する。\r\n   *\r\n   * @returns モーションの優先度\r\n   */\r\n  public getCurrentPriority(): number {\r\n    return this._currentPriority;\r\n  }\r\n\r\n  /**\r\n   * @brief 予約中のモーションの優先度の取得\r\n   *\r\n   * 予約中のモーションの優先度を取得する。\r\n   *\r\n   * @return  モーションの優先度\r\n   */\r\n  public getReservePriority(): number {\r\n    return this._reservePriority;\r\n  }\r\n\r\n  /**\r\n   * @brief 再生中のモーションのウェイトを取得する。\r\n   *\r\n   * @param[in]    index    表情のインデックス\r\n   * @returns               表情モーションのウェイト\r\n   */\r\n  public getFadeWeight(index: number): number {\r\n    return this._fadeWeights.at(index);\r\n  }\r\n\r\n  /**\r\n   * @brief 予約中のモーションの優先度の設定\r\n   *\r\n   * 予約中のモーションの優先度を設定する。\r\n   *\r\n   * @param[in]   priority     優先度\r\n   */\r\n  public setReservePriority(priority: number) {\r\n    this._reservePriority = priority;\r\n  }\r\n\r\n  /**\r\n   * @brief 優先度を設定してモーションの開始\r\n   *\r\n   * 優先度を設定してモーションを開始する。\r\n   *\r\n   * @param[in]   motion          モーション\r\n   * @param[in]   autoDelete      再生が終了したモーションのインスタンスを削除するならtrue\r\n   * @param[in]   priority        優先度\r\n   * @return                      開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」\r\n   */\r\n  public startMotionPriority(\r\n    motion: ACubismMotion,\r\n    autoDelete: boolean,\r\n    priority: number\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (priority == this.getReservePriority()) {\r\n      this.setReservePriority(0);\r\n    }\r\n    this._currentPriority = priority;\r\n\r\n    this._fadeWeights.pushBack(0.0);\r\n\r\n    return this.startMotion(motion, autoDelete);\r\n  }\r\n\r\n  /**\r\n   * @brief モーションの更新\r\n   *\r\n   * モーションを更新して、モデルにパラメータ値を反映する。\r\n   *\r\n   * @param[in]   model   対象のモデル\r\n   * @param[in]   deltaTimeSeconds    デルタ時間[秒]\r\n   * @retval  true    更新されている\r\n   * @retval  false   更新されていない\r\n   */\r\n  public updateMotion(model: CubismModel, deltaTimeSeconds: number): boolean {\r\n    this._userTimeSeconds += deltaTimeSeconds;\r\n    let updated = false;\r\n    const motions = this.getCubismMotionQueueEntries();\r\n\r\n    let expressionWeight = 0.0;\r\n    let expressionIndex = 0;\r\n\r\n    // ------- 処理を行う --------\r\n    // 既にモーションがあれば終了フラグを立てる\r\n    for (\r\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n      ite.notEqual(this._motions.end());\r\n\r\n    ) {\r\n      const motionQueueEntry = ite.ptr();\r\n\r\n      if (motionQueueEntry == null) {\r\n        ite = motions.erase(ite); //削除\r\n        continue;\r\n      }\r\n\r\n      const expressionMotion = <CubismExpressionMotion>(\r\n        motionQueueEntry.getCubismMotion()\r\n      );\r\n\r\n      if (expressionMotion == null) {\r\n        csmDelete(motionQueueEntry);\r\n        ite = motions.erase(ite); //削除\r\n        continue;\r\n      }\r\n\r\n      const expressionParameters = expressionMotion.getExpressionParameters();\r\n\r\n      if (motionQueueEntry.isAvailable()) {\r\n        // 再生中のExpressionが参照しているパラメータをすべてリストアップ\r\n        for (let i = 0; i < expressionParameters.getSize(); ++i) {\r\n          if (expressionParameters.at(i).parameterId == null) {\r\n            continue;\r\n          }\r\n\r\n          let index = -1;\r\n          // リストにパラメータIDが存在するか検索\r\n          for (let j = 0; j < this._expressionParameterValues.getSize(); ++j) {\r\n            if (\r\n              this._expressionParameterValues.at(j).parameterId !=\r\n              expressionParameters.at(i).parameterId\r\n            ) {\r\n              continue;\r\n            }\r\n\r\n            index = j;\r\n            break;\r\n          }\r\n\r\n          if (index >= 0) {\r\n            continue;\r\n          }\r\n\r\n          // パラメータがリストに存在しないなら新規追加\r\n          const item: ExpressionParameterValue = new ExpressionParameterValue();\r\n          item.parameterId = expressionParameters.at(i).parameterId;\r\n          item.additiveValue = CubismExpressionMotion.DefaultAdditiveValue;\r\n          item.multiplyValue = CubismExpressionMotion.DefaultMultiplyValue;\r\n          item.overwriteValue = model.getParameterValueById(item.parameterId);\r\n          this._expressionParameterValues.pushBack(item);\r\n        }\r\n      }\r\n\r\n      // ------ 値を計算する ------\r\n      expressionMotion.setupMotionQueueEntry(\r\n        motionQueueEntry,\r\n        this._userTimeSeconds\r\n      );\r\n      this._fadeWeights.set(\r\n        expressionIndex,\r\n        expressionMotion.updateFadeWeight(\r\n          motionQueueEntry,\r\n          this._userTimeSeconds\r\n        )\r\n      );\r\n      expressionMotion.calculateExpressionParameters(\r\n        model,\r\n        this._userTimeSeconds,\r\n        motionQueueEntry,\r\n        this._expressionParameterValues,\r\n        expressionIndex,\r\n        this._fadeWeights.at(expressionIndex)\r\n      );\r\n\r\n      expressionWeight +=\r\n        expressionMotion.getFadeInTime() == 0.0\r\n          ? 1.0\r\n          : CubismMath.getEasingSine(\r\n              (this._userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n                expressionMotion.getFadeInTime()\r\n            );\r\n\r\n      updated = true;\r\n\r\n      if (motionQueueEntry.isTriggeredFadeOut()) {\r\n        // フェードアウト開始\r\n        motionQueueEntry.startFadeOut(\r\n          motionQueueEntry.getFadeOutSeconds(),\r\n          this._userTimeSeconds\r\n        );\r\n      }\r\n\r\n      ite.preIncrement();\r\n      ++expressionIndex;\r\n    }\r\n\r\n    // ----- 最新のExpressionのフェードが完了していればそれ以前を削除する ------\r\n    if (motions.getSize() > 1) {\r\n      const expressionMotion = <CubismExpressionMotion>(\r\n        motions.at(motions.getSize() - 1).getCubismMotion()\r\n      );\r\n      const latestFadeWeight: number = this._fadeWeights.at(\r\n        this._fadeWeights.getSize() - 1\r\n      );\r\n      if (latestFadeWeight >= 1.0) {\r\n        // 配列の最後の要素は削除しない\r\n        for (let i = motions.getSize() - 2; i >= 0; --i) {\r\n          const motionQueueEntry = motions.at(i);\r\n          csmDelete(motionQueueEntry);\r\n          motions.remove(i);\r\n          this._fadeWeights.remove(i);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (expressionWeight > 1.0) {\r\n      expressionWeight = 1.0;\r\n    }\r\n\r\n    // モデルに各値を適用\r\n    for (let i = 0; i < this._expressionParameterValues.getSize(); ++i) {\r\n      const expressionParameterValue = this._expressionParameterValues.at(i);\r\n      model.setParameterValueById(\r\n        expressionParameterValue.parameterId,\r\n        (expressionParameterValue.overwriteValue +\r\n          expressionParameterValue.additiveValue) *\r\n          expressionParameterValue.multiplyValue,\r\n        expressionWeight\r\n      );\r\n\r\n      expressionParameterValue.additiveValue =\r\n        CubismExpressionMotion.DefaultAdditiveValue;\r\n      expressionParameterValue.multiplyValue =\r\n        CubismExpressionMotion.DefaultMultiplyValue;\r\n    }\r\n\r\n    return updated;\r\n  }\r\n\r\n  private _expressionParameterValues: csmVector<ExpressionParameterValue>; ///< モデルに適用する各パラメータの値\r\n  private _fadeWeights: csmVector<number>; ///< 再生中の表情のウェイト\r\n  private _currentPriority: number; ///< 現在再生中のモーションの優先度\r\n  private _reservePriority: number; ///< 再生予定のモーションの優先度。再生中は0になる。モーションファイルを別スレッドで読み込むときの機能。\r\n  private _startExpressionTime: number; ///< 表情の再生開始時刻\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismexpressionmotionmanager';\r\nimport { CubismMath } from '../math/cubismmath';\r\nimport { CubismDebug, CubismLogError } from '../utils/cubismdebug';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismExpressionMotionManager = $.CubismExpressionMotionManager;\r\n  export type CubismExpressionMotionManager = $.CubismExpressionMotionManager;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { csmString } from '../type/csmstring';\r\nimport { csmVector } from '../type/csmvector';\r\n\r\n/**\r\n * @brief モーションカーブの種類\r\n *\r\n * モーションカーブの種類。\r\n */\r\nexport enum CubismMotionCurveTarget {\r\n  CubismMotionCurveTarget_Model, // モデルに対して\r\n  CubismMotionCurveTarget_Parameter, // パラメータに対して\r\n  CubismMotionCurveTarget_PartOpacity // パーツの不透明度に対して\r\n}\r\n\r\n/**\r\n * @brief モーションカーブのセグメントの種類\r\n *\r\n * モーションカーブのセグメントの種類。\r\n */\r\nexport enum CubismMotionSegmentType {\r\n  CubismMotionSegmentType_Linear = 0, // リニア\r\n  CubismMotionSegmentType_Bezier = 1, // ベジェ曲線\r\n  CubismMotionSegmentType_Stepped = 2, // ステップ\r\n  CubismMotionSegmentType_InverseStepped = 3 // インバースステップ\r\n}\r\n\r\n/**\r\n * @brief モーションカーブの制御点\r\n *\r\n * モーションカーブの制御点。\r\n */\r\nexport class CubismMotionPoint {\r\n  time = 0.0; // 時間[秒]\r\n  value = 0.0; // 値\r\n}\r\n\r\n/**\r\n * モーションカーブのセグメントの評価関数\r\n *\r\n * @param   points      モーションカーブの制御点リスト\r\n * @param   time        評価する時間[秒]\r\n */\r\nexport interface csmMotionSegmentEvaluationFunction {\r\n  (points: CubismMotionPoint[], time: number): number;\r\n}\r\n\r\n/**\r\n * @brief モーションカーブのセグメント\r\n *\r\n * モーションカーブのセグメント。\r\n */\r\nexport class CubismMotionSegment {\r\n  /**\r\n   * @brief コンストラクタ\r\n   *\r\n   * コンストラクタ。\r\n   */\r\n  public constructor() {\r\n    this.evaluate = null;\r\n    this.basePointIndex = 0;\r\n    this.segmentType = 0;\r\n  }\r\n\r\n  evaluate: csmMotionSegmentEvaluationFunction; // 使用する評価関数\r\n  basePointIndex: number; // 最初のセグメントへのインデックス\r\n  segmentType: number; // セグメントの種類\r\n}\r\n\r\n/**\r\n * @brief モーションカーブ\r\n *\r\n * モーションカーブ。\r\n */\r\nexport class CubismMotionCurve {\r\n  public constructor() {\r\n    this.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n    this.segmentCount = 0;\r\n    this.baseSegmentIndex = 0;\r\n    this.fadeInTime = 0.0;\r\n    this.fadeOutTime = 0.0;\r\n  }\r\n\r\n  type: CubismMotionCurveTarget; // カーブの種類\r\n  id: CubismIdHandle; // カーブのID\r\n  segmentCount: number; // セグメントの個数\r\n  baseSegmentIndex: number; // 最初のセグメントのインデックス\r\n  fadeInTime: number; // フェードインにかかる時間[秒]\r\n  fadeOutTime: number; // フェードアウトにかかる時間[秒]\r\n}\r\n\r\n/**\r\n * イベント。\r\n */\r\nexport class CubismMotionEvent {\r\n  fireTime = 0.0;\r\n  value: csmString;\r\n}\r\n\r\n/**\r\n * @brief モーションデータ\r\n *\r\n * モーションデータ。\r\n */\r\nexport class CubismMotionData {\r\n  public constructor() {\r\n    this.duration = 0.0;\r\n    this.loop = false;\r\n    this.curveCount = 0;\r\n    this.eventCount = 0;\r\n    this.fps = 0.0;\r\n\r\n    this.curves = new csmVector<CubismMotionCurve>();\r\n    this.segments = new csmVector<CubismMotionSegment>();\r\n    this.points = new csmVector<CubismMotionPoint>();\r\n    this.events = new csmVector<CubismMotionEvent>();\r\n  }\r\n\r\n  duration: number; // モーションの長さ[秒]\r\n  loop: boolean; // ループするかどうか\r\n  curveCount: number; // カーブの個数\r\n  eventCount: number; // UserDataの個数\r\n  fps: number; // フレームレート\r\n  curves: csmVector<CubismMotionCurve>; // カーブのリスト\r\n  segments: csmVector<CubismMotionSegment>; // セグメントのリスト\r\n  points: csmVector<CubismMotionPoint>; // ポイントのリスト\r\n  events: csmVector<CubismMotionEvent>; // イベントのリスト\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmotioninternal';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMotionCurve = $.CubismMotionCurve;\r\n  export type CubismMotionCurve = $.CubismMotionCurve;\r\n  export const CubismMotionCurveTarget = $.CubismMotionCurveTarget;\r\n  export type CubismMotionCurveTarget = $.CubismMotionCurveTarget;\r\n  export const CubismMotionData = $.CubismMotionData;\r\n  export type CubismMotionData = $.CubismMotionData;\r\n  export const CubismMotionEvent = $.CubismMotionEvent;\r\n  export type CubismMotionEvent = $.CubismMotionEvent;\r\n  export const CubismMotionPoint = $.CubismMotionPoint;\r\n  export type CubismMotionPoint = $.CubismMotionPoint;\r\n  export const CubismMotionSegment = $.CubismMotionSegment;\r\n  export type CubismMotionSegment = $.CubismMotionSegment;\r\n  export const CubismMotionSegmentType = $.CubismMotionSegmentType;\r\n  export type CubismMotionSegmentType = $.CubismMotionSegmentType;\r\n  export type csmMotionSegmentEvaluationFunction =\r\n    $.csmMotionSegmentEvaluationFunction;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { csmString } from '../type/csmstring';\r\nimport { CubismJson, JsonMap } from '../utils/cubismjson';\r\n\r\n// JSON keys\r\nconst Meta = 'Meta';\r\nconst Duration = 'Duration';\r\nconst Loop = 'Loop';\r\nconst AreBeziersRestricted = 'AreBeziersRestricted';\r\nconst CurveCount = 'CurveCount';\r\nconst Fps = 'Fps';\r\nconst TotalSegmentCount = 'TotalSegmentCount';\r\nconst TotalPointCount = 'TotalPointCount';\r\nconst Curves = 'Curves';\r\nconst Target = 'Target';\r\nconst Id = 'Id';\r\nconst FadeInTime = 'FadeInTime';\r\nconst FadeOutTime = 'FadeOutTime';\r\nconst Segments = 'Segments';\r\nconst UserData = 'UserData';\r\nconst UserDataCount = 'UserDataCount';\r\nconst TotalUserDataSize = 'TotalUserDataSize';\r\nconst Time = 'Time';\r\nconst Value = 'Value';\r\n\r\n/**\r\n * motion3.jsonのコンテナ。\r\n */\r\nexport class CubismMotionJson {\r\n  /**\r\n   * コンストラクタ\r\n   * @param buffer motion3.jsonが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   */\r\n  public constructor(buffer: ArrayBuffer, size: number) {\r\n    this._json = CubismJson.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    CubismJson.delete(this._json);\r\n  }\r\n\r\n  /**\r\n   * モーションの長さを取得する\r\n   * @return モーションの長さ[秒]\r\n   */\r\n  public getMotionDuration(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(Duration)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーションのループ情報の取得\r\n   * @return true ループする\r\n   * @return false ループしない\r\n   */\r\n  public isMotionLoop(): boolean {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(Loop)\r\n      .toBoolean();\r\n  }\r\n\r\n  public getEvaluationOptionFlag(flagType: EvaluationOptionFlag): boolean {\r\n    if (\r\n      EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted == flagType\r\n    ) {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(AreBeziersRestricted)\r\n        .toBoolean();\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * モーションカーブの個数の取得\r\n   * @return モーションカーブの個数\r\n   */\r\n  public getMotionCurveCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(CurveCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * モーションのフレームレートの取得\r\n   * @return フレームレート[FPS]\r\n   */\r\n  public getMotionFps(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(Fps)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーションのセグメントの総合計の取得\r\n   * @return モーションのセグメントの取得\r\n   */\r\n  public getMotionTotalSegmentCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(TotalSegmentCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブの制御店の総合計の取得\r\n   * @return モーションのカーブの制御点の総合計\r\n   */\r\n  public getMotionTotalPointCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(TotalPointCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * モーションのフェードイン時間の存在\r\n   * @return true 存在する\r\n   * @return false 存在しない\r\n   */\r\n  public isExistMotionFadeInTime(): boolean {\r\n    return !this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(FadeInTime)\r\n      .isNull();\r\n  }\r\n\r\n  /**\r\n   * モーションのフェードアウト時間の存在\r\n   * @return true 存在する\r\n   * @return false 存在しない\r\n   */\r\n  public isExistMotionFadeOutTime(): boolean {\r\n    return !this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(FadeOutTime)\r\n      .isNull();\r\n  }\r\n\r\n  /**\r\n   * モーションのフェードイン時間の取得\r\n   * @return フェードイン時間[秒]\r\n   */\r\n  public getMotionFadeInTime(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(FadeInTime)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーションのフェードアウト時間の取得\r\n   * @return フェードアウト時間[秒]\r\n   */\r\n  public getMotionFadeOutTime(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(FadeOutTime)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブの種類の取得\r\n   * @param curveIndex カーブのインデックス\r\n   * @return カーブの種類\r\n   */\r\n  public getMotionCurveTarget(curveIndex: number): string {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(Target)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのIDの取得\r\n   * @param curveIndex カーブのインデックス\r\n   * @return カーブのID\r\n   */\r\n  public getMotionCurveId(curveIndex: number): CubismIdHandle {\r\n    return CubismFramework.getIdManager().getId(\r\n      this._json\r\n        .getRoot()\r\n        .getValueByString(Curves)\r\n        .getValueByIndex(curveIndex)\r\n        .getValueByString(Id)\r\n        .getRawString()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのフェードイン時間の存在\r\n   * @param curveIndex カーブのインデックス\r\n   * @return true 存在する\r\n   * @return false 存在しない\r\n   */\r\n  public isExistMotionCurveFadeInTime(curveIndex: number): boolean {\r\n    return !this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(FadeInTime)\r\n      .isNull();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのフェードアウト時間の存在\r\n   * @param curveIndex カーブのインデックス\r\n   * @return true 存在する\r\n   * @return false 存在しない\r\n   */\r\n  public isExistMotionCurveFadeOutTime(curveIndex: number): boolean {\r\n    return !this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(FadeOutTime)\r\n      .isNull();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのフェードイン時間の取得\r\n   * @param curveIndex カーブのインデックス\r\n   * @return フェードイン時間[秒]\r\n   */\r\n  public getMotionCurveFadeInTime(curveIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(FadeInTime)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのフェードアウト時間の取得\r\n   * @param curveIndex カーブのインデックス\r\n   * @return フェードアウト時間[秒]\r\n   */\r\n  public getMotionCurveFadeOutTime(curveIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(FadeOutTime)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのセグメントの個数を取得する\r\n   * @param curveIndex カーブのインデックス\r\n   * @return モーションのカーブのセグメントの個数\r\n   */\r\n  public getMotionCurveSegmentCount(curveIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(Segments)\r\n      .getVector()\r\n      .getSize();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのセグメントの値の取得\r\n   * @param curveIndex カーブのインデックス\r\n   * @param segmentIndex セグメントのインデックス\r\n   * @return セグメントの値\r\n   */\r\n  public getMotionCurveSegment(\r\n    curveIndex: number,\r\n    segmentIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(Segments)\r\n      .getValueByIndex(segmentIndex)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * イベントの個数の取得\r\n   * @return イベントの個数\r\n   */\r\n  public getEventCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(UserDataCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   *  イベントの総文字数の取得\r\n   * @return イベントの総文字数\r\n   */\r\n  public getTotalEventValueSize(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(TotalUserDataSize)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * イベントの時間の取得\r\n   * @param userDataIndex イベントのインデックス\r\n   * @return イベントの時間[秒]\r\n   */\r\n  public getEventTime(userDataIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(UserData)\r\n      .getValueByIndex(userDataIndex)\r\n      .getValueByString(Time)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * イベントの取得\r\n   * @param userDataIndex イベントのインデックス\r\n   * @return イベントの文字列\r\n   */\r\n  public getEventValue(userDataIndex: number): csmString {\r\n    return new csmString(\r\n      this._json\r\n        .getRoot()\r\n        .getValueByString(UserData)\r\n        .getValueByIndex(userDataIndex)\r\n        .getValueByString(Value)\r\n        .getRawString()\r\n    );\r\n  }\r\n\r\n  _json: CubismJson; // motion3.jsonのデータ\r\n}\r\n\r\n/**\r\n * @brief ベジェカーブの解釈方法のフラグタイプ\r\n */\r\nexport enum EvaluationOptionFlag {\r\n  EvaluationOptionFlag_AreBeziersRistricted = 0 ///< ベジェハンドルの規制状態\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmotionjson';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMotionJson = $.CubismMotionJson;\r\n  export type CubismMotionJson = $.CubismMotionJson;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { CubismMath } from '../math/cubismmath';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmString } from '../type/csmstring';\r\nimport { csmVector } from '../type/csmvector';\r\nimport {\r\n  CSM_ASSERT,\r\n  CubismLogDebug,\r\n  CubismLogWarning\r\n} from '../utils/cubismdebug';\r\nimport { ACubismMotion, FinishedMotionCallback } from './acubismmotion';\r\nimport {\r\n  CubismMotionCurve,\r\n  CubismMotionCurveTarget,\r\n  CubismMotionData,\r\n  CubismMotionEvent,\r\n  CubismMotionPoint,\r\n  CubismMotionSegment,\r\n  CubismMotionSegmentType\r\n} from './cubismmotioninternal';\r\nimport { CubismMotionJson, EvaluationOptionFlag } from './cubismmotionjson';\r\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\r\n\r\nconst EffectNameEyeBlink = 'EyeBlink';\r\nconst EffectNameLipSync = 'LipSync';\r\nconst TargetNameModel = 'Model';\r\nconst TargetNameParameter = 'Parameter';\r\nconst TargetNamePartOpacity = 'PartOpacity';\r\n\r\n// Id\r\nconst IdNameOpacity = 'Opacity';\r\n\r\n/**\r\n * Cubism SDK R2 以前のモーションを再現させるなら true 、アニメータのモーションを正しく再現するなら false 。\r\n */\r\nconst UseOldBeziersCurveMotion = false;\r\n\r\nfunction lerpPoints(\r\n  a: CubismMotionPoint,\r\n  b: CubismMotionPoint,\r\n  t: number\r\n): CubismMotionPoint {\r\n  const result: CubismMotionPoint = new CubismMotionPoint();\r\n\r\n  result.time = a.time + (b.time - a.time) * t;\r\n  result.value = a.value + (b.value - a.value) * t;\r\n\r\n  return result;\r\n}\r\n\r\nfunction linearEvaluate(points: CubismMotionPoint[], time: number): number {\r\n  let t: number = (time - points[0].time) / (points[1].time - points[0].time);\r\n\r\n  if (t < 0.0) {\r\n    t = 0.0;\r\n  }\r\n\r\n  return points[0].value + (points[1].value - points[0].value) * t;\r\n}\r\n\r\nfunction bezierEvaluate(points: CubismMotionPoint[], time: number): number {\r\n  let t: number = (time - points[0].time) / (points[3].time - points[0].time);\r\n\r\n  if (t < 0.0) {\r\n    t = 0.0;\r\n  }\r\n\r\n  const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\r\n  const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\r\n  const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\r\n\r\n  const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\r\n  const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\r\n\r\n  return lerpPoints(p012, p123, t).value;\r\n}\r\n\r\nfunction bezierEvaluateBinarySearch(\r\n  points: CubismMotionPoint[],\r\n  time: number\r\n): number {\r\n  const xError = 0.01;\r\n\r\n  const x: number = time;\r\n  let x1: number = points[0].time;\r\n  let x2: number = points[3].time;\r\n  let cx1: number = points[1].time;\r\n  let cx2: number = points[2].time;\r\n\r\n  let ta = 0.0;\r\n  let tb = 1.0;\r\n  let t = 0.0;\r\n  let i = 0;\r\n\r\n  for (let var33 = true; i < 20; ++i) {\r\n    if (x < x1 + xError) {\r\n      t = ta;\r\n      break;\r\n    }\r\n\r\n    if (x2 - xError < x) {\r\n      t = tb;\r\n      break;\r\n    }\r\n\r\n    let centerx: number = (cx1 + cx2) * 0.5;\r\n    cx1 = (x1 + cx1) * 0.5;\r\n    cx2 = (x2 + cx2) * 0.5;\r\n    const ctrlx12: number = (cx1 + centerx) * 0.5;\r\n    const ctrlx21: number = (cx2 + centerx) * 0.5;\r\n    centerx = (ctrlx12 + ctrlx21) * 0.5;\r\n    if (x < centerx) {\r\n      tb = (ta + tb) * 0.5;\r\n      if (centerx - xError < x) {\r\n        t = tb;\r\n        break;\r\n      }\r\n\r\n      x2 = centerx;\r\n      cx2 = ctrlx12;\r\n    } else {\r\n      ta = (ta + tb) * 0.5;\r\n      if (x < centerx + xError) {\r\n        t = ta;\r\n        break;\r\n      }\r\n\r\n      x1 = centerx;\r\n      cx1 = ctrlx21;\r\n    }\r\n  }\r\n\r\n  if (i == 20) {\r\n    t = (ta + tb) * 0.5;\r\n  }\r\n\r\n  if (t < 0.0) {\r\n    t = 0.0;\r\n  }\r\n  if (t > 1.0) {\r\n    t = 1.0;\r\n  }\r\n\r\n  const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\r\n  const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\r\n  const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\r\n\r\n  const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\r\n  const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\r\n\r\n  return lerpPoints(p012, p123, t).value;\r\n}\r\n\r\nfunction bezierEvaluateCardanoInterpretation(\r\n  points: CubismMotionPoint[],\r\n  time: number\r\n): number {\r\n  const x: number = time;\r\n  const x1: number = points[0].time;\r\n  const x2: number = points[3].time;\r\n  const cx1: number = points[1].time;\r\n  const cx2: number = points[2].time;\r\n\r\n  const a: number = x2 - 3.0 * cx2 + 3.0 * cx1 - x1;\r\n  const b: number = 3.0 * cx2 - 6.0 * cx1 + 3.0 * x1;\r\n  const c: number = 3.0 * cx1 - 3.0 * x1;\r\n  const d: number = x1 - x;\r\n\r\n  const t: number = CubismMath.cardanoAlgorithmForBezier(a, b, c, d);\r\n\r\n  const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\r\n  const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\r\n  const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\r\n\r\n  const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\r\n  const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\r\n\r\n  return lerpPoints(p012, p123, t).value;\r\n}\r\n\r\nfunction steppedEvaluate(points: CubismMotionPoint[], time: number): number {\r\n  return points[0].value;\r\n}\r\n\r\nfunction inverseSteppedEvaluate(\r\n  points: CubismMotionPoint[],\r\n  time: number\r\n): number {\r\n  return points[1].value;\r\n}\r\n\r\nfunction evaluateCurve(\r\n  motionData: CubismMotionData,\r\n  index: number,\r\n  time: number\r\n): number {\r\n  // Find segment to evaluate.\r\n  const curve: CubismMotionCurve = motionData.curves.at(index);\r\n\r\n  let target = -1;\r\n  const totalSegmentCount: number = curve.baseSegmentIndex + curve.segmentCount;\r\n  let pointPosition = 0;\r\n  for (let i: number = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {\r\n    // Get first point of next segment.\r\n    pointPosition =\r\n      motionData.segments.at(i).basePointIndex +\r\n      ((motionData.segments.at(i).segmentType as CubismMotionSegmentType) ==\r\n      CubismMotionSegmentType.CubismMotionSegmentType_Bezier\r\n        ? 3\r\n        : 1);\r\n\r\n    // Break if time lies within current segment.\r\n    if (motionData.points.at(pointPosition).time > time) {\r\n      target = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (target == -1) {\r\n    return motionData.points.at(pointPosition).value;\r\n  }\r\n\r\n  const segment: CubismMotionSegment = motionData.segments.at(target);\r\n\r\n  return segment.evaluate(motionData.points.get(segment.basePointIndex), time);\r\n}\r\n\r\n/**\r\n * モーションクラス\r\n *\r\n * モーションのクラス。\r\n */\r\nexport class CubismMotion extends ACubismMotion {\r\n  /**\r\n   * インスタンスを作成する\r\n   *\r\n   * @param buffer motion3.jsonが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\r\n   * @return 作成されたインスタンス\r\n   */\r\n  public static create(\r\n    buffer: ArrayBuffer,\r\n    size: number,\r\n    onFinishedMotionHandler?: FinishedMotionCallback\r\n  ): CubismMotion {\r\n    const ret = new CubismMotion();\r\n\r\n    ret.parse(buffer, size);\r\n    ret._sourceFrameRate = ret._motionData.fps;\r\n    ret._loopDurationSeconds = ret._motionData.duration;\r\n    ret._onFinishedMotion = onFinishedMotionHandler;\r\n\r\n    // NOTE: Editorではループありのモーション書き出しは非対応\r\n    // ret->_loop = (ret->_motionData->Loop > 0);\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータの更新の実行\r\n   * @param model             対象のモデル\r\n   * @param userTimeSeconds   現在の時刻[秒]\r\n   * @param fadeWeight        モーションの重み\r\n   * @param motionQueueEntry  CubismMotionQueueManagerで管理されているモーション\r\n   */\r\n  public doUpdateParameters(\r\n    model: CubismModel,\r\n    userTimeSeconds: number,\r\n    fadeWeight: number,\r\n    motionQueueEntry: CubismMotionQueueEntry\r\n  ): void {\r\n    if (this._modelCurveIdEyeBlink == null) {\r\n      this._modelCurveIdEyeBlink =\r\n        CubismFramework.getIdManager().getId(EffectNameEyeBlink);\r\n    }\r\n\r\n    if (this._modelCurveIdLipSync == null) {\r\n      this._modelCurveIdLipSync =\r\n        CubismFramework.getIdManager().getId(EffectNameLipSync);\r\n    }\r\n\r\n    if (this._modelCurveIdOpacity == null) {\r\n      this._modelCurveIdOpacity =\r\n        CubismFramework.getIdManager().getId(IdNameOpacity);\r\n    }\r\n\r\n    let timeOffsetSeconds: number =\r\n      userTimeSeconds - motionQueueEntry.getStartTime();\r\n\r\n    if (timeOffsetSeconds < 0.0) {\r\n      timeOffsetSeconds = 0.0; // エラー回避\r\n    }\r\n\r\n    let lipSyncValue: number = Number.MAX_VALUE;\r\n    let eyeBlinkValue: number = Number.MAX_VALUE;\r\n\r\n    //まばたき、リップシンクのうちモーションの適用を検出するためのビット（maxFlagCount個まで\r\n    const maxTargetSize = 64;\r\n    let lipSyncFlags = 0;\r\n    let eyeBlinkFlags = 0;\r\n\r\n    //瞬き、リップシンクのターゲット数が上限を超えている場合\r\n    if (this._eyeBlinkParameterIds.getSize() > maxTargetSize) {\r\n      CubismLogDebug(\r\n        'too many eye blink targets : {0}',\r\n        this._eyeBlinkParameterIds.getSize()\r\n      );\r\n    }\r\n    if (this._lipSyncParameterIds.getSize() > maxTargetSize) {\r\n      CubismLogDebug(\r\n        'too many lip sync targets : {0}',\r\n        this._lipSyncParameterIds.getSize()\r\n      );\r\n    }\r\n\r\n    const tmpFadeIn: number =\r\n      this._fadeInSeconds <= 0.0\r\n        ? 1.0\r\n        : CubismMath.getEasingSine(\r\n            (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n              this._fadeInSeconds\r\n          );\r\n\r\n    const tmpFadeOut: number =\r\n      this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0\r\n        ? 1.0\r\n        : CubismMath.getEasingSine(\r\n            (motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n              this._fadeOutSeconds\r\n          );\r\n    let value: number;\r\n    let c: number, parameterIndex: number;\r\n\r\n    // 'Repeat' time as necessary.\r\n    let time: number = timeOffsetSeconds;\r\n\r\n    if (this._isLoop) {\r\n      while (time > this._motionData.duration) {\r\n        time -= this._motionData.duration;\r\n      }\r\n    }\r\n\r\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n    // Evaluate model curves.\r\n    for (\r\n      c = 0;\r\n      c < this._motionData.curveCount &&\r\n      curves.at(c).type ==\r\n        CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n      ++c\r\n    ) {\r\n      // Evaluate curve and call handler.\r\n      value = evaluateCurve(this._motionData, c, time);\r\n\r\n      if (curves.at(c).id == this._modelCurveIdEyeBlink) {\r\n        eyeBlinkValue = value;\r\n      } else if (curves.at(c).id == this._modelCurveIdLipSync) {\r\n        lipSyncValue = value;\r\n      } else if (curves.at(c).id == this._modelCurveIdOpacity) {\r\n        this._modelOpacity = value;\r\n        model.setModelOapcity(this.getModelOpacityValue());\r\n      }\r\n    }\r\n\r\n    let parameterMotionCurveCount = 0;\r\n\r\n    for (\r\n      ;\r\n      c < this._motionData.curveCount &&\r\n      curves.at(c).type ==\r\n        CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\r\n      ++c\r\n    ) {\r\n      parameterMotionCurveCount++;\r\n\r\n      // Find parameter index.\r\n      parameterIndex = model.getParameterIndex(curves.at(c).id);\r\n\r\n      // Skip curve evaluation if no value in sink.\r\n      if (parameterIndex == -1) {\r\n        continue;\r\n      }\r\n\r\n      const sourceValue: number =\r\n        model.getParameterValueByIndex(parameterIndex);\r\n\r\n      // Evaluate curve and apply value.\r\n      value = evaluateCurve(this._motionData, c, time);\r\n\r\n      if (eyeBlinkValue != Number.MAX_VALUE) {\r\n        for (\r\n          let i = 0;\r\n          i < this._eyeBlinkParameterIds.getSize() && i < maxTargetSize;\r\n          ++i\r\n        ) {\r\n          if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {\r\n            value *= eyeBlinkValue;\r\n            eyeBlinkFlags |= 1 << i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (lipSyncValue != Number.MAX_VALUE) {\r\n        for (\r\n          let i = 0;\r\n          i < this._lipSyncParameterIds.getSize() && i < maxTargetSize;\r\n          ++i\r\n        ) {\r\n          if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {\r\n            value += lipSyncValue;\r\n            lipSyncFlags |= 1 << i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      let v: number;\r\n\r\n      // パラメータごとのフェード\r\n      if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {\r\n        // モーションのフェードを適用\r\n        v = sourceValue + (value - sourceValue) * fadeWeight;\r\n      } else {\r\n        // パラメータに対してフェードインかフェードアウトが設定してある場合はそちらを適用\r\n        let fin: number;\r\n        let fout: number;\r\n\r\n        if (curves.at(c).fadeInTime < 0.0) {\r\n          fin = tmpFadeIn;\r\n        } else {\r\n          fin =\r\n            curves.at(c).fadeInTime == 0.0\r\n              ? 1.0\r\n              : CubismMath.getEasingSine(\r\n                  (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n                    curves.at(c).fadeInTime\r\n                );\r\n        }\r\n\r\n        if (curves.at(c).fadeOutTime < 0.0) {\r\n          fout = tmpFadeOut;\r\n        } else {\r\n          fout =\r\n            curves.at(c).fadeOutTime == 0.0 ||\r\n            motionQueueEntry.getEndTime() < 0.0\r\n              ? 1.0\r\n              : CubismMath.getEasingSine(\r\n                  (motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n                    curves.at(c).fadeOutTime\r\n                );\r\n        }\r\n\r\n        const paramWeight: number = this._weight * fin * fout;\r\n\r\n        // パラメータごとのフェードを適用\r\n        v = sourceValue + (value - sourceValue) * paramWeight;\r\n      }\r\n\r\n      model.setParameterValueByIndex(parameterIndex, v, 1.0);\r\n    }\r\n\r\n    {\r\n      if (eyeBlinkValue != Number.MAX_VALUE) {\r\n        for (\r\n          let i = 0;\r\n          i < this._eyeBlinkParameterIds.getSize() && i < maxTargetSize;\r\n          ++i\r\n        ) {\r\n          const sourceValue: number = model.getParameterValueById(\r\n            this._eyeBlinkParameterIds.at(i)\r\n          );\r\n\r\n          // モーションでの上書きがあった時にはまばたきは適用しない\r\n          if ((eyeBlinkFlags >> i) & 0x01) {\r\n            continue;\r\n          }\r\n\r\n          const v: number =\r\n            sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;\r\n\r\n          model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);\r\n        }\r\n      }\r\n\r\n      if (lipSyncValue != Number.MAX_VALUE) {\r\n        for (\r\n          let i = 0;\r\n          i < this._lipSyncParameterIds.getSize() && i < maxTargetSize;\r\n          ++i\r\n        ) {\r\n          const sourceValue: number = model.getParameterValueById(\r\n            this._lipSyncParameterIds.at(i)\r\n          );\r\n\r\n          // モーションでの上書きがあった時にはリップシンクは適用しない\r\n          if ((lipSyncFlags >> i) & 0x01) {\r\n            continue;\r\n          }\r\n\r\n          const v: number =\r\n            sourceValue + (lipSyncValue - sourceValue) * fadeWeight;\r\n\r\n          model.setParameterValueById(this._lipSyncParameterIds.at(i), v);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (\r\n      ;\r\n      c < this._motionData.curveCount &&\r\n      curves.at(c).type ==\r\n        CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\r\n      ++c\r\n    ) {\r\n      // Find parameter index.\r\n      parameterIndex = model.getParameterIndex(curves.at(c).id);\r\n\r\n      // Skip curve evaluation if no value in sink.\r\n      if (parameterIndex == -1) {\r\n        continue;\r\n      }\r\n\r\n      // Evaluate curve and apply value.\r\n      value = evaluateCurve(this._motionData, c, time);\r\n\r\n      model.setParameterValueByIndex(parameterIndex, value);\r\n    }\r\n\r\n    if (timeOffsetSeconds >= this._motionData.duration) {\r\n      if (this._isLoop) {\r\n        motionQueueEntry.setStartTime(userTimeSeconds); // 最初の状態へ\r\n        if (this._isLoopFadeIn) {\r\n          // ループ内でループ用フェードインが有効の時は、フェードイン設定し直し\r\n          motionQueueEntry.setFadeInStartTime(userTimeSeconds);\r\n        }\r\n      } else {\r\n        if (this._onFinishedMotion) {\r\n          this._onFinishedMotion(this);\r\n        }\r\n\r\n        motionQueueEntry.setIsFinished(true);\r\n      }\r\n    }\r\n    this._lastWeight = fadeWeight;\r\n  }\r\n\r\n  /**\r\n   * ループ情報の設定\r\n   * @param loop ループ情報\r\n   */\r\n  public setIsLoop(loop: boolean): void {\r\n    this._isLoop = loop;\r\n  }\r\n\r\n  /**\r\n   * ループ情報の取得\r\n   * @return true ループする\r\n   * @return false ループしない\r\n   */\r\n  public isLoop(): boolean {\r\n    return this._isLoop;\r\n  }\r\n\r\n  /**\r\n   * ループ時のフェードイン情報の設定\r\n   * @param loopFadeIn  ループ時のフェードイン情報\r\n   */\r\n  public setIsLoopFadeIn(loopFadeIn: boolean): void {\r\n    this._isLoopFadeIn = loopFadeIn;\r\n  }\r\n\r\n  /**\r\n   * ループ時のフェードイン情報の取得\r\n   *\r\n   * @return  true    する\r\n   * @return  false   しない\r\n   */\r\n  public isLoopFadeIn(): boolean {\r\n    return this._isLoopFadeIn;\r\n  }\r\n\r\n  /**\r\n   * モーションの長さを取得する。\r\n   *\r\n   * @return  モーションの長さ[秒]\r\n   */\r\n  public getDuration(): number {\r\n    return this._isLoop ? -1.0 : this._loopDurationSeconds;\r\n  }\r\n\r\n  /**\r\n   * モーションのループ時の長さを取得する。\r\n   *\r\n   * @return  モーションのループ時の長さ[秒]\r\n   */\r\n  public getLoopDuration(): number {\r\n    return this._loopDurationSeconds;\r\n  }\r\n\r\n  /**\r\n   * パラメータに対するフェードインの時間を設定する。\r\n   *\r\n   * @param parameterId     パラメータID\r\n   * @param value           フェードインにかかる時間[秒]\r\n   */\r\n  public setParameterFadeInTime(\r\n    parameterId: CubismIdHandle,\r\n    value: number\r\n  ): void {\r\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n      if (parameterId == curves.at(i).id) {\r\n        curves.at(i).fadeInTime = value;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パラメータに対するフェードアウトの時間の設定\r\n   * @param parameterId     パラメータID\r\n   * @param value           フェードアウトにかかる時間[秒]\r\n   */\r\n  public setParameterFadeOutTime(\r\n    parameterId: CubismIdHandle,\r\n    value: number\r\n  ): void {\r\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n      if (parameterId == curves.at(i).id) {\r\n        curves.at(i).fadeOutTime = value;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パラメータに対するフェードインの時間の取得\r\n   * @param    parameterId     パラメータID\r\n   * @return   フェードインにかかる時間[秒]\r\n   */\r\n  public getParameterFadeInTime(parameterId: CubismIdHandle): number {\r\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n      if (parameterId == curves.at(i).id) {\r\n        return curves.at(i).fadeInTime;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * パラメータに対するフェードアウトの時間を取得\r\n   *\r\n   * @param   parameterId     パラメータID\r\n   * @return   フェードアウトにかかる時間[秒]\r\n   */\r\n  public getParameterFadeOutTime(parameterId: CubismIdHandle): number {\r\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n      if (parameterId == curves.at(i).id) {\r\n        return curves.at(i).fadeOutTime;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * 自動エフェクトがかかっているパラメータIDリストの設定\r\n   * @param eyeBlinkParameterIds    自動まばたきがかかっているパラメータIDのリスト\r\n   * @param lipSyncParameterIds     リップシンクがかかっているパラメータIDのリスト\r\n   */\r\n  public setEffectIds(\r\n    eyeBlinkParameterIds: csmVector<CubismIdHandle>,\r\n    lipSyncParameterIds: csmVector<CubismIdHandle>\r\n  ): void {\r\n    this._eyeBlinkParameterIds = eyeBlinkParameterIds;\r\n    this._lipSyncParameterIds = lipSyncParameterIds;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._sourceFrameRate = 30.0;\r\n    this._loopDurationSeconds = -1.0;\r\n    this._isLoop = false; // trueから false へデフォルトを変更\r\n    this._isLoopFadeIn = true; // ループ時にフェードインが有効かどうかのフラグ\r\n    this._lastWeight = 0.0;\r\n    this._motionData = null;\r\n    this._modelCurveIdEyeBlink = null;\r\n    this._modelCurveIdLipSync = null;\r\n    this._modelCurveIdOpacity = null;\r\n    this._eyeBlinkParameterIds = null;\r\n    this._lipSyncParameterIds = null;\r\n    this._modelOpacity = 1.0;\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    this._motionData = void 0;\r\n    this._motionData = null;\r\n  }\r\n\r\n  /**\r\n   * motion3.jsonをパースする。\r\n   *\r\n   * @param motionJson  motion3.jsonが読み込まれているバッファ\r\n   * @param size        バッファのサイズ\r\n   */\r\n  public parse(motionJson: ArrayBuffer, size: number): void {\r\n    this._motionData = new CubismMotionData();\r\n\r\n    let json: CubismMotionJson = new CubismMotionJson(motionJson, size);\r\n\r\n    if (!json) {\r\n      json.release();\r\n      json = void 0;\r\n      return;\r\n    }\r\n\r\n    this._motionData.duration = json.getMotionDuration();\r\n    this._motionData.loop = json.isMotionLoop();\r\n    this._motionData.curveCount = json.getMotionCurveCount();\r\n    this._motionData.fps = json.getMotionFps();\r\n    this._motionData.eventCount = json.getEventCount();\r\n\r\n    const areBeziersRestructed: boolean = json.getEvaluationOptionFlag(\r\n      EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted\r\n    );\r\n\r\n    if (json.isExistMotionFadeInTime()) {\r\n      this._fadeInSeconds =\r\n        json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();\r\n    } else {\r\n      this._fadeInSeconds = 1.0;\r\n    }\r\n\r\n    if (json.isExistMotionFadeOutTime()) {\r\n      this._fadeOutSeconds =\r\n        json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();\r\n    } else {\r\n      this._fadeOutSeconds = 1.0;\r\n    }\r\n\r\n    this._motionData.curves.updateSize(\r\n      this._motionData.curveCount,\r\n      CubismMotionCurve,\r\n      true\r\n    );\r\n    this._motionData.segments.updateSize(\r\n      json.getMotionTotalSegmentCount(),\r\n      CubismMotionSegment,\r\n      true\r\n    );\r\n    this._motionData.points.updateSize(\r\n      json.getMotionTotalPointCount(),\r\n      CubismMotionPoint,\r\n      true\r\n    );\r\n    this._motionData.events.updateSize(\r\n      this._motionData.eventCount,\r\n      CubismMotionEvent,\r\n      true\r\n    );\r\n\r\n    let totalPointCount = 0;\r\n    let totalSegmentCount = 0;\r\n\r\n    // Curves\r\n    for (\r\n      let curveCount = 0;\r\n      curveCount < this._motionData.curveCount;\r\n      ++curveCount\r\n    ) {\r\n      if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {\r\n        this._motionData.curves.at(curveCount).type =\r\n          CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n      } else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {\r\n        this._motionData.curves.at(curveCount).type =\r\n          CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\r\n      } else if (\r\n        json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity\r\n      ) {\r\n        this._motionData.curves.at(curveCount).type =\r\n          CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\r\n      } else {\r\n        CubismLogWarning(\r\n          'Warning : Unable to get segment type from Curve! The number of \"CurveCount\" may be incorrect!'\r\n        );\r\n      }\r\n\r\n      this._motionData.curves.at(curveCount).id =\r\n        json.getMotionCurveId(curveCount);\r\n\r\n      this._motionData.curves.at(curveCount).baseSegmentIndex =\r\n        totalSegmentCount;\r\n\r\n      this._motionData.curves.at(curveCount).fadeInTime =\r\n        json.isExistMotionCurveFadeInTime(curveCount)\r\n          ? json.getMotionCurveFadeInTime(curveCount)\r\n          : -1.0;\r\n      this._motionData.curves.at(curveCount).fadeOutTime =\r\n        json.isExistMotionCurveFadeOutTime(curveCount)\r\n          ? json.getMotionCurveFadeOutTime(curveCount)\r\n          : -1.0;\r\n\r\n      // Segments\r\n      for (\r\n        let segmentPosition = 0;\r\n        segmentPosition < json.getMotionCurveSegmentCount(curveCount);\r\n\r\n      ) {\r\n        if (segmentPosition == 0) {\r\n          this._motionData.segments.at(totalSegmentCount).basePointIndex =\r\n            totalPointCount;\r\n\r\n          this._motionData.points.at(totalPointCount).time =\r\n            json.getMotionCurveSegment(curveCount, segmentPosition);\r\n          this._motionData.points.at(totalPointCount).value =\r\n            json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n\r\n          totalPointCount += 1;\r\n          segmentPosition += 2;\r\n        } else {\r\n          this._motionData.segments.at(totalSegmentCount).basePointIndex =\r\n            totalPointCount - 1;\r\n        }\r\n\r\n        const segment: number = json.getMotionCurveSegment(\r\n          curveCount,\r\n          segmentPosition\r\n        );\r\n\r\n        const segmentType: CubismMotionSegmentType = segment;\r\n        switch (segmentType) {\r\n          case CubismMotionSegmentType.CubismMotionSegmentType_Linear: {\r\n            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n              CubismMotionSegmentType.CubismMotionSegmentType_Linear;\r\n            this._motionData.segments.at(totalSegmentCount).evaluate =\r\n              linearEvaluate;\r\n\r\n            this._motionData.points.at(totalPointCount).time =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n            this._motionData.points.at(totalPointCount).value =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n\r\n            totalPointCount += 1;\r\n            segmentPosition += 3;\r\n\r\n            break;\r\n          }\r\n          case CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {\r\n            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n              CubismMotionSegmentType.CubismMotionSegmentType_Bezier;\r\n\r\n            if (areBeziersRestructed || UseOldBeziersCurveMotion) {\r\n              this._motionData.segments.at(totalSegmentCount).evaluate =\r\n                bezierEvaluate;\r\n            } else {\r\n              this._motionData.segments.at(totalSegmentCount).evaluate =\r\n                bezierEvaluateCardanoInterpretation;\r\n            }\r\n\r\n            this._motionData.points.at(totalPointCount).time =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n            this._motionData.points.at(totalPointCount).value =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n\r\n            this._motionData.points.at(totalPointCount + 1).time =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 3);\r\n            this._motionData.points.at(totalPointCount + 1).value =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 4);\r\n\r\n            this._motionData.points.at(totalPointCount + 2).time =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 5);\r\n            this._motionData.points.at(totalPointCount + 2).value =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 6);\r\n\r\n            totalPointCount += 3;\r\n            segmentPosition += 7;\r\n\r\n            break;\r\n          }\r\n\r\n          case CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {\r\n            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n              CubismMotionSegmentType.CubismMotionSegmentType_Stepped;\r\n            this._motionData.segments.at(totalSegmentCount).evaluate =\r\n              steppedEvaluate;\r\n\r\n            this._motionData.points.at(totalPointCount).time =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n            this._motionData.points.at(totalPointCount).value =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n\r\n            totalPointCount += 1;\r\n            segmentPosition += 3;\r\n\r\n            break;\r\n          }\r\n\r\n          case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {\r\n            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n              CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;\r\n            this._motionData.segments.at(totalSegmentCount).evaluate =\r\n              inverseSteppedEvaluate;\r\n\r\n            this._motionData.points.at(totalPointCount).time =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n            this._motionData.points.at(totalPointCount).value =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n\r\n            totalPointCount += 1;\r\n            segmentPosition += 3;\r\n\r\n            break;\r\n          }\r\n          default: {\r\n            CSM_ASSERT(0);\r\n            break;\r\n          }\r\n        }\r\n\r\n        ++this._motionData.curves.at(curveCount).segmentCount;\r\n        ++totalSegmentCount;\r\n      }\r\n    }\r\n\r\n    for (\r\n      let userdatacount = 0;\r\n      userdatacount < json.getEventCount();\r\n      ++userdatacount\r\n    ) {\r\n      this._motionData.events.at(userdatacount).fireTime =\r\n        json.getEventTime(userdatacount);\r\n      this._motionData.events.at(userdatacount).value =\r\n        json.getEventValue(userdatacount);\r\n    }\r\n\r\n    json.release();\r\n    json = void 0;\r\n    json = null;\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータ更新\r\n   *\r\n   * イベント発火のチェック。\r\n   * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\r\n   *\r\n   * @param beforeCheckTimeSeconds   前回のイベントチェック時間[秒]\r\n   * @param motionTimeSeconds        今回の再生時間[秒]\r\n   */\r\n  public getFiredEvent(\r\n    beforeCheckTimeSeconds: number,\r\n    motionTimeSeconds: number\r\n  ): csmVector<csmString> {\r\n    this._firedEventValues.updateSize(0);\r\n\r\n    // イベントの発火チェック\r\n    for (let u = 0; u < this._motionData.eventCount; ++u) {\r\n      if (\r\n        this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds &&\r\n        this._motionData.events.at(u).fireTime <= motionTimeSeconds\r\n      ) {\r\n        this._firedEventValues.pushBack(\r\n          new csmString(this._motionData.events.at(u).value.s)\r\n        );\r\n      }\r\n    }\r\n\r\n    return this._firedEventValues;\r\n  }\r\n\r\n  /**\r\n   * 透明度のカーブが存在するかどうかを確認する\r\n   *\r\n   * @returns true  -> キーが存在する\r\n   *          false -> キーが存在しない\r\n   */\r\n  public isExistModelOpacity(): boolean {\r\n    for (let i = 0; i < this._motionData.curveCount; i++) {\r\n      const curve: CubismMotionCurve = this._motionData.curves.at(i);\r\n\r\n      if (curve.type != CubismMotionCurveTarget.CubismMotionCurveTarget_Model) {\r\n        continue;\r\n      }\r\n\r\n      if (curve.id.getString().s.localeCompare(IdNameOpacity) == 0) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 透明度のカーブのインデックスを返す\r\n   *\r\n   * @returns success:透明度のカーブのインデックス\r\n   */\r\n  public getModelOpacityIndex(): number {\r\n    if (this.isExistModelOpacity()) {\r\n      for (let i = 0; i < this._motionData.curveCount; i++) {\r\n        const curve: CubismMotionCurve = this._motionData.curves.at(i);\r\n\r\n        if (\r\n          curve.type != CubismMotionCurveTarget.CubismMotionCurveTarget_Model\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        if (curve.id.getString().s.localeCompare(IdNameOpacity) == 0) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * 透明度のIdを返す\r\n   *\r\n   * @param index モーションカーブのインデックス\r\n   * @returns success:透明度のカーブのインデックス\r\n   */\r\n  public getModelOpacityId(index: number): CubismIdHandle {\r\n    if (index != -1) {\r\n      const curve: CubismMotionCurve = this._motionData.curves.at(index);\r\n\r\n      if (curve.type == CubismMotionCurveTarget.CubismMotionCurveTarget_Model) {\r\n        if (curve.id.getString().s.localeCompare(IdNameOpacity) == 0) {\r\n          return CubismFramework.getIdManager().getId(curve.id.getString().s);\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 現在時間の透明度の値を返す\r\n   *\r\n   * @returns success:モーションの当該時間におけるOpacityの値\r\n   */\r\n  public getModelOpacityValue(): number {\r\n    return this._modelOpacity;\r\n  }\r\n\r\n  public _sourceFrameRate: number; // ロードしたファイルのFPS。記述が無ければデフォルト値15fpsとなる\r\n  public _loopDurationSeconds: number; // mtnファイルで定義される一連のモーションの長さ\r\n  public _isLoop: boolean; // ループするか?\r\n  public _isLoopFadeIn: boolean; // ループ時にフェードインが有効かどうかのフラグ。初期値では有効。\r\n  public _lastWeight: number; // 最後に設定された重み\r\n\r\n  public _motionData: CubismMotionData; // 実際のモーションデータ本体\r\n\r\n  public _eyeBlinkParameterIds: csmVector<CubismIdHandle>; // 自動まばたきを適用するパラメータIDハンドルのリスト。  モデル（モデルセッティング）とパラメータを対応付ける。\r\n  public _lipSyncParameterIds: csmVector<CubismIdHandle>; // リップシンクを適用するパラメータIDハンドルのリスト。  モデル（モデルセッティング）とパラメータを対応付ける。\r\n\r\n  public _modelCurveIdEyeBlink: CubismIdHandle; // モデルが持つ自動まばたき用パラメータIDのハンドル。  モデルとモーションを対応付ける。\r\n  public _modelCurveIdLipSync: CubismIdHandle; // モデルが持つリップシンク用パラメータIDのハンドル。  モデルとモーションを対応付ける。\r\n  public _modelCurveIdOpacity: CubismIdHandle; // モデルが持つ不透明度用パラメータIDのハンドル。  モデルとモーションを対応付ける。\r\n\r\n  public _modelOpacity: number; // モーションから取得した不透明度\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmotion';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMotion = $.CubismMotion;\r\n  export type CubismMotion = $.CubismMotion;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { ACubismMotion } from './acubismmotion';\r\nimport {\r\n  CubismMotionQueueEntryHandle,\r\n  CubismMotionQueueManager\r\n} from './cubismmotionqueuemanager';\r\n\r\n/**\r\n * モーションの管理\r\n *\r\n * モーションの管理を行うクラス\r\n */\r\nexport class CubismMotionManager extends CubismMotionQueueManager {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._currentPriority = 0;\r\n    this._reservePriority = 0;\r\n  }\r\n\r\n  /**\r\n   * 再生中のモーションの優先度の取得\r\n   * @return  モーションの優先度\r\n   */\r\n  public getCurrentPriority(): number {\r\n    return this._currentPriority;\r\n  }\r\n\r\n  /**\r\n   * 予約中のモーションの優先度を取得する。\r\n   * @return  モーションの優先度\r\n   */\r\n  public getReservePriority(): number {\r\n    return this._reservePriority;\r\n  }\r\n\r\n  /**\r\n   * 予約中のモーションの優先度を設定する。\r\n   * @param   val     優先度\r\n   */\r\n  public setReservePriority(val: number): void {\r\n    this._reservePriority = val;\r\n  }\r\n\r\n  /**\r\n   * 優先度を設定してモーションを開始する。\r\n   *\r\n   * @param motion          モーション\r\n   * @param autoDelete      再生が狩猟したモーションのインスタンスを削除するならtrue\r\n   * @param priority        優先度\r\n   * @return                開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」\r\n   */\r\n  public startMotionPriority(\r\n    motion: ACubismMotion,\r\n    autoDelete: boolean,\r\n    priority: number\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (priority == this._reservePriority) {\r\n      this._reservePriority = 0; // 予約を解除\r\n    }\r\n\r\n    this._currentPriority = priority; // 再生中モーションの優先度を設定\r\n\r\n    return super.startMotion(motion, autoDelete);\r\n  }\r\n\r\n  /**\r\n   * モーションを更新して、モデルにパラメータ値を反映する。\r\n   *\r\n   * @param model   対象のモデル\r\n   * @param deltaTimeSeconds    デルタ時間[秒]\r\n   * @return  true    更新されている\r\n   * @return  false   更新されていない\r\n   */\r\n  public updateMotion(model: CubismModel, deltaTimeSeconds: number): boolean {\r\n    this._userTimeSeconds += deltaTimeSeconds;\r\n\r\n    const updated: boolean = super.doUpdateMotion(model, this._userTimeSeconds);\r\n\r\n    if (this.isFinished()) {\r\n      this._currentPriority = 0; // 再生中のモーションの優先度を解除\r\n    }\r\n\r\n    return updated;\r\n  }\r\n\r\n  /**\r\n   * モーションを予約する。\r\n   *\r\n   * @param   priority    優先度\r\n   * @return  true    予約できた\r\n   * @return  false   予約できなかった\r\n   */\r\n  public reserveMotion(priority: number): boolean {\r\n    if (\r\n      priority <= this._reservePriority ||\r\n      priority <= this._currentPriority\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    this._reservePriority = priority;\r\n\r\n    return true;\r\n  }\r\n\r\n  _currentPriority: number; // 現在再生中のモーションの優先度\r\n  _reservePriority: number; // 再生予定のモーションの優先度。再生中は0になる。モーションファイルを別スレッドで読み込むときの機能。\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmotionmanager';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMotionManager = $.CubismMotionManager;\r\n  export type CubismMotionManager = $.CubismMotionManager;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismVector2 } from '../math/cubismvector2';\r\nimport { csmVector } from '../type/csmvector';\r\n\r\n/**\r\n * 물리적 운영의 응용 대상 유형\r\n */\r\nexport enum CubismPhysicsTargetType {\r\n  CubismPhysicsTargetType_Parameter // パラメータに対して適用\r\n}\r\n\r\n/**\r\n * 물리적 운영 입력 유형\r\n */\r\nexport enum CubismPhysicsSource {\r\n  CubismPhysicsSource_X, // X軸の位置から\r\n  CubismPhysicsSource_Y, // Y軸の位置から\r\n  CubismPhysicsSource_Angle // 角度から\r\n}\r\n\r\n/**\r\n * @brief 物理演算で使用する外部の力\r\n *\r\n * 物理演算で使用する外部の力。\r\n */\r\nexport class PhysicsJsonEffectiveForces {\r\n  constructor() {\r\n    this.gravity = new CubismVector2(0, 0);\r\n    this.wind = new CubismVector2(0, 0);\r\n  }\r\n  gravity: CubismVector2; // 重力\r\n  wind: CubismVector2; // 風\r\n}\r\n\r\n/**\r\n * 物理演算のパラメータ情報\r\n */\r\nexport class CubismPhysicsParameter {\r\n  id: CubismIdHandle; // パラメータ\r\n  targetType: CubismPhysicsTargetType; // 適用先の種類\r\n}\r\n\r\n/**\r\n * 물리적 운영의 정규화 정보\r\n */\r\nexport class CubismPhysicsNormalization {\r\n  minimum: number; // 最大値\r\n  maximum: number; // 最小値\r\n  defalut: number; // デフォルト値\r\n}\r\n\r\n/**\r\n * 物理演算の演算委使用する物理点の情報\r\n */\r\nexport class CubismPhysicsParticle {\r\n  constructor() {\r\n    this.initialPosition = new CubismVector2(0, 0);\r\n    this.position = new CubismVector2(0, 0);\r\n    this.lastPosition = new CubismVector2(0, 0);\r\n    this.lastGravity = new CubismVector2(0, 0);\r\n    this.force = new CubismVector2(0, 0);\r\n    this.velocity = new CubismVector2(0, 0);\r\n  }\r\n\r\n  initialPosition: CubismVector2; // 初期位置\r\n  mobility: number; // 動きやすさ\r\n  delay: number; // 遅れ\r\n  acceleration: number; // 加速度\r\n  radius: number; // 距離\r\n  position: CubismVector2; // 現在の位置\r\n  lastPosition: CubismVector2; // 最後の位置\r\n  lastGravity: CubismVector2; // 最後の重力\r\n  force: CubismVector2; // 現在かかっている力\r\n  velocity: CubismVector2; // 現在の速度\r\n}\r\n\r\n/**\r\n * 物理演算の物理点の管理\r\n */\r\nexport class CubismPhysicsSubRig {\r\n  constructor() {\r\n    this.normalizationPosition = new CubismPhysicsNormalization();\r\n    this.normalizationAngle = new CubismPhysicsNormalization();\r\n  }\r\n  inputCount: number; // 入力の個数\r\n  outputCount: number; // 出力の個数\r\n  particleCount: number; // 物理点の個数\r\n  baseInputIndex: number; // 入力の最初のインデックス\r\n  baseOutputIndex: number; // 出力の最初のインデックス\r\n  baseParticleIndex: number; // 物理点の最初のインデックス\r\n  normalizationPosition: CubismPhysicsNormalization; // 正規化された位置\r\n  normalizationAngle: CubismPhysicsNormalization; // 正規化された角度\r\n}\r\n\r\n/**\r\n * 正規化されたパラメータの取得関数の宣言\r\n * @param targetTranslation     // 演算結果の移動値\r\n * @param targetAngle           // 演算結果の角度\r\n * @param value                 // パラメータの値\r\n * @param parameterMinimunValue // パラメータの最小値\r\n * @param parameterMaximumValue // パラメータの最大値\r\n * @param parameterDefaultValue // パラメータのデフォルト値\r\n * @param normalizationPosition // 正規化された位置\r\n * @param normalizationAngle    // 正規化された角度\r\n * @param isInverted            // 値が反転されているか？\r\n * @param weight                // 重み\r\n */\r\nexport interface normalizedPhysicsParameterValueGetter {\r\n  (\r\n    targetTranslation: CubismVector2,\r\n    targetAngle: { angle: number },\r\n    value: number,\r\n    parameterMinimunValue: number,\r\n    parameterMaximumValue: number,\r\n    parameterDefaultValue: number,\r\n    normalizationPosition: CubismPhysicsNormalization,\r\n    normalizationAngle: CubismPhysicsNormalization,\r\n    isInverted: boolean,\r\n    weight: number\r\n  ): void;\r\n}\r\n\r\n/**\r\n * 物理演算の値の取得関数の宣言\r\n * @param translation 移動値\r\n * @param particles 物理点のリスト\r\n * @param isInverted 値が反映されているか\r\n * @param parentGravity 重力\r\n * @return 値\r\n */\r\nexport interface physicsValueGetter {\r\n  (\r\n    translation: CubismVector2,\r\n    particles: CubismPhysicsParticle[],\r\n    particleIndex: number,\r\n    isInverted: boolean,\r\n    parentGravity: CubismVector2\r\n  ): number;\r\n}\r\n\r\n/**\r\n * 物理演算のスケールの取得関数の宣言\r\n * @param translationScale 移動値のスケール\r\n * @param angleScale    角度のスケール\r\n * @return スケール値\r\n */\r\nexport interface physicsScaleGetter {\r\n  (translationScale: CubismVector2, angleScale: number): number;\r\n}\r\n\r\n/**\r\n * 物理演算の入力情報\r\n */\r\nexport class CubismPhysicsInput {\r\n  constructor() {\r\n    this.source = new CubismPhysicsParameter();\r\n  }\r\n  source: CubismPhysicsParameter; // 入力元のパラメータ\r\n  sourceParameterIndex: number; // 入力元のパラメータのインデックス\r\n  weight: number; // 重み\r\n  type: number; // 入力の種類\r\n  reflect: boolean; // 値が反転されているかどうか\r\n  getNormalizedParameterValue: normalizedPhysicsParameterValueGetter; // 正規化されたパラメータ値の取得関数\r\n}\r\n\r\n/**\r\n * @brief 物理演算の出力情報\r\n *\r\n * 物理演算の出力情報。\r\n */\r\nexport class CubismPhysicsOutput {\r\n  constructor() {\r\n    this.destination = new CubismPhysicsParameter();\r\n    this.translationScale = new CubismVector2(0, 0);\r\n  }\r\n\r\n  destination: CubismPhysicsParameter; // 出力先のパラメータ\r\n  destinationParameterIndex: number; // 出力先のパラメータのインデックス\r\n  vertexIndex: number; // 振り子のインデックス\r\n  translationScale: CubismVector2; // 移動値のスケール\r\n  angleScale: number; // 角度のスケール\r\n  weight: number; // 重み\r\n  type: CubismPhysicsSource; // 出力の種類\r\n  reflect: boolean; // 値が反転されているかどうか\r\n  valueBelowMinimum: number; // 最小値を下回った時の値\r\n  valueExceededMaximum: number; // 最大値をこえた時の値\r\n  getValue: physicsValueGetter; // 物理演算の値の取得関数\r\n  getScale: physicsScaleGetter; // 物理演算のスケール値の取得関数\r\n}\r\n\r\n/**\r\n * @brief 物理演算のデータ\r\n *\r\n * 物理演算のデータ。\r\n */\r\nexport class CubismPhysicsRig {\r\n  constructor() {\r\n    this.settings = new csmVector<CubismPhysicsSubRig>();\r\n    this.inputs = new csmVector<CubismPhysicsInput>();\r\n    this.outputs = new csmVector<CubismPhysicsOutput>();\r\n    this.particles = new csmVector<CubismPhysicsParticle>();\r\n    this.gravity = new CubismVector2(0, 0);\r\n    this.wind = new CubismVector2(0, 0);\r\n    this.fps = 0.0;\r\n  }\r\n\r\n  subRigCount: number; // 物理演算の物理点の個数\r\n  settings: csmVector<CubismPhysicsSubRig>; // 物理演算の物理点の管理のリスト\r\n  inputs: csmVector<CubismPhysicsInput>; // 物理演算の入力のリスト\r\n  outputs: csmVector<CubismPhysicsOutput>; // 物理演算の出力のリスト\r\n  particles: csmVector<CubismPhysicsParticle>; // 物理演算の物理点のリスト\r\n  gravity: CubismVector2; // 重力\r\n  wind: CubismVector2; // 風\r\n  fps: number; //物理演算動作FPS\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismphysicsinternal';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismPhysicsInput = $.CubismPhysicsInput;\r\n  export type CubismPhysicsInput = $.CubismPhysicsInput;\r\n  export const CubismPhysicsNormalization = $.CubismPhysicsNormalization;\r\n  export type CubismPhysicsNormalization = $.CubismPhysicsNormalization;\r\n  export const CubismPhysicsOutput = $.CubismPhysicsOutput;\r\n  export type CubismPhysicsOutput = $.CubismPhysicsOutput;\r\n  export const CubismPhysicsParameter = $.CubismPhysicsParameter;\r\n  export type CubismPhysicsParameter = $.CubismPhysicsParameter;\r\n  export const CubismPhysicsParticle = $.CubismPhysicsParticle;\r\n  export type CubismPhysicsParticle = $.CubismPhysicsParticle;\r\n  export const CubismPhysicsRig = $.CubismPhysicsRig;\r\n  export type CubismPhysicsRig = $.CubismPhysicsRig;\r\n  export const CubismPhysicsSource = $.CubismPhysicsSource;\r\n  export type CubismPhysicsSource = $.CubismPhysicsSource;\r\n  export const CubismPhysicsSubRig = $.CubismPhysicsSubRig;\r\n  export type CubismPhysicsSubRig = $.CubismPhysicsSubRig;\r\n  export const CubismPhysicsTargetType = $.CubismPhysicsTargetType;\r\n  export type CubismPhysicsTargetType = $.CubismPhysicsTargetType;\r\n  export const PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;\r\n  export type PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;\r\n  export type normalizedPhysicsParameterValueGetter =\r\n    $.normalizedPhysicsParameterValueGetter;\r\n  export type physicsScaleGetter = $.physicsScaleGetter;\r\n  export type physicsValueGetter = $.physicsValueGetter;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { CubismVector2 } from '../math/cubismvector2';\r\nimport { CubismJson } from '../utils/cubismjson';\r\n\r\n// JSON keys\r\nconst Position = 'Position';\r\nconst X = 'X';\r\nconst Y = 'Y';\r\nconst Angle = 'Angle';\r\nconst Type = 'Type';\r\nconst Id = 'Id';\r\n\r\n// Meta\r\nconst Meta = 'Meta';\r\nconst EffectiveForces = 'EffectiveForces';\r\nconst TotalInputCount = 'TotalInputCount';\r\nconst TotalOutputCount = 'TotalOutputCount';\r\nconst PhysicsSettingCount = 'PhysicsSettingCount';\r\nconst Gravity = 'Gravity';\r\nconst Wind = 'Wind';\r\nconst VertexCount = 'VertexCount';\r\nconst Fps = 'Fps';\r\n\r\n// PhysicsSettings\r\nconst PhysicsSettings = 'PhysicsSettings';\r\nconst Normalization = 'Normalization';\r\nconst Minimum = 'Minimum';\r\nconst Maximum = 'Maximum';\r\nconst Default = 'Default';\r\nconst Reflect = 'Reflect';\r\nconst Weight = 'Weight';\r\n\r\n// Input\r\nconst Input = 'Input';\r\nconst Source = 'Source';\r\n\r\n// Output\r\nconst Output = 'Output';\r\nconst Scale = 'Scale';\r\nconst VertexIndex = 'VertexIndex';\r\nconst Destination = 'Destination';\r\n\r\n// Particle\r\nconst Vertices = 'Vertices';\r\nconst Mobility = 'Mobility';\r\nconst Delay = 'Delay';\r\nconst Radius = 'Radius';\r\nconst Acceleration = 'Acceleration';\r\n\r\n/**\r\n * physics3.jsonのコンテナ。\r\n */\r\nexport class CubismPhysicsJson {\r\n  /**\r\n   * コンストラクタ\r\n   * @param buffer physics3.jsonが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   */\r\n  public constructor(buffer: ArrayBuffer, size: number) {\r\n    this._json = CubismJson.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    CubismJson.delete(this._json);\r\n  }\r\n\r\n  /**\r\n   * 重力の取得\r\n   * @return 重力\r\n   */\r\n  public getGravity(): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0, 0);\r\n    ret.x = this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(EffectiveForces)\r\n      .getValueByString(Gravity)\r\n      .getValueByString(X)\r\n      .toFloat();\r\n    ret.y = this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(EffectiveForces)\r\n      .getValueByString(Gravity)\r\n      .getValueByString(Y)\r\n      .toFloat();\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * 風の取得\r\n   * @return 風\r\n   */\r\n  public getWind(): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0, 0);\r\n    ret.x = this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(EffectiveForces)\r\n      .getValueByString(Wind)\r\n      .getValueByString(X)\r\n      .toFloat();\r\n    ret.y = this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(EffectiveForces)\r\n      .getValueByString(Wind)\r\n      .getValueByString(Y)\r\n      .toFloat();\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * 物理演算設定FPSの取得\r\n   * @return 物理演算設定FPS\r\n   */\r\n  public getFps(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(Fps)\r\n      .toFloat(0.0);\r\n  }\r\n\r\n  /**\r\n   * 物理店の管理の個数の取得\r\n   * @return 物理店の管理の個数\r\n   */\r\n  public getSubRigCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(PhysicsSettingCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * 入力の総合計の取得\r\n   * @return 入力の総合計\r\n   */\r\n  public getTotalInputCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(TotalInputCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * 出力の総合計の取得\r\n   * @return 出力の総合計\r\n   */\r\n  public getTotalOutputCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(TotalOutputCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * 物理点の個数の取得\r\n   * @return 物理点の個数\r\n   */\r\n  public getVertexCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(VertexCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * 正規化された位置の最小値の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 正規化された位置の最小値\r\n   */\r\n  public getNormalizationPositionMinimumValue(\r\n    physicsSettingIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Normalization)\r\n      .getValueByString(Position)\r\n      .getValueByString(Minimum)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 正規化された位置の最大値の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 正規化された位置の最大値\r\n   */\r\n  public getNormalizationPositionMaximumValue(\r\n    physicsSettingIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Normalization)\r\n      .getValueByString(Position)\r\n      .getValueByString(Maximum)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 正規化された位置のデフォルト値の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 正規化された位置のデフォルト値\r\n   */\r\n  public getNormalizationPositionDefaultValue(\r\n    physicsSettingIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Normalization)\r\n      .getValueByString(Position)\r\n      .getValueByString(Default)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 正規化された角度の最小値の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 正規化された角度の最小値\r\n   */\r\n  public getNormalizationAngleMinimumValue(\r\n    physicsSettingIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Normalization)\r\n      .getValueByString(Angle)\r\n      .getValueByString(Minimum)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 正規化された角度の最大値の取得\r\n   * @param physicsSettingIndex\r\n   * @return 正規化された角度の最大値\r\n   */\r\n  public getNormalizationAngleMaximumValue(\r\n    physicsSettingIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Normalization)\r\n      .getValueByString(Angle)\r\n      .getValueByString(Maximum)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 正規化された角度のデフォルト値の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 正規化された角度のデフォルト値\r\n   */\r\n  public getNormalizationAngleDefaultValue(\r\n    physicsSettingIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Normalization)\r\n      .getValueByString(Angle)\r\n      .getValueByString(Default)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 入力の個数の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 入力の個数\r\n   */\r\n  public getInputCount(physicsSettingIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Input)\r\n      .getVector()\r\n      .getSize();\r\n  }\r\n\r\n  /**\r\n   * 入力の重みの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param inputIndex 入力のインデックス\r\n   * @return 入力の重み\r\n   */\r\n  public getInputWeight(\r\n    physicsSettingIndex: number,\r\n    inputIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Input)\r\n      .getValueByIndex(inputIndex)\r\n      .getValueByString(Weight)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 入力の反転の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param inputIndex 入力のインデックス\r\n   * @return 入力の反転\r\n   */\r\n  public getInputReflect(\r\n    physicsSettingIndex: number,\r\n    inputIndex: number\r\n  ): boolean {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Input)\r\n      .getValueByIndex(inputIndex)\r\n      .getValueByString(Reflect)\r\n      .toBoolean();\r\n  }\r\n\r\n  /**\r\n   * 入力の種類の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param inputIndex 入力のインデックス\r\n   * @return 入力の種類\r\n   */\r\n  public getInputType(physicsSettingIndex: number, inputIndex: number): string {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Input)\r\n      .getValueByIndex(inputIndex)\r\n      .getValueByString(Type)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * 入力元のIDの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param inputIndex 入力のインデックス\r\n   * @return 入力元のID\r\n   */\r\n  public getInputSourceId(\r\n    physicsSettingIndex: number,\r\n    inputIndex: number\r\n  ): CubismIdHandle {\r\n    return CubismFramework.getIdManager().getId(\r\n      this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Input)\r\n        .getValueByIndex(inputIndex)\r\n        .getValueByString(Source)\r\n        .getValueByString(Id)\r\n        .getRawString()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 出力の個数の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 出力の個数\r\n   */\r\n  public getOutputCount(physicsSettingIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Output)\r\n      .getVector()\r\n      .getSize();\r\n  }\r\n\r\n  /**\r\n   * 出力の物理点のインデックスの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param outputIndex 出力のインデックス\r\n   * @return 出力の物理点のインデックス\r\n   */\r\n  public getOutputVertexIndex(\r\n    physicsSettingIndex: number,\r\n    outputIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Output)\r\n      .getValueByIndex(outputIndex)\r\n      .getValueByString(VertexIndex)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * 出力の角度のスケールを取得する\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param outputIndex 出力のインデックス\r\n   * @return 出力の角度のスケール\r\n   */\r\n  public getOutputAngleScale(\r\n    physicsSettingIndex: number,\r\n    outputIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Output)\r\n      .getValueByIndex(outputIndex)\r\n      .getValueByString(Scale)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 出力の重みの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param outputIndex 出力のインデックス\r\n   * @return 出力の重み\r\n   */\r\n  public getOutputWeight(\r\n    physicsSettingIndex: number,\r\n    outputIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Output)\r\n      .getValueByIndex(outputIndex)\r\n      .getValueByString(Weight)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 出力先のIDの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param outputIndex 出力のインデックス\r\n   * @return 出力先のID\r\n   */\r\n  public getOutputDestinationId(\r\n    physicsSettingIndex: number,\r\n    outputIndex: number\r\n  ): CubismIdHandle {\r\n    return CubismFramework.getIdManager().getId(\r\n      this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Output)\r\n        .getValueByIndex(outputIndex)\r\n        .getValueByString(Destination)\r\n        .getValueByString(Id)\r\n        .getRawString()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 出力の種類の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param outputIndex 出力のインデックス\r\n   * @return 出力の種類\r\n   */\r\n  public getOutputType(\r\n    physicsSettingIndex: number,\r\n    outputIndex: number\r\n  ): string {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Output)\r\n      .getValueByIndex(outputIndex)\r\n      .getValueByString(Type)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * 出力の反転の取得\r\n   * @param physicsSettingIndex 物理演算のインデックス\r\n   * @param outputIndex 出力のインデックス\r\n   * @return 出力の反転\r\n   */\r\n  public getOutputReflect(\r\n    physicsSettingIndex: number,\r\n    outputIndex: number\r\n  ): boolean {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Output)\r\n      .getValueByIndex(outputIndex)\r\n      .getValueByString(Reflect)\r\n      .toBoolean();\r\n  }\r\n\r\n  /**\r\n   * 物理点の個数の取得\r\n   * @param physicsSettingIndex 物理演算男設定のインデックス\r\n   * @return 物理点の個数\r\n   */\r\n  public getParticleCount(physicsSettingIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getVector()\r\n      .getSize();\r\n  }\r\n\r\n  /**\r\n   * 物理点の動きやすさの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param vertexIndex 物理点のインデックス\r\n   * @return 物理点の動きやすさ\r\n   */\r\n  public getParticleMobility(\r\n    physicsSettingIndex: number,\r\n    vertexIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getValueByIndex(vertexIndex)\r\n      .getValueByString(Mobility)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 物理点の遅れの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param vertexIndex 物理点のインデックス\r\n   * @return 物理点の遅れ\r\n   */\r\n  public getParticleDelay(\r\n    physicsSettingIndex: number,\r\n    vertexIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getValueByIndex(vertexIndex)\r\n      .getValueByString(Delay)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 物理点の加速度の取得\r\n   * @param physicsSettingIndex 物理演算の設定\r\n   * @param vertexIndex 物理点のインデックス\r\n   * @return 物理点の加速度\r\n   */\r\n  public getParticleAcceleration(\r\n    physicsSettingIndex: number,\r\n    vertexIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getValueByIndex(vertexIndex)\r\n      .getValueByString(Acceleration)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 物理点の距離の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param vertexIndex 物理点のインデックス\r\n   * @return 物理点の距離\r\n   */\r\n  public getParticleRadius(\r\n    physicsSettingIndex: number,\r\n    vertexIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getValueByIndex(vertexIndex)\r\n      .getValueByString(Radius)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 物理点の位置の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param vertexInde 物理点のインデックス\r\n   * @return 物理点の位置\r\n   */\r\n  public getParticlePosition(\r\n    physicsSettingIndex: number,\r\n    vertexIndex: number\r\n  ): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0, 0);\r\n    ret.x = this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getValueByIndex(vertexIndex)\r\n      .getValueByString(Position)\r\n      .getValueByString(X)\r\n      .toFloat();\r\n    ret.y = this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getValueByIndex(vertexIndex)\r\n      .getValueByString(Position)\r\n      .getValueByString(Y)\r\n      .toFloat();\r\n    return ret;\r\n  }\r\n\r\n  _json: CubismJson; // physics3.jsonデータ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismphysicsjson';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismPhysicsJson = $.CubismPhysicsJson;\r\n  export type CubismPhysicsJson = $.CubismPhysicsJson;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMath } from '../math/cubismmath';\r\nimport { CubismVector2 } from '../math/cubismvector2';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport {\r\n  CubismPhysicsInput,\r\n  CubismPhysicsNormalization,\r\n  CubismPhysicsOutput,\r\n  CubismPhysicsParticle,\r\n  CubismPhysicsRig,\r\n  CubismPhysicsSource,\r\n  CubismPhysicsSubRig,\r\n  CubismPhysicsTargetType\r\n} from './cubismphysicsinternal';\r\nimport { CubismPhysicsJson } from './cubismphysicsjson';\r\n\r\n// physics types tags.\r\nconst PhysicsTypeTagX = 'X';\r\nconst PhysicsTypeTagY = 'Y';\r\nconst PhysicsTypeTagAngle = 'Angle';\r\n\r\n// Constant of air resistance.\r\nconst AirResistance = 5.0;\r\n\r\n// Constant of maximum weight of input and output ratio.\r\nconst MaximumWeight = 100.0;\r\n\r\n// Constant of threshold of movement.\r\nconst MovementThreshold = 0.001;\r\n\r\n// Constant of maximum allowed delta time\r\nconst MaxDeltaTime = 5.0;\r\n\r\n/**\r\n * 物理演算クラス\r\n */\r\nexport class CubismPhysics {\r\n  /**\r\n   * インスタンスの作成\r\n   * @param buffer    physics3.jsonが読み込まれているバッファ\r\n   * @param size      バッファのサイズ\r\n   * @return 作成されたインスタンス\r\n   */\r\n  public static create(buffer: ArrayBuffer, size: number): CubismPhysics {\r\n    const ret: CubismPhysics = new CubismPhysics();\r\n\r\n    ret.parse(buffer, size);\r\n    ret._physicsRig.gravity.y = 0;\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * インスタンスを破棄する\r\n   * @param physics 破棄するインスタンス\r\n   */\r\n  public static delete(physics: CubismPhysics): void {\r\n    if (physics != null) {\r\n      physics.release();\r\n      physics = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * physics3.jsonをパースする。\r\n   * @param physicsJson physics3.jsonが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   */\r\n  public parse(physicsJson: ArrayBuffer, size: number): void {\r\n    this._physicsRig = new CubismPhysicsRig();\r\n\r\n    let json: CubismPhysicsJson = new CubismPhysicsJson(physicsJson, size);\r\n\r\n    this._physicsRig.gravity = json.getGravity();\r\n    this._physicsRig.wind = json.getWind();\r\n    this._physicsRig.subRigCount = json.getSubRigCount();\r\n\r\n    this._physicsRig.fps = json.getFps();\r\n\r\n    this._physicsRig.settings.updateSize(\r\n      this._physicsRig.subRigCount,\r\n      CubismPhysicsSubRig,\r\n      true\r\n    );\r\n    this._physicsRig.inputs.updateSize(\r\n      json.getTotalInputCount(),\r\n      CubismPhysicsInput,\r\n      true\r\n    );\r\n    this._physicsRig.outputs.updateSize(\r\n      json.getTotalOutputCount(),\r\n      CubismPhysicsOutput,\r\n      true\r\n    );\r\n    this._physicsRig.particles.updateSize(\r\n      json.getVertexCount(),\r\n      CubismPhysicsParticle,\r\n      true\r\n    );\r\n\r\n    this._currentRigOutputs.clear();\r\n    this._previousRigOutputs.clear();\r\n\r\n    let inputIndex = 0,\r\n      outputIndex = 0,\r\n      particleIndex = 0;\r\n\r\n    for (let i = 0; i < this._physicsRig.settings.getSize(); ++i) {\r\n      this._physicsRig.settings.at(i).normalizationPosition.minimum =\r\n        json.getNormalizationPositionMinimumValue(i);\r\n      this._physicsRig.settings.at(i).normalizationPosition.maximum =\r\n        json.getNormalizationPositionMaximumValue(i);\r\n      this._physicsRig.settings.at(i).normalizationPosition.defalut =\r\n        json.getNormalizationPositionDefaultValue(i);\r\n\r\n      this._physicsRig.settings.at(i).normalizationAngle.minimum =\r\n        json.getNormalizationAngleMinimumValue(i);\r\n      this._physicsRig.settings.at(i).normalizationAngle.maximum =\r\n        json.getNormalizationAngleMaximumValue(i);\r\n      this._physicsRig.settings.at(i).normalizationAngle.defalut =\r\n        json.getNormalizationAngleDefaultValue(i);\r\n\r\n      // Input\r\n      this._physicsRig.settings.at(i).inputCount = json.getInputCount(i);\r\n      this._physicsRig.settings.at(i).baseInputIndex = inputIndex;\r\n\r\n      for (let j = 0; j < this._physicsRig.settings.at(i).inputCount; ++j) {\r\n        this._physicsRig.inputs.at(inputIndex + j).sourceParameterIndex = -1;\r\n        this._physicsRig.inputs.at(inputIndex + j).weight = json.getInputWeight(\r\n          i,\r\n          j\r\n        );\r\n        this._physicsRig.inputs.at(inputIndex + j).reflect =\r\n          json.getInputReflect(i, j);\r\n\r\n        if (json.getInputType(i, j) == PhysicsTypeTagX) {\r\n          this._physicsRig.inputs.at(inputIndex + j).type =\r\n            CubismPhysicsSource.CubismPhysicsSource_X;\r\n          this._physicsRig.inputs.at(\r\n            inputIndex + j\r\n          ).getNormalizedParameterValue =\r\n            getInputTranslationXFromNormalizedParameterValue;\r\n        } else if (json.getInputType(i, j) == PhysicsTypeTagY) {\r\n          this._physicsRig.inputs.at(inputIndex + j).type =\r\n            CubismPhysicsSource.CubismPhysicsSource_Y;\r\n          this._physicsRig.inputs.at(\r\n            inputIndex + j\r\n          ).getNormalizedParameterValue =\r\n            getInputTranslationYFromNormalizedParamterValue;\r\n        } else if (json.getInputType(i, j) == PhysicsTypeTagAngle) {\r\n          this._physicsRig.inputs.at(inputIndex + j).type =\r\n            CubismPhysicsSource.CubismPhysicsSource_Angle;\r\n          this._physicsRig.inputs.at(\r\n            inputIndex + j\r\n          ).getNormalizedParameterValue =\r\n            getInputAngleFromNormalizedParameterValue;\r\n        }\r\n\r\n        this._physicsRig.inputs.at(inputIndex + j).source.targetType =\r\n          CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\r\n        this._physicsRig.inputs.at(inputIndex + j).source.id =\r\n          json.getInputSourceId(i, j);\r\n      }\r\n      inputIndex += this._physicsRig.settings.at(i).inputCount;\r\n\r\n      // Output\r\n      this._physicsRig.settings.at(i).outputCount = json.getOutputCount(i);\r\n      this._physicsRig.settings.at(i).baseOutputIndex = outputIndex;\r\n\r\n      const currentRigOutput = new PhysicsOutput();\r\n      currentRigOutput.outputs.resize(\r\n        this._physicsRig.settings.at(i).outputCount\r\n      );\r\n\r\n      const previousRigOutput = new PhysicsOutput();\r\n      previousRigOutput.outputs.resize(\r\n        this._physicsRig.settings.at(i).outputCount\r\n      );\r\n\r\n      for (let j = 0; j < this._physicsRig.settings.at(i).outputCount; ++j) {\r\n        // initialize\r\n        currentRigOutput.outputs.set(j, 0.0);\r\n        previousRigOutput.outputs.set(j, 0.0);\r\n\r\n        this._physicsRig.outputs.at(outputIndex + j).destinationParameterIndex =\r\n          -1;\r\n        this._physicsRig.outputs.at(outputIndex + j).vertexIndex =\r\n          json.getOutputVertexIndex(i, j);\r\n        this._physicsRig.outputs.at(outputIndex + j).angleScale =\r\n          json.getOutputAngleScale(i, j);\r\n        this._physicsRig.outputs.at(outputIndex + j).weight =\r\n          json.getOutputWeight(i, j);\r\n        this._physicsRig.outputs.at(outputIndex + j).destination.targetType =\r\n          CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\r\n\r\n        this._physicsRig.outputs.at(outputIndex + j).destination.id =\r\n          json.getOutputDestinationId(i, j);\r\n\r\n        if (json.getOutputType(i, j) == PhysicsTypeTagX) {\r\n          this._physicsRig.outputs.at(outputIndex + j).type =\r\n            CubismPhysicsSource.CubismPhysicsSource_X;\r\n          this._physicsRig.outputs.at(outputIndex + j).getValue =\r\n            getOutputTranslationX;\r\n          this._physicsRig.outputs.at(outputIndex + j).getScale =\r\n            getOutputScaleTranslationX;\r\n        } else if (json.getOutputType(i, j) == PhysicsTypeTagY) {\r\n          this._physicsRig.outputs.at(outputIndex + j).type =\r\n            CubismPhysicsSource.CubismPhysicsSource_Y;\r\n          this._physicsRig.outputs.at(outputIndex + j).getValue =\r\n            getOutputTranslationY;\r\n          this._physicsRig.outputs.at(outputIndex + j).getScale =\r\n            getOutputScaleTranslationY;\r\n        } else if (json.getOutputType(i, j) == PhysicsTypeTagAngle) {\r\n          this._physicsRig.outputs.at(outputIndex + j).type =\r\n            CubismPhysicsSource.CubismPhysicsSource_Angle;\r\n          this._physicsRig.outputs.at(outputIndex + j).getValue =\r\n            getOutputAngle;\r\n          this._physicsRig.outputs.at(outputIndex + j).getScale =\r\n            getOutputScaleAngle;\r\n        }\r\n\r\n        this._physicsRig.outputs.at(outputIndex + j).reflect =\r\n          json.getOutputReflect(i, j);\r\n      }\r\n\r\n      this._currentRigOutputs.pushBack(currentRigOutput);\r\n      this._previousRigOutputs.pushBack(previousRigOutput);\r\n\r\n      outputIndex += this._physicsRig.settings.at(i).outputCount;\r\n\r\n      // Particle\r\n      this._physicsRig.settings.at(i).particleCount = json.getParticleCount(i);\r\n      this._physicsRig.settings.at(i).baseParticleIndex = particleIndex;\r\n\r\n      for (let j = 0; j < this._physicsRig.settings.at(i).particleCount; ++j) {\r\n        this._physicsRig.particles.at(particleIndex + j).mobility =\r\n          json.getParticleMobility(i, j);\r\n        this._physicsRig.particles.at(particleIndex + j).delay =\r\n          json.getParticleDelay(i, j);\r\n        this._physicsRig.particles.at(particleIndex + j).acceleration =\r\n          json.getParticleAcceleration(i, j);\r\n        this._physicsRig.particles.at(particleIndex + j).radius =\r\n          json.getParticleRadius(i, j);\r\n        this._physicsRig.particles.at(particleIndex + j).position =\r\n          json.getParticlePosition(i, j);\r\n      }\r\n\r\n      particleIndex += this._physicsRig.settings.at(i).particleCount;\r\n    }\r\n\r\n    this.initialize();\r\n\r\n    json.release();\r\n    json = void 0;\r\n    json = null;\r\n  }\r\n\r\n  /**\r\n   * 현재 매개 변수 값은 물리적 작업이 안정화되는 것으로 계산됩니다.\r\n   * @param model 물리적 운영 결과를 적용하는 모델\r\n   */\r\n  public stabilization(model: CubismModel): void {\r\n    let totalAngle: { angle: number };\r\n    let weight: number;\r\n    let radAngle: number;\r\n    let outputValue: number;\r\n    const totalTranslation: CubismVector2 = new CubismVector2();\r\n    let currentSetting: CubismPhysicsSubRig;\r\n    let currentInputs: CubismPhysicsInput[];\r\n    let currentOutputs: CubismPhysicsOutput[];\r\n    let currentParticles: CubismPhysicsParticle[];\r\n\r\n    const parameterValues: Float32Array = model.getModel().parameters.values;\r\n    const parameterMaximumValues: Float32Array =\r\n      model.getModel().parameters.maximumValues;\r\n    const parameterMinimumValues: Float32Array =\r\n      model.getModel().parameters.minimumValues;\r\n    const parameterDefaultValues: Float32Array =\r\n      model.getModel().parameters.defaultValues;\r\n\r\n    if ((this._parameterCaches?.length ?? 0) < model.getParameterCount()) {\r\n      this._parameterCaches = new Float32Array(model.getParameterCount());\r\n    }\r\n\r\n    if ((this._parameterInputCaches?.length ?? 0) < model.getParameterCount()) {\r\n      this._parameterInputCaches = new Float32Array(model.getParameterCount());\r\n    }\r\n\r\n    for (let j = 0; j < model.getParameterCount(); ++j) {\r\n      this._parameterCaches[j] = parameterValues[j];\r\n      this._parameterInputCaches[j] = parameterValues[j];\r\n    }\r\n\r\n    for (\r\n      let settingIndex = 0;\r\n      settingIndex < this._physicsRig.subRigCount;\r\n      ++settingIndex\r\n    ) {\r\n      totalAngle = { angle: 0.0 };\r\n      totalTranslation.x = 0.0;\r\n      totalTranslation.y = 0.0;\r\n      currentSetting = this._physicsRig.settings.at(settingIndex);\r\n      currentInputs = this._physicsRig.inputs.get(\r\n        currentSetting.baseInputIndex\r\n      );\r\n      currentOutputs = this._physicsRig.outputs.get(\r\n        currentSetting.baseOutputIndex\r\n      );\r\n      currentParticles = this._physicsRig.particles.get(\r\n        currentSetting.baseParticleIndex\r\n      );\r\n\r\n      // Load input parameters\r\n      for (let i = 0; i < currentSetting.inputCount; ++i) {\r\n        weight = currentInputs[i].weight / MaximumWeight;\r\n\r\n        if (currentInputs[i].sourceParameterIndex == -1) {\r\n          currentInputs[i].sourceParameterIndex = model.getParameterIndex(\r\n            currentInputs[i].source.id\r\n          );\r\n        }\r\n\r\n        currentInputs[i].getNormalizedParameterValue(\r\n          totalTranslation,\r\n          totalAngle,\r\n          parameterValues[currentInputs[i].sourceParameterIndex],\r\n          parameterMinimumValues[currentInputs[i].sourceParameterIndex],\r\n          parameterMaximumValues[currentInputs[i].sourceParameterIndex],\r\n          parameterDefaultValues[currentInputs[i].sourceParameterIndex],\r\n          currentSetting.normalizationPosition,\r\n          currentSetting.normalizationAngle,\r\n          currentInputs[i].reflect,\r\n          weight\r\n        );\r\n\r\n        this._parameterCaches[currentInputs[i].sourceParameterIndex] =\r\n          parameterValues[currentInputs[i].sourceParameterIndex];\r\n      }\r\n\r\n      radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\r\n\r\n      totalTranslation.x =\r\n        totalTranslation.x * CubismMath.cos(radAngle) -\r\n        totalTranslation.y * CubismMath.sin(radAngle);\r\n      totalTranslation.y =\r\n        totalTranslation.x * CubismMath.sin(radAngle) +\r\n        totalTranslation.y * CubismMath.cos(radAngle);\r\n\r\n      // Calculate particles position.\r\n      updateParticlesForStabilization(\r\n        currentParticles,\r\n        currentSetting.particleCount,\r\n        totalTranslation,\r\n        totalAngle.angle,\r\n        this._options.wind,\r\n        MovementThreshold * currentSetting.normalizationPosition.maximum\r\n      );\r\n\r\n      // Update output parameters.\r\n      for (let i = 0; i < currentSetting.outputCount; ++i) {\r\n        const particleIndex = currentOutputs[i].vertexIndex;\r\n\r\n        if (currentOutputs[i].destinationParameterIndex == -1) {\r\n          currentOutputs[i].destinationParameterIndex = model.getParameterIndex(\r\n            currentOutputs[i].destination.id\r\n          );\r\n        }\r\n\r\n        if (\r\n          particleIndex < 1 ||\r\n          particleIndex >= currentSetting.particleCount\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        let translation: CubismVector2 = new CubismVector2();\r\n        translation = currentParticles[particleIndex].position.substract(\r\n          currentParticles[particleIndex - 1].position\r\n        );\r\n\r\n        outputValue = currentOutputs[i].getValue(\r\n          translation,\r\n          currentParticles,\r\n          particleIndex,\r\n          currentOutputs[i].reflect,\r\n          this._options.gravity\r\n        );\r\n\r\n        this._currentRigOutputs.at(settingIndex).outputs.set(i, outputValue);\r\n        this._previousRigOutputs.at(settingIndex).outputs.set(i, outputValue);\r\n\r\n        const destinationParameterIndex: number =\r\n          currentOutputs[i].destinationParameterIndex;\r\n\r\n        const outParameterCaches: Float32Array =\r\n          !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype\r\n            ? JSON.parse(\r\n                JSON.stringify(\r\n                  parameterValues.subarray(destinationParameterIndex)\r\n                )\r\n              ) // 통과합니다、JSON.parse, JSON.stringify\r\n            : parameterValues.slice(destinationParameterIndex);\r\n\r\n        updateOutputParameterValue(\r\n          outParameterCaches,\r\n          parameterMinimumValues[destinationParameterIndex],\r\n          parameterMaximumValues[destinationParameterIndex],\r\n          outputValue,\r\n          currentOutputs[i]\r\n        );\r\n\r\n        // 값을 반영하십시오\r\n        for (\r\n          let offset: number = destinationParameterIndex, outParamIndex = 0;\r\n          offset < this._parameterCaches.length;\r\n          offset++, outParamIndex++\r\n        ) {\r\n          parameterValues[offset] = this._parameterCaches[offset] =\r\n            outParameterCaches[outParamIndex];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 물리적 운영 평가\r\n   *\r\n   * Pendulum interpolation weights\r\n   *\r\n   * 振り子の計算結果は保存され、パラメータへの出力は保存された前回の結果で補間されます。\r\n   * The result of the pendulum calculation is saved and\r\n   * the output to the parameters is interpolated with the saved previous result of the pendulum calculation.\r\n   *\r\n   * 図で示すと[1]と[2]で補間されます。\r\n   * The figure shows the interpolation between [1] and [2].\r\n   *\r\n   * 補間の重みは最新の振り子計算タイミングと次回のタイミングの間で見た現在時間で決定する。\r\n   * The weight of the interpolation are determined by the current time seen between\r\n   * the latest pendulum calculation timing and the next timing.\r\n   *\r\n   * 図で示すと[2]と[4]の間でみた(3)の位置の重みになる。\r\n   * Figure shows the weight of position (3) as seen between [2] and [4].\r\n   *\r\n   * 解釈として振り子計算のタイミングと重み計算のタイミングがズレる。\r\n   * As an interpretation, the pendulum calculation and weights are misaligned.\r\n   *\r\n   * physics3.jsonにFPS情報が存在しない場合は常に前の振り子状態で設定される。\r\n   * If there is no FPS information in physics3.json, it is always set in the previous pendulum state.\r\n   *\r\n   * この仕様は補間範囲を逸脱したことが原因の震えたような見た目を回避を目的にしている。\r\n   * The purpose of this specification is to avoid the quivering appearance caused by deviations from the interpolation range.\r\n   *\r\n   * ------------ time -------------->\r\n   *\r\n   *                 |+++++|------| <- weight\r\n   * ==[1]====#=====[2]---(3)----(4)\r\n   *          ^ output contents\r\n   *\r\n   * 1:_previousRigOutputs\r\n   * 2:_currentRigOutputs\r\n   * 3:_currentRemainTime (now rendering)\r\n   * 4:next particles timing\r\n   * @param model 物理演算の結果を適用するモデル\r\n   * @param deltaTimeSeconds デルタ時間[秒]\r\n   */\r\n  public evaluate(model: CubismModel, deltaTimeSeconds: number): void {\r\n    let totalAngle: { angle: number };\r\n    let weight: number;\r\n    let radAngle: number;\r\n    let outputValue: number;\r\n    const totalTranslation: CubismVector2 = new CubismVector2();\r\n    let currentSetting: CubismPhysicsSubRig;\r\n    let currentInputs: CubismPhysicsInput[];\r\n    let currentOutputs: CubismPhysicsOutput[];\r\n    let currentParticles: CubismPhysicsParticle[];\r\n\r\n    if (0.0 >= deltaTimeSeconds) {\r\n      return;\r\n    }\r\n\r\n    const parameterValues: Float32Array = model.getModel().parameters.values;\r\n    const parameterMaximumValues: Float32Array =\r\n      model.getModel().parameters.maximumValues;\r\n    const parameterMinimumValues: Float32Array =\r\n      model.getModel().parameters.minimumValues;\r\n    const parameterDefaultValues: Float32Array =\r\n      model.getModel().parameters.defaultValues;\r\n\r\n    let physicsDeltaTime: number;\r\n    this._currentRemainTime += deltaTimeSeconds;\r\n    if (this._currentRemainTime > MaxDeltaTime) {\r\n      this._currentRemainTime = 0.0;\r\n    }\r\n\r\n    if ((this._parameterCaches?.length ?? 0) < model.getParameterCount()) {\r\n      this._parameterCaches = new Float32Array(model.getParameterCount());\r\n    }\r\n\r\n    if ((this._parameterInputCaches?.length ?? 0) < model.getParameterCount()) {\r\n      this._parameterInputCaches = new Float32Array(model.getParameterCount());\r\n      for (let j = 0; j < model.getParameterCount(); ++j) {\r\n        this._parameterInputCaches[j] = parameterValues[j];\r\n      }\r\n    }\r\n\r\n    if (this._physicsRig.fps > 0.0) {\r\n      physicsDeltaTime = 1.0 / this._physicsRig.fps;\r\n    } else {\r\n      physicsDeltaTime = deltaTimeSeconds;\r\n    }\r\n\r\n    while (this._currentRemainTime >= physicsDeltaTime) {\r\n      // copyRigOutputs _currentRigOutputs to _previousRigOutputs\r\n      for (\r\n        let settingIndex = 0;\r\n        settingIndex < this._physicsRig.subRigCount;\r\n        ++settingIndex\r\n      ) {\r\n        currentSetting = this._physicsRig.settings.at(settingIndex);\r\n        currentOutputs = this._physicsRig.outputs.get(\r\n          currentSetting.baseOutputIndex\r\n        );\r\n        for (let i = 0; i < currentSetting.outputCount; ++i) {\r\n          this._previousRigOutputs\r\n            .at(settingIndex)\r\n            .outputs.set(\r\n              i,\r\n              this._currentRigOutputs.at(settingIndex).outputs.at(i)\r\n            );\r\n        }\r\n      }\r\n\r\n      // 입력 캐시와 매개 변수가 보간되어 파트탈이 될 때 입력을 계산하십시오.\r\n      // Calculate the input at the timing to UpdateParticles by linear interpolation with the _parameterInputCache and parameterValue.\r\n      // _parameterCacheはグループ間での値の伝搬の役割があるので_parameterInputCacheとの分離が必要。\r\n      // _parameterCache needs to be separated from _parameterInputCache because of its role in propagating values between groups.\r\n      const inputWeight = physicsDeltaTime / this._currentRemainTime;\r\n      for (let j = 0; j < model.getParameterCount(); ++j) {\r\n        this._parameterCaches[j] =\r\n          this._parameterInputCaches[j] * (1.0 - inputWeight) +\r\n          parameterValues[j] * inputWeight;\r\n        this._parameterInputCaches[j] = this._parameterCaches[j];\r\n      }\r\n\r\n      for (\r\n        let settingIndex = 0;\r\n        settingIndex < this._physicsRig.subRigCount;\r\n        ++settingIndex\r\n      ) {\r\n        totalAngle = { angle: 0.0 };\r\n        totalTranslation.x = 0.0;\r\n        totalTranslation.y = 0.0;\r\n        currentSetting = this._physicsRig.settings.at(settingIndex);\r\n        currentInputs = this._physicsRig.inputs.get(\r\n          currentSetting.baseInputIndex\r\n        );\r\n        currentOutputs = this._physicsRig.outputs.get(\r\n          currentSetting.baseOutputIndex\r\n        );\r\n        currentParticles = this._physicsRig.particles.get(\r\n          currentSetting.baseParticleIndex\r\n        );\r\n\r\n        // Load input parameters\r\n        for (let i = 0; i < currentSetting.inputCount; ++i) {\r\n          weight = currentInputs[i].weight / MaximumWeight;\r\n\r\n          if (currentInputs[i].sourceParameterIndex == -1) {\r\n            currentInputs[i].sourceParameterIndex = model.getParameterIndex(\r\n              currentInputs[i].source.id\r\n            );\r\n          }\r\n\r\n          currentInputs[i].getNormalizedParameterValue(\r\n            totalTranslation,\r\n            totalAngle,\r\n            this._parameterCaches[currentInputs[i].sourceParameterIndex],\r\n            parameterMinimumValues[currentInputs[i].sourceParameterIndex],\r\n            parameterMaximumValues[currentInputs[i].sourceParameterIndex],\r\n            parameterDefaultValues[currentInputs[i].sourceParameterIndex],\r\n            currentSetting.normalizationPosition,\r\n            currentSetting.normalizationAngle,\r\n            currentInputs[i].reflect,\r\n            weight\r\n          );\r\n        }\r\n\r\n        radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\r\n\r\n        totalTranslation.x =\r\n          totalTranslation.x * CubismMath.cos(radAngle) -\r\n          totalTranslation.y * CubismMath.sin(radAngle);\r\n        totalTranslation.y =\r\n          totalTranslation.x * CubismMath.sin(radAngle) +\r\n          totalTranslation.y * CubismMath.cos(radAngle);\r\n\r\n        // Calculate particles position.\r\n        updateParticles(\r\n          currentParticles,\r\n          currentSetting.particleCount,\r\n          totalTranslation,\r\n          totalAngle.angle,\r\n          this._options.wind,\r\n          MovementThreshold * currentSetting.normalizationPosition.maximum,\r\n          physicsDeltaTime,\r\n          AirResistance\r\n        );\r\n\r\n        // Update output parameters.\r\n        for (let i = 0; i < currentSetting.outputCount; ++i) {\r\n          const particleIndex = currentOutputs[i].vertexIndex;\r\n\r\n          if (currentOutputs[i].destinationParameterIndex == -1) {\r\n            currentOutputs[i].destinationParameterIndex =\r\n              model.getParameterIndex(currentOutputs[i].destination.id);\r\n          }\r\n\r\n          if (\r\n            particleIndex < 1 ||\r\n            particleIndex >= currentSetting.particleCount\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n          const translation: CubismVector2 = new CubismVector2();\r\n          translation.x =\r\n            currentParticles[particleIndex].position.x -\r\n            currentParticles[particleIndex - 1].position.x;\r\n          translation.y =\r\n            currentParticles[particleIndex].position.y -\r\n            currentParticles[particleIndex - 1].position.y;\r\n\r\n          outputValue = currentOutputs[i].getValue(\r\n            translation,\r\n            currentParticles,\r\n            particleIndex,\r\n            currentOutputs[i].reflect,\r\n            this._options.gravity\r\n          );\r\n\r\n          this._currentRigOutputs.at(settingIndex).outputs.set(i, outputValue);\r\n\r\n          const destinationParameterIndex: number =\r\n            currentOutputs[i].destinationParameterIndex;\r\n          const outParameterCaches: Float32Array =\r\n            !Float32Array.prototype.slice &&\r\n            'subarray' in Float32Array.prototype\r\n              ? JSON.parse(\r\n                  JSON.stringify(\r\n                    this._parameterCaches.subarray(destinationParameterIndex)\r\n                  )\r\n                ) // 値渡しするため、JSON.parse, JSON.stringify\r\n              : this._parameterCaches.slice(destinationParameterIndex);\r\n\r\n          updateOutputParameterValue(\r\n            outParameterCaches,\r\n            parameterMinimumValues[destinationParameterIndex],\r\n            parameterMaximumValues[destinationParameterIndex],\r\n            outputValue,\r\n            currentOutputs[i]\r\n          );\r\n\r\n          // 値を反映\r\n          for (\r\n            let offset: number = destinationParameterIndex, outParamIndex = 0;\r\n            offset < this._parameterCaches.length;\r\n            offset++, outParamIndex++\r\n          ) {\r\n            this._parameterCaches[offset] = outParameterCaches[outParamIndex];\r\n          }\r\n        }\r\n      }\r\n      this._currentRemainTime -= physicsDeltaTime;\r\n    }\r\n\r\n    const alpha: number = this._currentRemainTime / physicsDeltaTime;\r\n    this.interpolate(model, alpha);\r\n  }\r\n\r\n  /**\r\n   * 물리적 작동 결과의 적용\r\n   * 진자 작동의 최신 결과와 이전 결과에 지정된 무게를 적용하십시오.\r\n   * @param model 物理演算の結果を適用するモデル\r\n   * @param weight 最新結果の重み\r\n   */\r\n  public interpolate(model: CubismModel, weight: number): void {\r\n    let currentOutputs: CubismPhysicsOutput[];\r\n    let currentSetting: CubismPhysicsSubRig;\r\n    const parameterValues: Float32Array = model.getModel().parameters.values;\r\n    const parameterMaximumValues: Float32Array =\r\n      model.getModel().parameters.maximumValues;\r\n    const parameterMinimumValues: Float32Array =\r\n      model.getModel().parameters.minimumValues;\r\n\r\n    for (\r\n      let settingIndex = 0;\r\n      settingIndex < this._physicsRig.subRigCount;\r\n      ++settingIndex\r\n    ) {\r\n      currentSetting = this._physicsRig.settings.at(settingIndex);\r\n      currentOutputs = this._physicsRig.outputs.get(\r\n        currentSetting.baseOutputIndex\r\n      );\r\n\r\n      // Load input parameters.\r\n      for (let i = 0; i < currentSetting.outputCount; ++i) {\r\n        if (currentOutputs[i].destinationParameterIndex == -1) {\r\n          continue;\r\n        }\r\n\r\n        const destinationParameterIndex: number =\r\n          currentOutputs[i].destinationParameterIndex;\r\n        const outParameterValues: Float32Array =\r\n          !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype\r\n            ? JSON.parse(\r\n                JSON.stringify(\r\n                  parameterValues.subarray(destinationParameterIndex)\r\n                )\r\n              ) // 値渡しするため、JSON.parse, JSON.stringify\r\n            : parameterValues.slice(destinationParameterIndex);\r\n\r\n        updateOutputParameterValue(\r\n          outParameterValues,\r\n          parameterMinimumValues[destinationParameterIndex],\r\n          parameterMaximumValues[destinationParameterIndex],\r\n          this._previousRigOutputs.at(settingIndex).outputs.at(i) *\r\n            (1 - weight) +\r\n            this._currentRigOutputs.at(settingIndex).outputs.at(i) * weight,\r\n          currentOutputs[i]\r\n        );\r\n\r\n        // 値を反映\r\n        for (\r\n          let offset: number = destinationParameterIndex, outParamIndex = 0;\r\n          offset < parameterValues.length;\r\n          offset++, outParamIndex++\r\n        ) {\r\n          parameterValues[offset] = outParameterValues[outParamIndex];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * オプションの設定\r\n   * @param options オプション\r\n   */\r\n  public setOptions(options: Options): void {\r\n    this._options = options;\r\n  }\r\n\r\n  /**\r\n   * オプションの取得\r\n   * @return オプション\r\n   */\r\n  public getOption(): Options {\r\n    return this._options;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._physicsRig = null;\r\n\r\n    // set default options\r\n    this._options = new Options();\r\n    this._options.gravity.y = -1.0;\r\n    this._options.gravity.x = 0.0;\r\n    this._options.wind.x = 0.0;\r\n    this._options.wind.y = 0.0;\r\n    this._currentRigOutputs = new csmVector<PhysicsOutput>();\r\n    this._previousRigOutputs = new csmVector<PhysicsOutput>();\r\n    this._currentRemainTime = 0.0;\r\n    this._parameterCaches = null;\r\n    this._parameterInputCaches = null;\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    this._physicsRig = void 0;\r\n    this._physicsRig = null;\r\n  }\r\n\r\n  /**\r\n   * 初期化する\r\n   */\r\n  public initialize(): void {\r\n    let strand: CubismPhysicsParticle[];\r\n    let currentSetting: CubismPhysicsSubRig;\r\n    let radius: CubismVector2;\r\n\r\n    for (\r\n      let settingIndex = 0;\r\n      settingIndex < this._physicsRig.subRigCount;\r\n      ++settingIndex\r\n    ) {\r\n      currentSetting = this._physicsRig.settings.at(settingIndex);\r\n      strand = this._physicsRig.particles.get(currentSetting.baseParticleIndex);\r\n\r\n      // Initialize the top of particle.\r\n      strand[0].initialPosition = new CubismVector2(0.0, 0.0);\r\n      strand[0].lastPosition = new CubismVector2(\r\n        strand[0].initialPosition.x,\r\n        strand[0].initialPosition.y\r\n      );\r\n      strand[0].lastGravity = new CubismVector2(0.0, -1.0);\r\n      strand[0].lastGravity.y *= -1.0;\r\n      strand[0].velocity = new CubismVector2(0.0, 0.0);\r\n      strand[0].force = new CubismVector2(0.0, 0.0);\r\n\r\n      // Initialize particles.\r\n      for (let i = 1; i < currentSetting.particleCount; ++i) {\r\n        radius = new CubismVector2(0.0, 0.0);\r\n        radius.y = strand[i].radius;\r\n        strand[i].initialPosition = new CubismVector2(\r\n          strand[i - 1].initialPosition.x + radius.x,\r\n          strand[i - 1].initialPosition.y + radius.y\r\n        );\r\n        strand[i].position = new CubismVector2(\r\n          strand[i].initialPosition.x,\r\n          strand[i].initialPosition.y\r\n        );\r\n        strand[i].lastPosition = new CubismVector2(\r\n          strand[i].initialPosition.x,\r\n          strand[i].initialPosition.y\r\n        );\r\n        strand[i].lastGravity = new CubismVector2(0.0, -1.0);\r\n        strand[i].lastGravity.y *= -1.0;\r\n        strand[i].velocity = new CubismVector2(0.0, 0.0);\r\n        strand[i].force = new CubismVector2(0.0, 0.0);\r\n      }\r\n    }\r\n  }\r\n\r\n  _physicsRig: CubismPhysicsRig; // 物理演算のデータ\r\n  _options: Options; // オプション\r\n\r\n  _currentRigOutputs: csmVector<PhysicsOutput>; ///< 最新の振り子計算の結果\r\n  _previousRigOutputs: csmVector<PhysicsOutput>; ///< 一つ前の振り子計算の結果\r\n\r\n  _currentRemainTime: number; ///< 物理演算が処理していない時間\r\n\r\n  _parameterCaches: Float32Array; ///< Evaluateで利用するパラメータのキャッシュ\r\n  _parameterInputCaches: Float32Array; ///< UpdateParticlesが動くときの入力をキャッシュ\r\n}\r\n\r\n/**\r\n * 物理演算のオプション\r\n */\r\nexport class Options {\r\n  constructor() {\r\n    this.gravity = new CubismVector2(0, 0);\r\n    this.wind = new CubismVector2(0, 0);\r\n  }\r\n\r\n  gravity: CubismVector2; // 重力方向\r\n  wind: CubismVector2; // 風の方向\r\n}\r\n\r\n/**\r\n * パラメータに適用する前の物理演算の出力結果\r\n */\r\nexport class PhysicsOutput {\r\n  constructor() {\r\n    this.outputs = new csmVector<number>(0);\r\n  }\r\n\r\n  outputs: csmVector<number>; // 物理演算出力結果\r\n}\r\n\r\n/**\r\n * Gets sign.\r\n *\r\n * @param value Evaluation target value.\r\n *\r\n * @return Sign of value.\r\n */\r\nfunction sign(value: number): number {\r\n  let ret = 0;\r\n\r\n  if (value > 0.0) {\r\n    ret = 1;\r\n  } else if (value < 0.0) {\r\n    ret = -1;\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction getInputTranslationXFromNormalizedParameterValue(\r\n  targetTranslation: CubismVector2,\r\n  targetAngle: { angle: number },\r\n  value: number,\r\n  parameterMinimumValue: number,\r\n  parameterMaximumValue: number,\r\n  parameterDefaultValue: number,\r\n  normalizationPosition: CubismPhysicsNormalization,\r\n  normalizationAngle: CubismPhysicsNormalization,\r\n  isInverted: boolean,\r\n  weight: number\r\n): void {\r\n  targetTranslation.x +=\r\n    normalizeParameterValue(\r\n      value,\r\n      parameterMinimumValue,\r\n      parameterMaximumValue,\r\n      parameterDefaultValue,\r\n      normalizationPosition.minimum,\r\n      normalizationPosition.maximum,\r\n      normalizationPosition.defalut,\r\n      isInverted\r\n    ) * weight;\r\n}\r\n\r\nfunction getInputTranslationYFromNormalizedParamterValue(\r\n  targetTranslation: CubismVector2,\r\n  targetAngle: { angle: number },\r\n  value: number,\r\n  parameterMinimumValue: number,\r\n  parameterMaximumValue: number,\r\n  parameterDefaultValue: number,\r\n  normalizationPosition: CubismPhysicsNormalization,\r\n  normalizationAngle: CubismPhysicsNormalization,\r\n  isInverted: boolean,\r\n  weight: number\r\n): void {\r\n  targetTranslation.y +=\r\n    normalizeParameterValue(\r\n      value,\r\n      parameterMinimumValue,\r\n      parameterMaximumValue,\r\n      parameterDefaultValue,\r\n      normalizationPosition.minimum,\r\n      normalizationPosition.maximum,\r\n      normalizationPosition.defalut,\r\n      isInverted\r\n    ) * weight;\r\n}\r\n\r\nfunction getInputAngleFromNormalizedParameterValue(\r\n  targetTranslation: CubismVector2,\r\n  targetAngle: { angle: number },\r\n  value: number,\r\n  parameterMinimumValue: number,\r\n  parameterMaximumValue: number,\r\n  parameterDefaultValue: number,\r\n  normalizaitionPosition: CubismPhysicsNormalization,\r\n  normalizationAngle: CubismPhysicsNormalization,\r\n  isInverted: boolean,\r\n  weight: number\r\n): void {\r\n  targetAngle.angle +=\r\n    normalizeParameterValue(\r\n      value,\r\n      parameterMinimumValue,\r\n      parameterMaximumValue,\r\n      parameterDefaultValue,\r\n      normalizationAngle.minimum,\r\n      normalizationAngle.maximum,\r\n      normalizationAngle.defalut,\r\n      isInverted\r\n    ) * weight;\r\n}\r\n\r\nfunction getOutputTranslationX(\r\n  translation: CubismVector2,\r\n  particles: CubismPhysicsParticle[],\r\n  particleIndex: number,\r\n  isInverted: boolean,\r\n  parentGravity: CubismVector2\r\n): number {\r\n  let outputValue: number = translation.x;\r\n\r\n  if (isInverted) {\r\n    outputValue *= -1.0;\r\n  }\r\n\r\n  return outputValue;\r\n}\r\n\r\nfunction getOutputTranslationY(\r\n  translation: CubismVector2,\r\n  particles: CubismPhysicsParticle[],\r\n  particleIndex: number,\r\n  isInverted: boolean,\r\n  parentGravity: CubismVector2\r\n): number {\r\n  let outputValue: number = translation.y;\r\n\r\n  if (isInverted) {\r\n    outputValue *= -1.0;\r\n  }\r\n  return outputValue;\r\n}\r\n\r\nfunction getOutputAngle(\r\n  translation: CubismVector2,\r\n  particles: CubismPhysicsParticle[],\r\n  particleIndex: number,\r\n  isInverted: boolean,\r\n  parentGravity: CubismVector2\r\n): number {\r\n  let outputValue: number;\r\n\r\n  if (particleIndex >= 2) {\r\n    parentGravity = particles[particleIndex - 1].position.substract(\r\n      particles[particleIndex - 2].position\r\n    );\r\n  } else {\r\n    parentGravity = parentGravity.multiplyByScaler(-1.0);\r\n  }\r\n\r\n  outputValue = CubismMath.directionToRadian(parentGravity, translation);\r\n\r\n  if (isInverted) {\r\n    outputValue *= -1.0;\r\n  }\r\n\r\n  return outputValue;\r\n}\r\n\r\nfunction getRangeValue(min: number, max: number): number {\r\n  const maxValue: number = CubismMath.max(min, max);\r\n  const minValue: number = CubismMath.min(min, max);\r\n\r\n  return CubismMath.abs(maxValue - minValue);\r\n}\r\n\r\nfunction getDefaultValue(min: number, max: number): number {\r\n  const minValue: number = CubismMath.min(min, max);\r\n  return minValue + getRangeValue(min, max) / 2.0;\r\n}\r\n\r\nfunction getOutputScaleTranslationX(\r\n  translationScale: CubismVector2,\r\n  angleScale: number\r\n): number {\r\n  return JSON.parse(JSON.stringify(translationScale.x));\r\n}\r\n\r\nfunction getOutputScaleTranslationY(\r\n  translationScale: CubismVector2,\r\n  angleScale: number\r\n): number {\r\n  return JSON.parse(JSON.stringify(translationScale.y));\r\n}\r\n\r\nfunction getOutputScaleAngle(\r\n  translationScale: CubismVector2,\r\n  angleScale: number\r\n): number {\r\n  return JSON.parse(JSON.stringify(angleScale));\r\n}\r\n\r\n/**\r\n * Updates particles.\r\n *\r\n * @param strand                Target array of particle.\r\n * @param strandCount           Count of particle.\r\n * @param totalTranslation      Total translation value.\r\n * @param totalAngle            Total angle.\r\n * @param windDirection         Direction of Wind.\r\n * @param thresholdValue        Threshold of movement.\r\n * @param deltaTimeSeconds      Delta time.\r\n * @param airResistance         Air resistance.\r\n */\r\nfunction updateParticles(\r\n  strand: CubismPhysicsParticle[],\r\n  strandCount: number,\r\n  totalTranslation: CubismVector2,\r\n  totalAngle: number,\r\n  windDirection: CubismVector2,\r\n  thresholdValue: number,\r\n  deltaTimeSeconds: number,\r\n  airResistance: number\r\n) {\r\n  let delay: number;\r\n  let radian: number;\r\n  let direction: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n  let velocity: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n  let force: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n  let newDirection: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n\r\n  strand[0].position = new CubismVector2(\r\n    totalTranslation.x,\r\n    totalTranslation.y\r\n  );\r\n\r\n  const totalRadian: number = CubismMath.degreesToRadian(totalAngle);\r\n  const currentGravity: CubismVector2 =\r\n    CubismMath.radianToDirection(totalRadian);\r\n  currentGravity.normalize();\r\n\r\n  for (let i = 1; i < strandCount; ++i) {\r\n    strand[i].force = currentGravity\r\n      .multiplyByScaler(strand[i].acceleration)\r\n      .add(windDirection);\r\n\r\n    strand[i].lastPosition = new CubismVector2(\r\n      strand[i].position.x,\r\n      strand[i].position.y\r\n    );\r\n\r\n    delay = strand[i].delay * deltaTimeSeconds * 30.0;\r\n\r\n    direction = strand[i].position.substract(strand[i - 1].position);\r\n\r\n    radian =\r\n      CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) /\r\n      airResistance;\r\n\r\n    direction.x =\r\n      CubismMath.cos(radian) * direction.x -\r\n      direction.y * CubismMath.sin(radian);\r\n    direction.y =\r\n      CubismMath.sin(radian) * direction.x +\r\n      direction.y * CubismMath.cos(radian);\r\n\r\n    strand[i].position = strand[i - 1].position.add(direction);\r\n\r\n    velocity = strand[i].velocity.multiplyByScaler(delay);\r\n    force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);\r\n\r\n    strand[i].position = strand[i].position.add(velocity).add(force);\r\n\r\n    newDirection = strand[i].position.substract(strand[i - 1].position);\r\n    newDirection.normalize();\r\n\r\n    strand[i].position = strand[i - 1].position.add(\r\n      newDirection.multiplyByScaler(strand[i].radius)\r\n    );\r\n\r\n    if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\r\n      strand[i].position.x = 0.0;\r\n    }\r\n\r\n    if (delay != 0.0) {\r\n      strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);\r\n      strand[i].velocity = strand[i].velocity.divisionByScalar(delay);\r\n      strand[i].velocity = strand[i].velocity.multiplyByScaler(\r\n        strand[i].mobility\r\n      );\r\n    }\r\n\r\n    strand[i].force = new CubismVector2(0.0, 0.0);\r\n    strand[i].lastGravity = new CubismVector2(\r\n      currentGravity.x,\r\n      currentGravity.y\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Updates particles for stabilization.\r\n *\r\n * @param strand                Target array of particle.\r\n * @param strandCount           Count of particle.\r\n * @param totalTranslation      Total translation value.\r\n * @param totalAngle            Total angle.\r\n * @param windDirection         Direction of Wind.\r\n * @param thresholdValue        Threshold of movement.\r\n */\r\nfunction updateParticlesForStabilization(\r\n  strand: CubismPhysicsParticle[],\r\n  strandCount: number,\r\n  totalTranslation: CubismVector2,\r\n  totalAngle: number,\r\n  windDirection: CubismVector2,\r\n  thresholdValue: number\r\n) {\r\n  let force: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n\r\n  strand[0].position = new CubismVector2(\r\n    totalTranslation.x,\r\n    totalTranslation.y\r\n  );\r\n\r\n  const totalRadian: number = CubismMath.degreesToRadian(totalAngle);\r\n  const currentGravity: CubismVector2 =\r\n    CubismMath.radianToDirection(totalRadian);\r\n  currentGravity.normalize();\r\n\r\n  for (let i = 1; i < strandCount; ++i) {\r\n    strand[i].force = currentGravity\r\n      .multiplyByScaler(strand[i].acceleration)\r\n      .add(windDirection);\r\n\r\n    strand[i].lastPosition = new CubismVector2(\r\n      strand[i].position.x,\r\n      strand[i].position.y\r\n    );\r\n\r\n    strand[i].velocity = new CubismVector2(0.0, 0.0);\r\n    force = strand[i].force;\r\n    force.normalize();\r\n\r\n    force = force.multiplyByScaler(strand[i].radius);\r\n    strand[i].position = strand[i - 1].position.add(force);\r\n\r\n    if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\r\n      strand[i].position.x = 0.0;\r\n    }\r\n\r\n    strand[i].force = new CubismVector2(0.0, 0.0);\r\n    strand[i].lastGravity = new CubismVector2(\r\n      currentGravity.x,\r\n      currentGravity.y\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Updates output parameter value.\r\n * @param parameterValue            Target parameter value.\r\n * @param parameterValueMinimum     Minimum of parameter value.\r\n * @param parameterValueMaximum     Maximum of parameter value.\r\n * @param translation               Translation value.\r\n */\r\nfunction updateOutputParameterValue(\r\n  parameterValue: Float32Array,\r\n  parameterValueMinimum: number,\r\n  parameterValueMaximum: number,\r\n  translation: number,\r\n  output: CubismPhysicsOutput\r\n): void {\r\n  let value: number;\r\n  const outputScale: number = output.getScale(\r\n    output.translationScale,\r\n    output.angleScale\r\n  );\r\n\r\n  value = translation * outputScale;\r\n\r\n  if (value < parameterValueMinimum) {\r\n    if (value < output.valueBelowMinimum) {\r\n      output.valueBelowMinimum = value;\r\n    }\r\n\r\n    value = parameterValueMinimum;\r\n  } else if (value > parameterValueMaximum) {\r\n    if (value > output.valueExceededMaximum) {\r\n      output.valueExceededMaximum = value;\r\n    }\r\n\r\n    value = parameterValueMaximum;\r\n  }\r\n\r\n  const weight: number = output.weight / MaximumWeight;\r\n\r\n  if (weight >= 1.0) {\r\n    parameterValue[0] = value;\r\n  } else {\r\n    value = parameterValue[0] * (1.0 - weight) + value * weight;\r\n    parameterValue[0] = value;\r\n  }\r\n}\r\n\r\nfunction normalizeParameterValue(\r\n  value: number,\r\n  parameterMinimum: number,\r\n  parameterMaximum: number,\r\n  parameterDefault: number,\r\n  normalizedMinimum: number,\r\n  normalizedMaximum: number,\r\n  normalizedDefault: number,\r\n  isInverted: boolean\r\n) {\r\n  let result = 0.0;\r\n\r\n  const maxValue: number = CubismMath.max(parameterMaximum, parameterMinimum);\r\n\r\n  if (maxValue < value) {\r\n    value = maxValue;\r\n  }\r\n\r\n  const minValue: number = CubismMath.min(parameterMaximum, parameterMinimum);\r\n\r\n  if (minValue > value) {\r\n    value = minValue;\r\n  }\r\n\r\n  const minNormValue: number = CubismMath.min(\r\n    normalizedMinimum,\r\n    normalizedMaximum\r\n  );\r\n  const maxNormValue: number = CubismMath.max(\r\n    normalizedMinimum,\r\n    normalizedMaximum\r\n  );\r\n  const middleNormValue: number = normalizedDefault;\r\n\r\n  const middleValue: number = getDefaultValue(minValue, maxValue);\r\n  const paramValue: number = value - middleValue;\r\n\r\n  switch (sign(paramValue)) {\r\n    case 1: {\r\n      const nLength: number = maxNormValue - middleNormValue;\r\n      const pLength: number = maxValue - middleValue;\r\n\r\n      if (pLength != 0.0) {\r\n        result = paramValue * (nLength / pLength);\r\n        result += middleNormValue;\r\n      }\r\n\r\n      break;\r\n    }\r\n    case -1: {\r\n      const nLength: number = minNormValue - middleNormValue;\r\n      const pLength: number = minValue - middleValue;\r\n\r\n      if (pLength != 0.0) {\r\n        result = paramValue * (nLength / pLength);\r\n        result += middleNormValue;\r\n      }\r\n\r\n      break;\r\n    }\r\n    case 0: {\r\n      result = middleNormValue;\r\n\r\n      break;\r\n    }\r\n    default: {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return isInverted ? result : result * -1.0;\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismphysics';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismPhysics = $.CubismPhysics;\r\n  export type CubismPhysics = $.CubismPhysics;\r\n  export const Options = $.Options;\r\n  export type Options = $.Options;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Constant } from '../live2dcubismframework';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { csmRect } from '../type/csmrectf';\r\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { CubismClippingContext, CubismTextureColor } from './cubismrenderer';\r\nimport { CubismLogError, CubismLogWarning } from '../utils/cubismdebug';\r\n\r\nconst ColorChannelCount = 4; // 実験時に1チャンネルの場合は1、RGBだけの場合は3、アルファも含める場合は4\r\nconst ClippingMaskMaxCountOnDefault = 36; // 通常のフレームバッファ一枚あたりのマスク最大数\r\nconst ClippingMaskMaxCountOnMultiRenderTexture = 32; // フレームバッファが2枚以上ある場合のフレームバッファ一枚あたりのマスク最大数\r\n\r\nexport type ClippingContextConstructor<\r\n  T_ClippingContext extends CubismClippingContext\r\n> = new (\r\n  manager: CubismClippingManager<T_ClippingContext>,\r\n  drawableMasks: Int32Array,\r\n  drawableMaskCounts: number\r\n) => T_ClippingContext;\r\n\r\nexport interface ICubismClippingManager {\r\n  getClippingMaskBufferSize(): number;\r\n}\r\n\r\nexport abstract class CubismClippingManager<\r\n  T_ClippingContext extends CubismClippingContext\r\n> implements ICubismClippingManager\r\n{\r\n  /**\r\n   * 건설자\r\n   */\r\n  public constructor(\r\n    clippingContextFactory: ClippingContextConstructor<T_ClippingContext>\r\n  ) {\r\n    this._renderTextureCount = 0;\r\n    this._clippingMaskBufferSize = 256;\r\n    this._clippingContextListForMask = new csmVector<T_ClippingContext>();\r\n    this._clippingContextListForDraw = new csmVector<T_ClippingContext>();\r\n    this._channelColors = new csmVector<CubismTextureColor>();\r\n    this._tmpBoundsOnModel = new csmRect();\r\n    this._tmpMatrix = new CubismMatrix44();\r\n    this._tmpMatrixForMask = new CubismMatrix44();\r\n    this._tmpMatrixForDraw = new CubismMatrix44();\r\n\r\n    this._clippingContexttConstructor = clippingContextFactory;\r\n\r\n    let tmp: CubismTextureColor = new CubismTextureColor();\r\n    tmp.r = 1.0;\r\n    tmp.g = 0.0;\r\n    tmp.b = 0.0;\r\n    tmp.a = 0.0;\r\n    this._channelColors.pushBack(tmp);\r\n\r\n    tmp = new CubismTextureColor();\r\n    tmp.r = 0.0;\r\n    tmp.g = 1.0;\r\n    tmp.b = 0.0;\r\n    tmp.a = 0.0;\r\n    this._channelColors.pushBack(tmp);\r\n\r\n    tmp = new CubismTextureColor();\r\n    tmp.r = 0.0;\r\n    tmp.g = 0.0;\r\n    tmp.b = 1.0;\r\n    tmp.a = 0.0;\r\n    this._channelColors.pushBack(tmp);\r\n\r\n    tmp = new CubismTextureColor();\r\n    tmp.r = 0.0;\r\n    tmp.g = 0.0;\r\n    tmp.b = 0.0;\r\n    tmp.a = 1.0;\r\n    this._channelColors.pushBack(tmp);\r\n  }\r\n\r\n  /**\r\n   * Desprocutan 동등한 처리\r\n   */\r\n  public release(): void {\r\n    for (let i = 0; i < this._clippingContextListForMask.getSize(); i++) {\r\n      if (this._clippingContextListForMask.at(i)) {\r\n        this._clippingContextListForMask.at(i).release();\r\n        this._clippingContextListForMask.set(i, void 0);\r\n      }\r\n      this._clippingContextListForMask.set(i, null);\r\n    }\r\n    this._clippingContextListForMask = null;\r\n\r\n    // _clippingContextListForDrawは_clippingContextListForMask인스턴스를 나타냅니다。위의 프로세스에서는 각 요소에 대한 삭제가 필요하지 않습니다.。\r\n    for (let i = 0; i < this._clippingContextListForDraw.getSize(); i++) {\r\n      this._clippingContextListForDraw.set(i, null);\r\n    }\r\n    this._clippingContextListForDraw = null;\r\n\r\n    for (let i = 0; i < this._channelColors.getSize(); i++) {\r\n      this._channelColors.set(i, null);\r\n    }\r\n\r\n    this._channelColors = null;\r\n\r\n    if (this._clearedFrameBufferFlags != null) {\r\n      this._clearedFrameBufferFlags.clear();\r\n    }\r\n    this._clearedFrameBufferFlags = null;\r\n  }\r\n\r\n  /**\r\n   * マネージャの初期化処理\r\n   * クリッピングマスクを使う描画オブジェクトの登録を行う\r\n   * @param model モデルのインスタンス\r\n   * @param renderTextureCount バッファの生成数\r\n   */\r\n  public initialize(model: CubismModel, renderTextureCount: number): void {\r\n    // レンダーテクスチャの合計枚数の設定\r\n    // 1以上の整数でない場合はそれぞれ警告を出す\r\n    if (renderTextureCount % 1 != 0) {\r\n      CubismLogWarning(\r\n        'The number of render textures must be specified as an integer. The decimal point is rounded down and corrected to an integer.'\r\n      );\r\n      // 小数点以下を除去\r\n      renderTextureCount = ~~renderTextureCount;\r\n    }\r\n    if (renderTextureCount < 1) {\r\n      CubismLogWarning(\r\n        'The number of render textures must be an integer greater than or equal to 1. Set the number of render textures to 1.'\r\n      );\r\n    }\r\n    // 負の値が使われている場合は強制的に1枚と設定する\r\n    this._renderTextureCount = renderTextureCount < 1 ? 1 : renderTextureCount;\r\n\r\n    this._clearedFrameBufferFlags = new csmVector<boolean>(\r\n      this._renderTextureCount\r\n    );\r\n\r\n    // 클리핑 마스크를 사용하는 모든 그리기 개체를 등록하십시오\r\n    // 클리핑 마스크는 일반적으로 몇도에만 사용됩니다.\r\n    for (let i = 0; i < model.getDrawableCount(); i++) {\r\n      if (model.getDrawableMaskCounts()[i] <= 0) {\r\n        // クリッピングマスクが使用されていないアートメッシュ（多くの場合使用しない）\r\n        this._clippingContextListForDraw.pushBack(null);\r\n        continue;\r\n      }\r\n\r\n      // 既にあるClipContextと同じかチェックする\r\n      let clippingContext: T_ClippingContext = this.findSameClip(\r\n        model.getDrawableMasks()[i],\r\n        model.getDrawableMaskCounts()[i]\r\n      );\r\n      if (clippingContext == null) {\r\n        // 同一のマスクが存在していない場合は生成する\r\n\r\n        clippingContext = new this._clippingContexttConstructor(\r\n          this,\r\n          model.getDrawableMasks()[i],\r\n          model.getDrawableMaskCounts()[i]\r\n        );\r\n        this._clippingContextListForMask.pushBack(clippingContext);\r\n      }\r\n\r\n      clippingContext.addClippedDrawable(i);\r\n\r\n      this._clippingContextListForDraw.pushBack(clippingContext);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 既にマスクを作っているかを確認\r\n   * 作っている様であれば該当するクリッピングマスクのインスタンスを返す\r\n   * 作っていなければNULLを返す\r\n   * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのリスト\r\n   * @param drawableMaskCounts 描画オブジェクトをマスクする描画オブジェクトの数\r\n   * @return 該当するクリッピングマスクが存在すればインスタンスを返し、なければNULLを返す\r\n   */\r\n  public findSameClip(\r\n    drawableMasks: Int32Array,\r\n    drawableMaskCounts: number\r\n  ): T_ClippingContext {\r\n    // 作成済みClippingContextと一致するか確認\r\n    for (let i = 0; i < this._clippingContextListForMask.getSize(); i++) {\r\n      const clippingContext: T_ClippingContext =\r\n        this._clippingContextListForMask.at(i);\r\n      const count: number = clippingContext._clippingIdCount;\r\n\r\n      // 個数が違う場合は別物\r\n      if (count != drawableMaskCounts) {\r\n        continue;\r\n      }\r\n\r\n      let sameCount = 0;\r\n\r\n      // 同じIDを持つか確認。配列の数が同じなので、一致した個数が同じなら同じ物を持つとする\r\n      for (let j = 0; j < count; j++) {\r\n        const clipId: number = clippingContext._clippingIdList[j];\r\n\r\n        for (let k = 0; k < count; k++) {\r\n          if (drawableMasks[k] == clipId) {\r\n            sameCount++;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (sameCount == count) {\r\n        return clippingContext;\r\n      }\r\n    }\r\n\r\n    return null; // 見つからなかった\r\n  }\r\n\r\n  /**\r\n   * 高精細マスク処理用の行列を計算する\r\n   * @param model モデルのインスタンス\r\n   * @param isRightHanded 処理が右手系であるか\r\n   */\r\n  public setupMatrixForHighPrecision(\r\n    model: CubismModel,\r\n    isRightHanded: boolean\r\n  ): void {\r\n    // 全てのクリッピングを用意する\r\n    // 同じクリップ（複数の場合はまとめて一つのクリップ）を使う場合は1度だけ設定する\r\n    let usingClipCount = 0;\r\n    for (\r\n      let clipIndex = 0;\r\n      clipIndex < this._clippingContextListForMask.getSize();\r\n      clipIndex++\r\n    ) {\r\n      // １つのクリッピングマスクに関して\r\n      const cc: T_ClippingContext =\r\n        this._clippingContextListForMask.at(clipIndex);\r\n\r\n      // このクリップを利用する描画オブジェクト群全体を囲む矩形を計算\r\n      this.calcClippedDrawTotalBounds(model, cc);\r\n\r\n      if (cc._isUsing) {\r\n        usingClipCount++; // 使用中としてカウント\r\n      }\r\n    }\r\n\r\n    // マスク行列作成処理\r\n    if (usingClipCount > 0) {\r\n      this.setupLayoutBounds(0);\r\n\r\n      // サイズがレンダーテクスチャの枚数と合わない場合は合わせる\r\n      if (this._clearedFrameBufferFlags.getSize() != this._renderTextureCount) {\r\n        this._clearedFrameBufferFlags.clear();\r\n        for (let i = 0; i < this._renderTextureCount; i++) {\r\n          this._clearedFrameBufferFlags.pushBack(false);\r\n        }\r\n      } else {\r\n        // マスクのクリアフラグを毎フレーム開始時に初期化\r\n        for (let i = 0; i < this._renderTextureCount; i++) {\r\n          this._clearedFrameBufferFlags.set(i, false);\r\n        }\r\n      }\r\n\r\n      // 実際にマスクを生成する\r\n      // 全てのマスクをどの様にレイアウトして描くかを決定し、ClipContext , ClippedDrawContext に記憶する\r\n      for (\r\n        let clipIndex = 0;\r\n        clipIndex < this._clippingContextListForMask.getSize();\r\n        clipIndex++\r\n      ) {\r\n        // --- 実際に１つのマスクを描く ---\r\n        const clipContext: T_ClippingContext =\r\n          this._clippingContextListForMask.at(clipIndex);\r\n        const allClippedDrawRect: csmRect = clipContext._allClippedDrawRect; //このマスクを使う、全ての描画オブジェクトの論理座標上の囲み矩形\r\n        const layoutBoundsOnTex01 = clipContext._layoutBounds; //この中にマスクを収める\r\n        const margin = 0.05;\r\n        let scaleX = 0.0;\r\n        let scaleY = 0.0;\r\n        const ppu: number = model.getPixelsPerUnit();\r\n        const maskPixelSize: number = clipContext\r\n          .getClippingManager()\r\n          .getClippingMaskBufferSize();\r\n        const physicalMaskWidth: number =\r\n          layoutBoundsOnTex01.width * maskPixelSize;\r\n        const physicalMaskHeight: number =\r\n          layoutBoundsOnTex01.height * maskPixelSize;\r\n\r\n        this._tmpBoundsOnModel.setRect(allClippedDrawRect);\r\n        if (this._tmpBoundsOnModel.width * ppu > physicalMaskWidth) {\r\n          this._tmpBoundsOnModel.expand(allClippedDrawRect.width * margin, 0.0);\r\n          scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\r\n        } else {\r\n          scaleX = ppu / physicalMaskWidth;\r\n        }\r\n\r\n        if (this._tmpBoundsOnModel.height * ppu > physicalMaskHeight) {\r\n          this._tmpBoundsOnModel.expand(\r\n            0.0,\r\n            allClippedDrawRect.height * margin\r\n          );\r\n          scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\r\n        } else {\r\n          scaleY = ppu / physicalMaskHeight;\r\n        }\r\n\r\n        // マスク生成時に使う行列を求める\r\n        this.createMatrixForMask(\r\n          isRightHanded,\r\n          layoutBoundsOnTex01,\r\n          scaleX,\r\n          scaleY\r\n        );\r\n\r\n        clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\r\n        clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * マスク作成・描画用の行列を作成する。\r\n   * @param isRightHanded 座標を右手系として扱うかを指定\r\n   * @param layoutBoundsOnTex01 マスクを収める領域\r\n   * @param scaleX 描画オブジェクトの伸縮率\r\n   * @param scaleY 描画オブジェクトの伸縮率\r\n   */\r\n  public createMatrixForMask(\r\n    isRightHanded: boolean,\r\n    layoutBoundsOnTex01: csmRect,\r\n    scaleX: number,\r\n    scaleY: number\r\n  ): void {\r\n    this._tmpMatrix.loadIdentity();\r\n    {\r\n      // Layout0..1 を -1..1に変換\r\n      this._tmpMatrix.translateRelative(-1.0, -1.0);\r\n      this._tmpMatrix.scaleRelative(2.0, 2.0);\r\n    }\r\n    {\r\n      // view to Layout0..1\r\n      this._tmpMatrix.translateRelative(\r\n        layoutBoundsOnTex01.x,\r\n        layoutBoundsOnTex01.y\r\n      ); //new = [translate]\r\n      this._tmpMatrix.scaleRelative(scaleX, scaleY); //new = [translate][scale]\r\n      this._tmpMatrix.translateRelative(\r\n        -this._tmpBoundsOnModel.x,\r\n        -this._tmpBoundsOnModel.y\r\n      ); //new = [translate][scale][translate]\r\n    }\r\n    // tmpMatrixForMask が計算結果\r\n    this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\r\n\r\n    this._tmpMatrix.loadIdentity();\r\n    {\r\n      this._tmpMatrix.translateRelative(\r\n        layoutBoundsOnTex01.x,\r\n        layoutBoundsOnTex01.y * (isRightHanded ? -1.0 : 1.0)\r\n      ); //new = [translate]\r\n      this._tmpMatrix.scaleRelative(\r\n        scaleX,\r\n        scaleY * (isRightHanded ? -1.0 : 1.0)\r\n      ); //new = [translate][scale]\r\n      this._tmpMatrix.translateRelative(\r\n        -this._tmpBoundsOnModel.x,\r\n        -this._tmpBoundsOnModel.y\r\n      ); //new = [translate][scale][translate]\r\n    }\r\n\r\n    this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\r\n  }\r\n\r\n  /**\r\n   * クリッピングコンテキストを配置するレイアウト\r\n   * 指定された数のレンダーテクスチャを極力いっぱいに使ってマスクをレイアウトする\r\n   * マスクグループの数が4以下ならRGBA各チャンネルに一つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する。\r\n   *\r\n   * @param usingClipCount 配置するクリッピングコンテキストの数\r\n   */\r\n  public setupLayoutBounds(usingClipCount: number): void {\r\n    const useClippingMaskMaxCount =\r\n      this._renderTextureCount <= 1\r\n        ? ClippingMaskMaxCountOnDefault\r\n        : ClippingMaskMaxCountOnMultiRenderTexture * this._renderTextureCount;\r\n\r\n    if (usingClipCount <= 0 || usingClipCount > useClippingMaskMaxCount) {\r\n      if (usingClipCount > useClippingMaskMaxCount) {\r\n        // マスクの制限数の警告を出す\r\n        CubismLogError(\r\n          'not supported mask count : {0}\\n[Details] render texture count : {1}, mask count : {2}',\r\n          usingClipCount - useClippingMaskMaxCount,\r\n          this._renderTextureCount,\r\n          usingClipCount\r\n        );\r\n      }\r\n      // この場合は一つのマスクターゲットを毎回クリアして使用する\r\n      for (\r\n        let index = 0;\r\n        index < this._clippingContextListForMask.getSize();\r\n        index++\r\n      ) {\r\n        const clipContext: T_ClippingContext =\r\n          this._clippingContextListForMask.at(index);\r\n        clipContext._layoutChannelIndex = 0; // どうせ毎回消すので固定\r\n        clipContext._layoutBounds.x = 0.0;\r\n        clipContext._layoutBounds.y = 0.0;\r\n        clipContext._layoutBounds.width = 1.0;\r\n        clipContext._layoutBounds.height = 1.0;\r\n        clipContext._bufferIndex = 0;\r\n      }\r\n      return;\r\n    }\r\n\r\n    // レンダーテクスチャが1枚なら9分割する（最大36枚）\r\n    const layoutCountMaxValue = this._renderTextureCount <= 1 ? 9 : 8;\r\n\r\n    // 指定された数のレンダーテクスチャを極力いっぱいに使ってマスクをレイアウトする（デフォルトなら1）。\r\n    // マスクグループの数が4以下ならRGBA各チャンネルに1つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する。\r\n    let countPerSheetDiv: number = usingClipCount / this._renderTextureCount; // レンダーテクスチャ1枚あたり何枚割り当てるか。\r\n    const reduceLayoutTextureCount: number =\r\n      usingClipCount % this._renderTextureCount; // レイアウトの数を1枚減らすレンダーテクスチャの数（この数だけのレンダーテクスチャが対象）。\r\n\r\n    // 1枚に割り当てるマスクの分割数を取りたいため、小数点は切り上げる\r\n    countPerSheetDiv = Math.ceil(countPerSheetDiv);\r\n\r\n    // RGBAを順番に使っていく\r\n    let divCount: number = countPerSheetDiv / ColorChannelCount; // 1チャンネルに配置する基本のマスク\r\n    const modCount: number = countPerSheetDiv % ColorChannelCount; // 余り、この番号のチャンネルまでに一つずつ配分する（インデックスではない）\r\n\r\n    // 小数点は切り捨てる\r\n    divCount = ~~divCount;\r\n\r\n    // RGBAそれぞれのチャンネルを用意していく（0:R, 1:G, 2:B, 3:A）\r\n    let curClipIndex = 0; // 順番に設定していく\r\n\r\n    for (\r\n      let renderTextureIndex = 0;\r\n      renderTextureIndex < this._renderTextureCount;\r\n      renderTextureIndex++\r\n    ) {\r\n      for (\r\n        let channelIndex = 0;\r\n        channelIndex < ColorChannelCount;\r\n        channelIndex++\r\n      ) {\r\n        // このチャンネルにレイアウトする数\r\n        // NOTE: レイアウト数 = 1チャンネルに配置する基本のマスク + 余りのマスクを置くチャンネルなら1つ追加\r\n        let layoutCount: number = divCount + (channelIndex < modCount ? 1 : 0);\r\n\r\n        // レイアウトの数を1枚減らす場合にそれを行うチャンネルを決定\r\n        // divが0の時は正常なインデックスの範囲内になるように調整\r\n        const checkChannelIndex = modCount + (divCount < 1 ? -1 : 0);\r\n\r\n        // 今回が対象のチャンネルかつ、レイアウトの数を1枚減らすレンダーテクスチャが存在する場合\r\n        if (channelIndex == checkChannelIndex && reduceLayoutTextureCount > 0) {\r\n          // 現在のレンダーテクスチャが、対象のレンダーテクスチャであればレイアウトの数を1枚減らす。\r\n          layoutCount -= !(renderTextureIndex < reduceLayoutTextureCount)\r\n            ? 1\r\n            : 0;\r\n        }\r\n\r\n        // 分割方法を決定する\r\n        if (layoutCount == 0) {\r\n          // 何もしない\r\n        } else if (layoutCount == 1) {\r\n          // 全てをそのまま使う\r\n          const clipContext: T_ClippingContext =\r\n            this._clippingContextListForMask.at(curClipIndex++);\r\n          clipContext._layoutChannelIndex = channelIndex;\r\n          clipContext._layoutBounds.x = 0.0;\r\n          clipContext._layoutBounds.y = 0.0;\r\n          clipContext._layoutBounds.width = 1.0;\r\n          clipContext._layoutBounds.height = 1.0;\r\n          clipContext._bufferIndex = renderTextureIndex;\r\n        } else if (layoutCount == 2) {\r\n          for (let i = 0; i < layoutCount; i++) {\r\n            let xpos: number = i % 2;\r\n\r\n            // 小数点は切り捨てる\r\n            xpos = ~~xpos;\r\n\r\n            const cc: T_ClippingContext = this._clippingContextListForMask.at(\r\n              curClipIndex++\r\n            );\r\n            cc._layoutChannelIndex = channelIndex;\r\n\r\n            // UVを2つに分解して使う\r\n            cc._layoutBounds.x = xpos * 0.5;\r\n            cc._layoutBounds.y = 0.0;\r\n            cc._layoutBounds.width = 0.5;\r\n            cc._layoutBounds.height = 1.0;\r\n            cc._bufferIndex = renderTextureIndex;\r\n          }\r\n        } else if (layoutCount <= 4) {\r\n          // 4分割して使う\r\n          for (let i = 0; i < layoutCount; i++) {\r\n            let xpos: number = i % 2;\r\n            let ypos: number = i / 2;\r\n\r\n            // 小数点は切り捨てる\r\n            xpos = ~~xpos;\r\n            ypos = ~~ypos;\r\n\r\n            const cc = this._clippingContextListForMask.at(curClipIndex++);\r\n            cc._layoutChannelIndex = channelIndex;\r\n\r\n            cc._layoutBounds.x = xpos * 0.5;\r\n            cc._layoutBounds.y = ypos * 0.5;\r\n            cc._layoutBounds.width = 0.5;\r\n            cc._layoutBounds.height = 0.5;\r\n            cc._bufferIndex = renderTextureIndex;\r\n          }\r\n        } else if (layoutCount <= layoutCountMaxValue) {\r\n          // 9分割して使う\r\n          for (let i = 0; i < layoutCount; i++) {\r\n            let xpos = i % 3;\r\n            let ypos = i / 3;\r\n\r\n            // 小数点は切り捨てる\r\n            xpos = ~~xpos;\r\n            ypos = ~~ypos;\r\n\r\n            const cc: T_ClippingContext = this._clippingContextListForMask.at(\r\n              curClipIndex++\r\n            );\r\n            cc._layoutChannelIndex = channelIndex;\r\n\r\n            cc._layoutBounds.x = xpos / 3.0;\r\n            cc._layoutBounds.y = ypos / 3.0;\r\n            cc._layoutBounds.width = 1.0 / 3.0;\r\n            cc._layoutBounds.height = 1.0 / 3.0;\r\n            cc._bufferIndex = renderTextureIndex;\r\n          }\r\n        } else {\r\n          // マスクの制限枚数を超えた場合の処理\r\n          CubismLogError(\r\n            'not supported mask count : {0}\\n[Details] render texture count : {1}, mask count : {2}',\r\n            usingClipCount - useClippingMaskMaxCount,\r\n            this._renderTextureCount,\r\n            usingClipCount\r\n          );\r\n\r\n          // SetupShaderProgramでオーバーアクセスが発生するので仮で数値を入れる\r\n          // もちろん描画結果は正しいものではなくなる\r\n          for (let index = 0; index < layoutCount; index++) {\r\n            const cc: T_ClippingContext = this._clippingContextListForMask.at(\r\n              curClipIndex++\r\n            );\r\n\r\n            cc._layoutChannelIndex = 0;\r\n\r\n            cc._layoutBounds.x = 0.0;\r\n            cc._layoutBounds.y = 0.0;\r\n            cc._layoutBounds.width = 1.0;\r\n            cc._layoutBounds.height = 1.0;\r\n            cc._bufferIndex = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * マスクされる描画オブジェクト群全体を囲む矩形（モデル座標系）を計算する\r\n   * @param model モデルのインスタンス\r\n   * @param clippingContext クリッピングマスクのコンテキスト\r\n   */\r\n  public calcClippedDrawTotalBounds(\r\n    model: CubismModel,\r\n    clippingContext: T_ClippingContext\r\n  ): void {\r\n    // 被クリッピングマスク（マスクされる描画オブジェクト）の全体の矩形\r\n    let clippedDrawTotalMinX: number = Number.MAX_VALUE;\r\n    let clippedDrawTotalMinY: number = Number.MAX_VALUE;\r\n    let clippedDrawTotalMaxX: number = Number.MIN_VALUE;\r\n    let clippedDrawTotalMaxY: number = Number.MIN_VALUE;\r\n\r\n    // このマスクが実際に必要か判定する\r\n    // このクリッピングを利用する「描画オブジェクト」がひとつでも使用可能であればマスクを生成する必要がある\r\n    const clippedDrawCount: number =\r\n      clippingContext._clippedDrawableIndexList.length;\r\n\r\n    for (\r\n      let clippedDrawableIndex = 0;\r\n      clippedDrawableIndex < clippedDrawCount;\r\n      clippedDrawableIndex++\r\n    ) {\r\n      // マスクを使用する描画オブジェクトの描画される矩形を求める\r\n      const drawableIndex: number =\r\n        clippingContext._clippedDrawableIndexList[clippedDrawableIndex];\r\n\r\n      const drawableVertexCount: number =\r\n        model.getDrawableVertexCount(drawableIndex);\r\n      const drawableVertexes: Float32Array =\r\n        model.getDrawableVertices(drawableIndex);\r\n\r\n      let minX: number = Number.MAX_VALUE;\r\n      let minY: number = Number.MAX_VALUE;\r\n      let maxX: number = -Number.MAX_VALUE;\r\n      let maxY: number = -Number.MAX_VALUE;\r\n\r\n      const loop: number = drawableVertexCount * Constant.vertexStep;\r\n      for (\r\n        let pi: number = Constant.vertexOffset;\r\n        pi < loop;\r\n        pi += Constant.vertexStep\r\n      ) {\r\n        const x: number = drawableVertexes[pi];\r\n        const y: number = drawableVertexes[pi + 1];\r\n\r\n        if (x < minX) {\r\n          minX = x;\r\n        }\r\n        if (x > maxX) {\r\n          maxX = x;\r\n        }\r\n        if (y < minY) {\r\n          minY = y;\r\n        }\r\n        if (y > maxY) {\r\n          maxY = y;\r\n        }\r\n      }\r\n\r\n      // 有効な点が一つも取れなかったのでスキップ\r\n      if (minX == Number.MAX_VALUE) {\r\n        continue;\r\n      }\r\n\r\n      // 全体の矩形に反映\r\n      if (minX < clippedDrawTotalMinX) {\r\n        clippedDrawTotalMinX = minX;\r\n      }\r\n      if (minY < clippedDrawTotalMinY) {\r\n        clippedDrawTotalMinY = minY;\r\n      }\r\n      if (maxX > clippedDrawTotalMaxX) {\r\n        clippedDrawTotalMaxX = maxX;\r\n      }\r\n      if (maxY > clippedDrawTotalMaxY) {\r\n        clippedDrawTotalMaxY = maxY;\r\n      }\r\n\r\n      if (clippedDrawTotalMinX == Number.MAX_VALUE) {\r\n        clippingContext._allClippedDrawRect.x = 0.0;\r\n        clippingContext._allClippedDrawRect.y = 0.0;\r\n        clippingContext._allClippedDrawRect.width = 0.0;\r\n        clippingContext._allClippedDrawRect.height = 0.0;\r\n        clippingContext._isUsing = false;\r\n      } else {\r\n        clippingContext._isUsing = true;\r\n        const w: number = clippedDrawTotalMaxX - clippedDrawTotalMinX;\r\n        const h: number = clippedDrawTotalMaxY - clippedDrawTotalMinY;\r\n        clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\r\n        clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\r\n        clippingContext._allClippedDrawRect.width = w;\r\n        clippingContext._allClippedDrawRect.height = h;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 画面描画に使用するクリッピングマスクのリストを取得する\r\n   * @return 画面描画に使用するクリッピングマスクのリスト\r\n   */\r\n  public getClippingContextListForDraw(): csmVector<T_ClippingContext> {\r\n    return this._clippingContextListForDraw;\r\n  }\r\n\r\n  /**\r\n   * クリッピングマスクバッファのサイズを取得する\r\n   * @return クリッピングマスクバッファのサイズ\r\n   */\r\n  public getClippingMaskBufferSize(): number {\r\n    return this._clippingMaskBufferSize;\r\n  }\r\n\r\n  /**\r\n   * このバッファのレンダーテクスチャの枚数を取得する\r\n   * @return このバッファのレンダーテクスチャの枚数\r\n   */\r\n  public getRenderTextureCount(): number {\r\n    return this._renderTextureCount;\r\n  }\r\n\r\n  /**\r\n   * カラーチャンネル（RGBA）のフラグを取得する\r\n   * @param channelNo カラーチャンネル（RGBA）の番号（0:R, 1:G, 2:B, 3:A）\r\n   */\r\n  public getChannelFlagAsColor(channelNo: number): CubismTextureColor {\r\n    return this._channelColors.at(channelNo);\r\n  }\r\n\r\n  /**\r\n   * クリッピングマスクバッファのサイズを設定する\r\n   * @param size クリッピングマスクバッファのサイズ\r\n   */\r\n  public setClippingMaskBufferSize(size: number): void {\r\n    this._clippingMaskBufferSize = size;\r\n  }\r\n\r\n  protected _clearedFrameBufferFlags: csmVector<boolean>; //マスクのクリアフラグの配列\r\n\r\n  protected _channelColors: csmVector<CubismTextureColor>;\r\n  protected _clippingContextListForMask: csmVector<T_ClippingContext>; // マスク用クリッピングコンテキストのリスト\r\n  protected _clippingContextListForDraw: csmVector<T_ClippingContext>; // 描画用クリッピングコンテキストのリスト\r\n  protected _clippingMaskBufferSize: number; // クリッピングマスクのバッファサイズ（初期値:256）\r\n  protected _renderTextureCount: number; // 生成するレンダーテクスチャの枚数\r\n\r\n  protected _tmpMatrix: CubismMatrix44; // マスク計算用の行列\r\n  protected _tmpMatrixForMask: CubismMatrix44; // マスク計算用の行列\r\n  protected _tmpMatrixForDraw: CubismMatrix44; // マスク計算用の行列\r\n  protected _tmpBoundsOnModel: csmRect; // マスク配置計算用の矩形\r\n\r\n  protected _clippingContexttConstructor: ClippingContextConstructor<T_ClippingContext>;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmRect } from '../type/csmrectf';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CubismLogError } from '../utils/cubismdebug';\r\nimport { CubismBlendMode, CubismTextureColor } from './cubismrenderer';\r\nimport { CubismRenderer_WebGL } from './cubismrenderer_webgl';\r\n\r\nlet s_instance: CubismShader_WebGL;\r\nconst ShaderCount = 10; // シェーダーの数 = マスク生成用 + (通常用 + 加算 + 乗算) * (マスク無の乗算済アルファ対応版 + マスク有の乗算済アルファ対応版 + マスク有反転の乗算済アルファ対応版)\r\n\r\n/**\r\n * WebGL用のシェーダープログラムを生成・破棄するクラス\r\n * シングルトンなクラスであり、CubismShader_WebGL.getInstanceからアクセスする。\r\n */\r\nexport class CubismShader_WebGL {\r\n  /**\r\n   * インスタンスを取得する（シングルトン）\r\n   * @return インスタンス\r\n   */\r\n  public static getInstance(): CubismShader_WebGL {\r\n    if (s_instance == null) {\r\n      s_instance = new CubismShader_WebGL();\r\n\r\n      return s_instance;\r\n    }\r\n    return s_instance;\r\n  }\r\n\r\n  /**\r\n   * インスタンスを開放する（シングルトン）\r\n   */\r\n  public static deleteInstance(): void {\r\n    if (s_instance) {\r\n      s_instance.release();\r\n      s_instance = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * privateなコンストラクタ\r\n   */\r\n  private constructor() {\r\n    this._shaderSets = new csmVector<CubismShaderSet>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    this.releaseShaderProgram();\r\n  }\r\n\r\n  /**\r\n   * 描画用のシェーダプログラムの一連のセットアップを実行する\r\n   * @param renderer レンダラー\r\n   * @param model 描画対象のモデル\r\n   * @param index 描画対象のメッシュのインデックス\r\n   */\r\n  public setupShaderProgramForDraw(\r\n    renderer: CubismRenderer_WebGL,\r\n    model: Readonly<CubismModel>,\r\n    index: number\r\n  ): void {\r\n    if (!renderer.isPremultipliedAlpha()) {\r\n      CubismLogError('NoPremultipliedAlpha is not allowed');\r\n    }\r\n\r\n    if (this._shaderSets.getSize() == 0) {\r\n      this.generateShaders();\r\n    }\r\n\r\n    // Blending\r\n    let srcColor: number;\r\n    let dstColor: number;\r\n    let srcAlpha: number;\r\n    let dstAlpha: number;\r\n\r\n    // _shaderSets用のオフセット計算\r\n    const masked: boolean = renderer.getClippingContextBufferForDraw() != null; // この描画オブジェクトはマスク対象か\r\n    const invertedMask: boolean = model.getDrawableInvertedMaskBit(index);\r\n    const offset: number = masked ? (invertedMask ? 2 : 1) : 0;\r\n\r\n    let shaderSet: CubismShaderSet;\r\n    switch (model.getDrawableBlendMode(index)) {\r\n      case CubismBlendMode.CubismBlendMode_Normal:\r\n      default:\r\n        shaderSet = this._shaderSets.at(\r\n          ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset\r\n        );\r\n        srcColor = this.gl.ONE;\r\n        dstColor = this.gl.ONE_MINUS_SRC_ALPHA;\r\n        srcAlpha = this.gl.ONE;\r\n        dstAlpha = this.gl.ONE_MINUS_SRC_ALPHA;\r\n        break;\r\n\r\n      case CubismBlendMode.CubismBlendMode_Additive:\r\n        shaderSet = this._shaderSets.at(\r\n          ShaderNames.ShaderNames_AddPremultipliedAlpha + offset\r\n        );\r\n        srcColor = this.gl.ONE;\r\n        dstColor = this.gl.ONE;\r\n        srcAlpha = this.gl.ZERO;\r\n        dstAlpha = this.gl.ONE;\r\n        break;\r\n\r\n      case CubismBlendMode.CubismBlendMode_Multiplicative:\r\n        shaderSet = this._shaderSets.at(\r\n          ShaderNames.ShaderNames_MultPremultipliedAlpha + offset\r\n        );\r\n        srcColor = this.gl.DST_COLOR;\r\n        dstColor = this.gl.ONE_MINUS_SRC_ALPHA;\r\n        srcAlpha = this.gl.ZERO;\r\n        dstAlpha = this.gl.ONE;\r\n        break;\r\n    }\r\n\r\n    this.gl.useProgram(shaderSet.shaderProgram);\r\n\r\n    // 頂点配列の設定\r\n    if (renderer._bufferData.vertex == null) {\r\n      renderer._bufferData.vertex = this.gl.createBuffer();\r\n    }\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.vertex);\r\n\r\n    // 頂点配列の設定\r\n    const vertexArray: Float32Array = model.getDrawableVertices(index);\r\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\r\n    this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\r\n    this.gl.vertexAttribPointer(\r\n      shaderSet.attributePositionLocation,\r\n      2,\r\n      this.gl.FLOAT,\r\n      false,\r\n      0,\r\n      0\r\n    );\r\n\r\n    // テクスチャ頂点の設定\r\n    if (renderer._bufferData.uv == null) {\r\n      renderer._bufferData.uv = this.gl.createBuffer();\r\n    }\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.uv);\r\n    const uvArray: Float32Array = model.getDrawableVertexUvs(index);\r\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\r\n    this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\r\n    this.gl.vertexAttribPointer(\r\n      shaderSet.attributeTexCoordLocation,\r\n      2,\r\n      this.gl.FLOAT,\r\n      false,\r\n      0,\r\n      0\r\n    );\r\n\r\n    if (masked) {\r\n      this.gl.activeTexture(this.gl.TEXTURE1);\r\n\r\n      // frameBufferに書かれたテクスチャ\r\n      const tex: WebGLTexture = renderer\r\n        .getClippingContextBufferForDraw()\r\n        .getClippingManager()\r\n        .getColorBuffer()\r\n        .at(renderer.getClippingContextBufferForDraw()._bufferIndex);\r\n      this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\r\n      this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\r\n\r\n      // view座標をClippingContextの座標に変換するための行列を設定\r\n      this.gl.uniformMatrix4fv(\r\n        shaderSet.uniformClipMatrixLocation,\r\n        false,\r\n        renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray()\r\n      );\r\n\r\n      // 使用するカラーチャンネルを設定\r\n      const channelIndex: number =\r\n        renderer.getClippingContextBufferForDraw()._layoutChannelIndex;\r\n      const colorChannel: CubismTextureColor = renderer\r\n        .getClippingContextBufferForDraw()\r\n        .getClippingManager()\r\n        .getChannelFlagAsColor(channelIndex);\r\n      this.gl.uniform4f(\r\n        shaderSet.uniformChannelFlagLocation,\r\n        colorChannel.r,\r\n        colorChannel.g,\r\n        colorChannel.b,\r\n        colorChannel.a\r\n      );\r\n    }\r\n\r\n    // テクスチャ設定\r\n    const textureNo: number = model.getDrawableTextureIndex(index);\r\n    const textureId: WebGLTexture = renderer\r\n      .getBindedTextures()\r\n      .getValue(textureNo);\r\n    this.gl.activeTexture(this.gl.TEXTURE0);\r\n    this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\r\n    this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\r\n\r\n    //座標変換\r\n    const matrix4x4: CubismMatrix44 = renderer.getMvpMatrix();\r\n    this.gl.uniformMatrix4fv(\r\n      shaderSet.uniformMatrixLocation,\r\n      false,\r\n      matrix4x4.getArray()\r\n    );\r\n\r\n    //ベース色の取得\r\n    const baseColor: CubismTextureColor = renderer.getModelColorWithOpacity(\r\n      model.getDrawableOpacity(index)\r\n    );\r\n    const multiplyColor: CubismTextureColor = model.getMultiplyColor(index);\r\n    const screenColor: CubismTextureColor = model.getScreenColor(index);\r\n\r\n    this.gl.uniform4f(\r\n      shaderSet.uniformBaseColorLocation,\r\n      baseColor.r,\r\n      baseColor.g,\r\n      baseColor.b,\r\n      baseColor.a\r\n    );\r\n\r\n    this.gl.uniform4f(\r\n      shaderSet.uniformMultiplyColorLocation,\r\n      multiplyColor.r,\r\n      multiplyColor.g,\r\n      multiplyColor.b,\r\n      multiplyColor.a\r\n    );\r\n\r\n    this.gl.uniform4f(\r\n      shaderSet.uniformScreenColorLocation,\r\n      screenColor.r,\r\n      screenColor.g,\r\n      screenColor.b,\r\n      screenColor.a\r\n    );\r\n\r\n    // IBOを作成し、データを転送\r\n    if (renderer._bufferData.index == null) {\r\n      renderer._bufferData.index = this.gl.createBuffer();\r\n    }\r\n    const indexArray: Uint16Array = model.getDrawableVertexIndices(index);\r\n\r\n    this.gl.bindBuffer(\r\n      this.gl.ELEMENT_ARRAY_BUFFER,\r\n      renderer._bufferData.index\r\n    );\r\n    this.gl.bufferData(\r\n      this.gl.ELEMENT_ARRAY_BUFFER,\r\n      indexArray,\r\n      this.gl.DYNAMIC_DRAW\r\n    );\r\n\r\n    this.gl.blendFuncSeparate(srcColor, dstColor, srcAlpha, dstAlpha);\r\n  }\r\n\r\n  /**\r\n   * マスク用のシェーダプログラムの一連のセットアップを実行する\r\n   * @param renderer レンダラー\r\n   * @param model 描画対象のモデル\r\n   * @param index 描画対象のメッシュのインデックス\r\n   */\r\n  public setupShaderProgramForMask(\r\n    renderer: CubismRenderer_WebGL,\r\n    model: Readonly<CubismModel>,\r\n    index: number\r\n  ): void {\r\n    if (!renderer.isPremultipliedAlpha()) {\r\n      CubismLogError('NoPremultipliedAlpha is not allowed');\r\n    }\r\n\r\n    if (this._shaderSets.getSize() == 0) {\r\n      this.generateShaders();\r\n    }\r\n\r\n    const shaderSet: CubismShaderSet = this._shaderSets.at(\r\n      ShaderNames.ShaderNames_SetupMask\r\n    );\r\n    this.gl.useProgram(shaderSet.shaderProgram);\r\n\r\n    // 頂点配列の設定\r\n    if (renderer._bufferData.vertex == null) {\r\n      renderer._bufferData.vertex = this.gl.createBuffer();\r\n    }\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.vertex);\r\n    const vertexArray: Float32Array = model.getDrawableVertices(index);\r\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\r\n    this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\r\n    this.gl.vertexAttribPointer(\r\n      shaderSet.attributePositionLocation,\r\n      2,\r\n      this.gl.FLOAT,\r\n      false,\r\n      0,\r\n      0\r\n    );\r\n\r\n    //テクスチャ設定\r\n    if (renderer._bufferData.uv == null) {\r\n      renderer._bufferData.uv = this.gl.createBuffer();\r\n    }\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.uv);\r\n    const textureNo: number = model.getDrawableTextureIndex(index);\r\n    const textureId: WebGLTexture = renderer\r\n      .getBindedTextures()\r\n      .getValue(textureNo);\r\n    this.gl.activeTexture(this.gl.TEXTURE0);\r\n    this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\r\n    this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\r\n\r\n    // テクスチャ頂点の設定\r\n    if (renderer._bufferData.uv == null) {\r\n      renderer._bufferData.uv = this.gl.createBuffer();\r\n    }\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.uv);\r\n    const uvArray: Float32Array = model.getDrawableVertexUvs(index);\r\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\r\n    this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\r\n    this.gl.vertexAttribPointer(\r\n      shaderSet.attributeTexCoordLocation,\r\n      2,\r\n      this.gl.FLOAT,\r\n      false,\r\n      0,\r\n      0\r\n    );\r\n\r\n    // チャンネル\r\n    const context = renderer.getClippingContextBufferForMask();\r\n    const channelIndex: number =\r\n      renderer.getClippingContextBufferForMask()._layoutChannelIndex;\r\n    const colorChannel: CubismTextureColor = renderer\r\n      .getClippingContextBufferForMask()\r\n      .getClippingManager()\r\n      .getChannelFlagAsColor(channelIndex);\r\n    this.gl.uniform4f(\r\n      shaderSet.uniformChannelFlagLocation,\r\n      colorChannel.r,\r\n      colorChannel.g,\r\n      colorChannel.b,\r\n      colorChannel.a\r\n    );\r\n\r\n    this.gl.uniformMatrix4fv(\r\n      shaderSet.uniformClipMatrixLocation,\r\n      false,\r\n      renderer.getClippingContextBufferForMask()._matrixForMask.getArray()\r\n    );\r\n\r\n    const rect: csmRect =\r\n      renderer.getClippingContextBufferForMask()._layoutBounds;\r\n\r\n    this.gl.uniform4f(\r\n      shaderSet.uniformBaseColorLocation,\r\n      rect.x * 2.0 - 1.0,\r\n      rect.y * 2.0 - 1.0,\r\n      rect.getRight() * 2.0 - 1.0,\r\n      rect.getBottom() * 2.0 - 1.0\r\n    );\r\n\r\n    const multiplyColor: CubismTextureColor = model.getMultiplyColor(index);\r\n    const screenColor: CubismTextureColor = model.getScreenColor(index);\r\n\r\n    this.gl.uniform4f(\r\n      shaderSet.uniformMultiplyColorLocation,\r\n      multiplyColor.r,\r\n      multiplyColor.g,\r\n      multiplyColor.b,\r\n      multiplyColor.a\r\n    );\r\n\r\n    this.gl.uniform4f(\r\n      shaderSet.uniformScreenColorLocation,\r\n      screenColor.r,\r\n      screenColor.g,\r\n      screenColor.b,\r\n      screenColor.a\r\n    );\r\n\r\n    // Blending\r\n    const srcColor: number = this.gl.ZERO;\r\n    const dstColor: number = this.gl.ONE_MINUS_SRC_COLOR;\r\n    const srcAlpha: number = this.gl.ZERO;\r\n    const dstAlpha: number = this.gl.ONE_MINUS_SRC_ALPHA;\r\n\r\n    // IBOを作成し、データを転送\r\n    if (renderer._bufferData.index == null) {\r\n      renderer._bufferData.index = this.gl.createBuffer();\r\n    }\r\n    const indexArray: Uint16Array = model.getDrawableVertexIndices(index);\r\n\r\n    this.gl.bindBuffer(\r\n      this.gl.ELEMENT_ARRAY_BUFFER,\r\n      renderer._bufferData.index\r\n    );\r\n    this.gl.bufferData(\r\n      this.gl.ELEMENT_ARRAY_BUFFER,\r\n      indexArray,\r\n      this.gl.DYNAMIC_DRAW\r\n    );\r\n\r\n    this.gl.blendFuncSeparate(srcColor, dstColor, srcAlpha, dstAlpha);\r\n  }\r\n\r\n  /**\r\n   * シェーダープログラムを解放する\r\n   */\r\n  public releaseShaderProgram(): void {\r\n    for (let i = 0; i < this._shaderSets.getSize(); i++) {\r\n      this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);\r\n      this._shaderSets.at(i).shaderProgram = 0;\r\n      this._shaderSets.set(i, void 0);\r\n      this._shaderSets.set(i, null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * シェーダープログラムを初期化する\r\n   * @param vertShaderSrc 頂点シェーダのソース\r\n   * @param fragShaderSrc フラグメントシェーダのソース\r\n   */\r\n  public generateShaders(): void {\r\n    for (let i = 0; i < ShaderCount; i++) {\r\n      this._shaderSets.pushBack(new CubismShaderSet());\r\n    }\r\n\r\n    this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(\r\n      vertexShaderSrcSetupMask,\r\n      fragmentShaderSrcsetupMask\r\n    );\r\n\r\n    this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(\r\n      vertexShaderSrc,\r\n      fragmentShaderSrcPremultipliedAlpha\r\n    );\r\n    this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(\r\n      vertexShaderSrcMasked,\r\n      fragmentShaderSrcMaskPremultipliedAlpha\r\n    );\r\n    this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(\r\n      vertexShaderSrcMasked,\r\n      fragmentShaderSrcMaskInvertedPremultipliedAlpha\r\n    );\r\n\r\n    // 加算も通常と同じシェーダーを利用する\r\n    this._shaderSets.at(4).shaderProgram = this._shaderSets.at(1).shaderProgram;\r\n    this._shaderSets.at(5).shaderProgram = this._shaderSets.at(2).shaderProgram;\r\n    this._shaderSets.at(6).shaderProgram = this._shaderSets.at(3).shaderProgram;\r\n\r\n    // 乗算も通常と同じシェーダーを利用する\r\n    this._shaderSets.at(7).shaderProgram = this._shaderSets.at(1).shaderProgram;\r\n    this._shaderSets.at(8).shaderProgram = this._shaderSets.at(2).shaderProgram;\r\n    this._shaderSets.at(9).shaderProgram = this._shaderSets.at(3).shaderProgram;\r\n\r\n    // SetupMask\r\n    this._shaderSets.at(0).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(0).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(0).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(0).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(0).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(0).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(0).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(0).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 通常（PremultipliedAlpha）\r\n    this._shaderSets.at(1).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(1).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(1).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(1).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(1).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(1).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(1).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 通常（クリッピング、PremultipliedAlpha）\r\n    this._shaderSets.at(2).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(2).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(2).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(2).shaderProgram,\r\n      's_texture1'\r\n    );\r\n    this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(2).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(2).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(2).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(2).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(2).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(2).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 通常（クリッピング・反転, PremultipliedAlpha）\r\n    this._shaderSets.at(3).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(3).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(3).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(3).samplerTexture1Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(3).shaderProgram,\r\n      's_texture1'\r\n    );\r\n    this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(3).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(3).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(3).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(3).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(3).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(3).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 加算（PremultipliedAlpha）\r\n    this._shaderSets.at(4).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(4).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(4).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(4).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(4).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(4).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(4).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 加算（クリッピング、PremultipliedAlpha）\r\n    this._shaderSets.at(5).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(5).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(5).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(5).samplerTexture1Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(5).shaderProgram,\r\n      's_texture1'\r\n    );\r\n    this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(5).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(5).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(5).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(5).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(5).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(5).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 加算（クリッピング・反転、PremultipliedAlpha）\r\n    this._shaderSets.at(6).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(6).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(6).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(6).shaderProgram,\r\n      's_texture1'\r\n    );\r\n    this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(6).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(6).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(6).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(6).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(6).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(6).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 乗算（PremultipliedAlpha）\r\n    this._shaderSets.at(7).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(7).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(7).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(7).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(7).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(7).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(7).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(7).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 乗算（クリッピング、PremultipliedAlpha）\r\n    this._shaderSets.at(8).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(8).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(8).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(8).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(8).samplerTexture1Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(8).shaderProgram,\r\n      's_texture1'\r\n    );\r\n    this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(8).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(8).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(8).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(8).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(8).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(8).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 乗算（クリッピング・反転、PremultipliedAlpha）\r\n    this._shaderSets.at(9).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(9).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(9).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(9).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(9).samplerTexture1Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(9).shaderProgram,\r\n      's_texture1'\r\n    );\r\n    this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(9).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(9).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(9).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(9).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(9).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(9).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n  }\r\n\r\n  /**\r\n   * シェーダプログラムをロードしてアドレスを返す\r\n   * @param vertexShaderSource    頂点シェーダのソース\r\n   * @param fragmentShaderSource  フラグメントシェーダのソース\r\n   * @return シェーダプログラムのアドレス\r\n   */\r\n  public loadShaderProgram(\r\n    vertexShaderSource: string,\r\n    fragmentShaderSource: string\r\n  ): WebGLProgram {\r\n    // Create Shader Program\r\n    let shaderProgram: WebGLProgram = this.gl.createProgram();\r\n\r\n    let vertShader = this.compileShaderSource(\r\n      this.gl.VERTEX_SHADER,\r\n      vertexShaderSource\r\n    );\r\n\r\n    if (!vertShader) {\r\n      CubismLogError('Vertex shader compile error!');\r\n      return 0;\r\n    }\r\n\r\n    let fragShader = this.compileShaderSource(\r\n      this.gl.FRAGMENT_SHADER,\r\n      fragmentShaderSource\r\n    );\r\n    if (!fragShader) {\r\n      CubismLogError('Vertex shader compile error!');\r\n      return 0;\r\n    }\r\n\r\n    // Attach vertex shader to program\r\n    this.gl.attachShader(shaderProgram, vertShader);\r\n\r\n    // Attach fragment shader to program\r\n    this.gl.attachShader(shaderProgram, fragShader);\r\n\r\n    // link program\r\n    this.gl.linkProgram(shaderProgram);\r\n    const linkStatus = this.gl.getProgramParameter(\r\n      shaderProgram,\r\n      this.gl.LINK_STATUS\r\n    );\r\n\r\n    // リンクに失敗したらシェーダーを削除\r\n    if (!linkStatus) {\r\n      CubismLogError('Failed to link program: {0}', shaderProgram);\r\n\r\n      this.gl.deleteShader(vertShader);\r\n      vertShader = 0;\r\n\r\n      this.gl.deleteShader(fragShader);\r\n      fragShader = 0;\r\n\r\n      if (shaderProgram) {\r\n        this.gl.deleteProgram(shaderProgram);\r\n        shaderProgram = 0;\r\n      }\r\n\r\n      return 0;\r\n    }\r\n\r\n    // Release vertex and fragment shaders.\r\n    this.gl.deleteShader(vertShader);\r\n    this.gl.deleteShader(fragShader);\r\n\r\n    return shaderProgram;\r\n  }\r\n\r\n  /**\r\n   * シェーダープログラムをコンパイルする\r\n   * @param shaderType シェーダタイプ(Vertex/Fragment)\r\n   * @param shaderSource シェーダソースコード\r\n   *\r\n   * @return コンパイルされたシェーダープログラム\r\n   */\r\n  public compileShaderSource(\r\n    shaderType: GLenum,\r\n    shaderSource: string\r\n  ): WebGLProgram {\r\n    const source: string = shaderSource;\r\n\r\n    const shader: WebGLProgram = this.gl.createShader(shaderType);\r\n    this.gl.shaderSource(shader, source);\r\n    this.gl.compileShader(shader);\r\n\r\n    if (!shader) {\r\n      const log: string = this.gl.getShaderInfoLog(shader);\r\n      CubismLogError('Shader compile log: {0} ', log);\r\n    }\r\n\r\n    const status: any = this.gl.getShaderParameter(\r\n      shader,\r\n      this.gl.COMPILE_STATUS\r\n    );\r\n    if (!status) {\r\n      this.gl.deleteShader(shader);\r\n      return null;\r\n    }\r\n\r\n    return shader;\r\n  }\r\n\r\n  public setGl(gl: WebGLRenderingContext): void {\r\n    this.gl = gl;\r\n  }\r\n\r\n  _shaderSets: csmVector<CubismShaderSet>; // ロードしたシェーダープログラムを保持する変数\r\n  gl: WebGLRenderingContext; // webglコンテキスト\r\n}\r\n\r\n/**\r\n * CubismShader_WebGLのインナークラス\r\n */\r\nexport class CubismShaderSet {\r\n  shaderProgram: WebGLProgram; // シェーダープログラムのアドレス\r\n  attributePositionLocation: GLuint; // シェーダープログラムに渡す変数のアドレス（Position）\r\n  attributeTexCoordLocation: GLuint; // シェーダープログラムに渡す変数のアドレス（TexCoord）\r\n  uniformMatrixLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Matrix）\r\n  uniformClipMatrixLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ClipMatrix）\r\n  samplerTexture0Location: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Texture0）\r\n  samplerTexture1Location: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Texture1）\r\n  uniformBaseColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（BaseColor）\r\n  uniformChannelFlagLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ChannelFlag）\r\n  uniformMultiplyColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（MultiplyColor）\r\n  uniformScreenColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ScreenColor）\r\n}\r\n\r\nexport enum ShaderNames {\r\n  // SetupMask\r\n  ShaderNames_SetupMask,\r\n\r\n  // Normal\r\n  ShaderNames_NormalPremultipliedAlpha,\r\n  ShaderNames_NormalMaskedPremultipliedAlpha,\r\n  ShaderNames_NomralMaskedInvertedPremultipliedAlpha,\r\n\r\n  // Add\r\n  ShaderNames_AddPremultipliedAlpha,\r\n  ShaderNames_AddMaskedPremultipliedAlpha,\r\n  ShaderNames_AddMaskedPremultipliedAlphaInverted,\r\n\r\n  // Mult\r\n  ShaderNames_MultPremultipliedAlpha,\r\n  ShaderNames_MultMaskedPremultipliedAlpha,\r\n  ShaderNames_MultMaskedPremultipliedAlphaInverted\r\n}\r\n\r\nexport const vertexShaderSrcSetupMask =\r\n  'attribute vec4     a_position;' +\r\n  'attribute vec2     a_texCoord;' +\r\n  'varying vec2       v_texCoord;' +\r\n  'varying vec4       v_myPos;' +\r\n  'uniform mat4       u_clipMatrix;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   gl_Position = u_clipMatrix * a_position;' +\r\n  '   v_myPos = u_clipMatrix * a_position;' +\r\n  '   v_texCoord = a_texCoord;' +\r\n  '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n  '}';\r\n\r\nexport const fragmentShaderSrcsetupMask =\r\n  'precision mediump float;' +\r\n  'varying vec2       v_texCoord;' +\r\n  'varying vec4       v_myPos;' +\r\n  'uniform vec4       u_baseColor;' +\r\n  'uniform vec4       u_channelFlag;' +\r\n  'uniform sampler2D  s_texture0;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   float isInside = ' +\r\n  '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' +\r\n  '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' +\r\n  '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' +\r\n  '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' +\r\n  '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' +\r\n  '}';\r\n\r\n//----- バーテックスシェーダプログラム -----\r\n// Normal & Add & Mult 共通\r\nexport const vertexShaderSrc =\r\n  'attribute vec4     a_position;' + //v.vertex\r\n  'attribute vec2     a_texCoord;' + //v.texcoord\r\n  'varying vec2       v_texCoord;' + //v2f.texcoord\r\n  'uniform mat4       u_matrix;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   gl_Position = u_matrix * a_position;' +\r\n  '   v_texCoord = a_texCoord;' +\r\n  '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n  '}';\r\n\r\n// Normal & Add & Mult 共通（クリッピングされたものの描画用）\r\nexport const vertexShaderSrcMasked =\r\n  'attribute vec4     a_position;' +\r\n  'attribute vec2     a_texCoord;' +\r\n  'varying vec2       v_texCoord;' +\r\n  'varying vec4       v_clipPos;' +\r\n  'uniform mat4       u_matrix;' +\r\n  'uniform mat4       u_clipMatrix;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   gl_Position = u_matrix * a_position;' +\r\n  '   v_clipPos = u_clipMatrix * a_position;' +\r\n  '   v_texCoord = a_texCoord;' +\r\n  '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n  '}';\r\n\r\n//----- フラグメントシェーダプログラム -----\r\n// Normal & Add & Mult 共通 （PremultipliedAlpha）\r\nexport const fragmentShaderSrcPremultipliedAlpha =\r\n  'precision mediump float;' +\r\n  'varying vec2       v_texCoord;' + //v2f.texcoord\r\n  'uniform vec4       u_baseColor;' +\r\n  'uniform sampler2D  s_texture0;' + //_MainTex\r\n  'uniform vec4       u_multiplyColor;' +\r\n  'uniform vec4       u_screenColor;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +\r\n  '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +\r\n  '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +\r\n  '   vec4 color = texColor * u_baseColor;' +\r\n  '   gl_FragColor = vec4(color.rgb, color.a);' +\r\n  '}';\r\n\r\n// Normal （クリッピングされたものの描画用、PremultipliedAlpha兼用）\r\nexport const fragmentShaderSrcMaskPremultipliedAlpha =\r\n  'precision mediump float;' +\r\n  'varying vec2       v_texCoord;' +\r\n  'varying vec4       v_clipPos;' +\r\n  'uniform vec4       u_baseColor;' +\r\n  'uniform vec4       u_channelFlag;' +\r\n  'uniform sampler2D  s_texture0;' +\r\n  'uniform sampler2D  s_texture1;' +\r\n  'uniform vec4       u_multiplyColor;' +\r\n  'uniform vec4       u_screenColor;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +\r\n  '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +\r\n  '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +\r\n  '   vec4 col_formask = texColor * u_baseColor;' +\r\n  '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\r\n  '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\r\n  '   col_formask = col_formask * maskVal;' +\r\n  '   gl_FragColor = col_formask;' +\r\n  '}';\r\n\r\n// Normal & Add & Mult 共通（クリッピングされて反転使用の描画用、PremultipliedAlphaの場合）\r\nexport const fragmentShaderSrcMaskInvertedPremultipliedAlpha =\r\n  'precision mediump float;' +\r\n  'varying vec2      v_texCoord;' +\r\n  'varying vec4      v_clipPos;' +\r\n  'uniform sampler2D s_texture0;' +\r\n  'uniform sampler2D s_texture1;' +\r\n  'uniform vec4      u_channelFlag;' +\r\n  'uniform vec4      u_baseColor;' +\r\n  'uniform vec4      u_multiplyColor;' +\r\n  'uniform vec4      u_screenColor;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +\r\n  '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +\r\n  '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +\r\n  '   vec4 col_formask = texColor * u_baseColor;' +\r\n  '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\r\n  '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\r\n  '   col_formask = col_formask * (1.0 - maskVal);' +\r\n  '   gl_FragColor = col_formask;' +\r\n  '}';\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismshader_webgl';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismShaderSet = $.CubismShaderSet;\r\n  export type CubismShaderSet = $.CubismShaderSet;\r\n  export const CubismShader_WebGL = $.CubismShader_WebGL;\r\n  export type CubismShader_WebGL = $.CubismShader_WebGL;\r\n  export const ShaderNames = $.ShaderNames;\r\n  export type ShaderNames = $.ShaderNames;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmMap } from '../type/csmmap';\r\nimport { csmRect } from '../type/csmrectf';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CubismLogError } from '../utils/cubismdebug';\r\nimport { CubismClippingManager } from './cubismclippingmanager';\r\nimport { CubismClippingContext, CubismRenderer } from './cubismrenderer';\r\nimport { CubismShader_WebGL } from './cubismshader_webgl';\r\n\r\nlet s_viewport: number[];\r\nlet s_fbo: WebGLFramebuffer;\r\n\r\n/**\r\n * クリッピングマスクの処理を実行するクラス\r\n */\r\nexport class CubismClippingManager_WebGL extends CubismClippingManager<CubismClippingContext_WebGL> {\r\n  /**\r\n   * テンポラリのレンダーテクスチャのアドレスを取得する\r\n   * FrameBufferObjectが存在しない場合、新しく生成する\r\n   *\r\n   * @return レンダーテクスチャの配列\r\n   */\r\n  public getMaskRenderTexture(): csmVector<WebGLFramebuffer> {\r\n    // テンポラリのRenderTextureを取得する\r\n    if (this._maskTexture && this._maskTexture.textures != null) {\r\n      // 前回使ったものを返す\r\n      this._maskTexture.frameNo = this._currentFrameNo;\r\n    } else {\r\n      // FrameBufferObjectが存在しない場合、新しく生成する\r\n      if (this._maskRenderTextures != null) {\r\n        this._maskRenderTextures.clear();\r\n      }\r\n      this._maskRenderTextures = new csmVector<WebGLFramebuffer>();\r\n\r\n      // ColorBufferObjectが存在しない場合、新しく生成する\r\n      if (this._maskColorBuffers != null) {\r\n        this._maskColorBuffers.clear();\r\n      }\r\n      this._maskColorBuffers = new csmVector<WebGLTexture>();\r\n\r\n      // クリッピングバッファサイズを取得\r\n      const size: number = this._clippingMaskBufferSize;\r\n\r\n      for (let index = 0; index < this._renderTextureCount; index++) {\r\n        this._maskColorBuffers.pushBack(this.gl.createTexture()); // 直接代入\r\n        this.gl.bindTexture(\r\n          this.gl.TEXTURE_2D,\r\n          this._maskColorBuffers.at(index)\r\n        );\r\n        this.gl.texImage2D(\r\n          this.gl.TEXTURE_2D,\r\n          0,\r\n          this.gl.RGBA,\r\n          size,\r\n          size,\r\n          0,\r\n          this.gl.RGBA,\r\n          this.gl.UNSIGNED_BYTE,\r\n          null\r\n        );\r\n        this.gl.texParameteri(\r\n          this.gl.TEXTURE_2D,\r\n          this.gl.TEXTURE_WRAP_S,\r\n          this.gl.CLAMP_TO_EDGE\r\n        );\r\n        this.gl.texParameteri(\r\n          this.gl.TEXTURE_2D,\r\n          this.gl.TEXTURE_WRAP_T,\r\n          this.gl.CLAMP_TO_EDGE\r\n        );\r\n        this.gl.texParameteri(\r\n          this.gl.TEXTURE_2D,\r\n          this.gl.TEXTURE_MIN_FILTER,\r\n          this.gl.LINEAR\r\n        );\r\n        this.gl.texParameteri(\r\n          this.gl.TEXTURE_2D,\r\n          this.gl.TEXTURE_MAG_FILTER,\r\n          this.gl.LINEAR\r\n        );\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\r\n\r\n        this._maskRenderTextures.pushBack(this.gl.createFramebuffer());\r\n        this.gl.bindFramebuffer(\r\n          this.gl.FRAMEBUFFER,\r\n          this._maskRenderTextures.at(index)\r\n        );\r\n        this.gl.framebufferTexture2D(\r\n          this.gl.FRAMEBUFFER,\r\n          this.gl.COLOR_ATTACHMENT0,\r\n          this.gl.TEXTURE_2D,\r\n          this._maskColorBuffers.at(index),\r\n          0\r\n        );\r\n      }\r\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\r\n\r\n      this._maskTexture = new CubismRenderTextureResource(\r\n        this._currentFrameNo,\r\n        this._maskRenderTextures\r\n      );\r\n    }\r\n\r\n    return this._maskTexture.textures;\r\n  }\r\n\r\n  /**\r\n   * WebGLレンダリングコンテキストを設定する\r\n   * @param gl WebGLレンダリングコンテキスト\r\n   */\r\n  public setGL(gl: WebGLRenderingContext): void {\r\n    this.gl = gl;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super(CubismClippingContext_WebGL);\r\n  }\r\n\r\n  /**\r\n   * クリッピングコンテキストを作成する。モデル描画時に実行する。\r\n   * @param model モデルのインスタンス\r\n   * @param renderer レンダラのインスタンス\r\n   */\r\n  public setupClippingContext(\r\n    model: CubismModel,\r\n    renderer: CubismRenderer_WebGL\r\n  ): void {\r\n    this._currentFrameNo++;\r\n\r\n    // 全てのクリッピングを用意する\r\n    // 同じクリップ（複数の場合はまとめて一つのクリップ）を使う場合は1度だけ設定する\r\n    let usingClipCount = 0;\r\n    for (\r\n      let clipIndex = 0;\r\n      clipIndex < this._clippingContextListForMask.getSize();\r\n      clipIndex++\r\n    ) {\r\n      // 1つのクリッピングマスクに関して\r\n      const cc: CubismClippingContext_WebGL =\r\n        this._clippingContextListForMask.at(clipIndex);\r\n\r\n      // このクリップを利用する描画オブジェクト群全体を囲む矩形を計算\r\n      this.calcClippedDrawTotalBounds(model, cc);\r\n\r\n      if (cc._isUsing) {\r\n        usingClipCount++; // 使用中としてカウント\r\n      }\r\n    }\r\n\r\n    // マスク作成処理\r\n    if (usingClipCount > 0) {\r\n      // 生成したFrameBufferと同じサイズでビューポートを設定\r\n      this.gl.viewport(\r\n        0,\r\n        0,\r\n        this._clippingMaskBufferSize,\r\n        this._clippingMaskBufferSize\r\n      );\r\n\r\n      // 後の計算のためにインデックスの最初をセット\r\n      this._currentMaskRenderTexture = this.getMaskRenderTexture().at(0);\r\n\r\n      renderer.preDraw(); // バッファをクリアする\r\n\r\n      this.setupLayoutBounds(usingClipCount);\r\n\r\n      // ---------- マスク描画処理 ----------\r\n      // マスク用RenderTextureをactiveにセット\r\n      this.gl.bindFramebuffer(\r\n        this.gl.FRAMEBUFFER,\r\n        this._currentMaskRenderTexture\r\n      );\r\n\r\n      // サイズがレンダーテクスチャの枚数と合わない場合は合わせる\r\n      if (this._clearedFrameBufferFlags.getSize() != this._renderTextureCount) {\r\n        this._clearedFrameBufferFlags.clear();\r\n        this._clearedFrameBufferFlags = new csmVector<boolean>(\r\n          this._renderTextureCount\r\n        );\r\n      }\r\n\r\n      // マスクのクリアフラグを毎フレーム開始時に初期化\r\n      for (\r\n        let index = 0;\r\n        index < this._clearedFrameBufferFlags.getSize();\r\n        index++\r\n      ) {\r\n        this._clearedFrameBufferFlags.set(index, false);\r\n      }\r\n\r\n      // 実際にマスクを生成する\r\n      // 全てのマスクをどのようにレイアウトして描くかを決定し、ClipContext, ClippedDrawContextに記憶する\r\n      for (\r\n        let clipIndex = 0;\r\n        clipIndex < this._clippingContextListForMask.getSize();\r\n        clipIndex++\r\n      ) {\r\n        // --- 実際に1つのマスクを描く ---\r\n        const clipContext: CubismClippingContext_WebGL =\r\n          this._clippingContextListForMask.at(clipIndex);\r\n        const allClipedDrawRect: csmRect = clipContext._allClippedDrawRect; // このマスクを使う、すべての描画オブジェクトの論理座標上の囲み矩形\r\n        const layoutBoundsOnTex01: csmRect = clipContext._layoutBounds; // この中にマスクを収める\r\n        const margin = 0.05; // モデル座標上の矩形を、適宜マージンを付けて使う\r\n        let scaleX = 0;\r\n        let scaleY = 0;\r\n\r\n        // clipContextに設定したレンダーテクスチャをインデックスで取得\r\n        const clipContextRenderTexture = this.getMaskRenderTexture().at(\r\n          clipContext._bufferIndex\r\n        );\r\n\r\n        // 現在のレンダーテクスチャがclipContextのものと異なる場合\r\n        if (this._currentMaskRenderTexture != clipContextRenderTexture) {\r\n          this._currentMaskRenderTexture = clipContextRenderTexture;\r\n          renderer.preDraw(); // バッファをクリアする\r\n          // マスク用RenderTextureをactiveにセット\r\n          this.gl.bindFramebuffer(\r\n            this.gl.FRAMEBUFFER,\r\n            this._currentMaskRenderTexture\r\n          );\r\n        }\r\n\r\n        this._tmpBoundsOnModel.setRect(allClipedDrawRect);\r\n        this._tmpBoundsOnModel.expand(\r\n          allClipedDrawRect.width * margin,\r\n          allClipedDrawRect.height * margin\r\n        );\r\n        //########## 本来は割り当てられた領域の全体を使わず必要最低限のサイズがよい\r\n\r\n        // シェーダ用の計算式を求める。回転を考慮しない場合は以下のとおり\r\n        // movePeriod' = movePeriod * scaleX + offX\t\t  [[ movePeriod' = (movePeriod - tmpBoundsOnModel.movePeriod)*scale + layoutBoundsOnTex01.movePeriod ]]\r\n        scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\r\n        scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\r\n\r\n        // マスク生成時に使う行列を求める\r\n        {\r\n          // シェーダに渡す行列を求める <<<<<<<<<<<<<<<<<<<<<<<< 要最適化（逆順に計算すればシンプルにできる）\r\n          this._tmpMatrix.loadIdentity();\r\n          {\r\n            // layout0..1 を -1..1に変換\r\n            this._tmpMatrix.translateRelative(-1.0, -1.0);\r\n            this._tmpMatrix.scaleRelative(2.0, 2.0);\r\n          }\r\n          {\r\n            // view to layout0..1\r\n            this._tmpMatrix.translateRelative(\r\n              layoutBoundsOnTex01.x,\r\n              layoutBoundsOnTex01.y\r\n            );\r\n            this._tmpMatrix.scaleRelative(scaleX, scaleY); // new = [translate][scale]\r\n            this._tmpMatrix.translateRelative(\r\n              -this._tmpBoundsOnModel.x,\r\n              -this._tmpBoundsOnModel.y\r\n            );\r\n            // new = [translate][scale][translate]\r\n          }\r\n          // tmpMatrixForMaskが計算結果\r\n          this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\r\n        }\r\n\r\n        //--------- draw時の mask 参照用行列を計算\r\n        {\r\n          // シェーダに渡す行列を求める <<<<<<<<<<<<<<<<<<<<<<<< 要最適化（逆順に計算すればシンプルにできる）\r\n          this._tmpMatrix.loadIdentity();\r\n          {\r\n            this._tmpMatrix.translateRelative(\r\n              layoutBoundsOnTex01.x,\r\n              layoutBoundsOnTex01.y\r\n            );\r\n            this._tmpMatrix.scaleRelative(scaleX, scaleY); // new = [translate][scale]\r\n            this._tmpMatrix.translateRelative(\r\n              -this._tmpBoundsOnModel.x,\r\n              -this._tmpBoundsOnModel.y\r\n            );\r\n            // new = [translate][scale][translate]\r\n          }\r\n          this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\r\n        }\r\n        clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\r\n        clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\r\n\r\n        const clipDrawCount: number = clipContext._clippingIdCount;\r\n        for (let i = 0; i < clipDrawCount; i++) {\r\n          const clipDrawIndex: number = clipContext._clippingIdList[i];\r\n\r\n          // 頂点情報が更新されておらず、信頼性がない場合は描画をパスする\r\n          if (\r\n            !model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n          renderer.setIsCulling(\r\n            model.getDrawableCulling(clipDrawIndex) != false\r\n          );\r\n\r\n          // マスクがクリアされていないなら処理する\r\n          if (!this._clearedFrameBufferFlags.at(clipContext._bufferIndex)) {\r\n            // マスクをクリアする\r\n            // (仮仕様) 1が無効（描かれない）領域、0が有効（描かれる）領域。（シェーダーCd*Csで0に近い値をかけてマスクを作る。1をかけると何も起こらない）\r\n            this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n            this._clearedFrameBufferFlags.set(clipContext._bufferIndex, true);\r\n          }\r\n\r\n          // 今回専用の変換を適用して描く\r\n          // チャンネルも切り替える必要がある(A,R,G,B)\r\n          renderer.setClippingContextBufferForMask(clipContext);\r\n\r\n          renderer.drawMeshWebGL(model, clipDrawIndex);\r\n        }\r\n      }\r\n\r\n      // --- 後処理 ---\r\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo); // 描画対象を戻す\r\n      renderer.setClippingContextBufferForMask(null);\r\n\r\n      this.gl.viewport(\r\n        s_viewport[0],\r\n        s_viewport[1],\r\n        s_viewport[2],\r\n        s_viewport[3]\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * カラーバッファを取得する\r\n   * @return カラーバッファ\r\n   */\r\n  public getColorBuffer(): csmVector<WebGLTexture> {\r\n    return this._maskColorBuffers;\r\n  }\r\n\r\n  /**\r\n   * マスクの合計数をカウント\r\n   * @returns\r\n   */\r\n  public getClippingMaskCount(): number {\r\n    return this._clippingContextListForMask.getSize();\r\n  }\r\n\r\n  public _currentMaskRenderTexture: WebGLFramebuffer; // マスク用レンダーテクスチャのアドレス\r\n  public _maskRenderTextures: csmVector<WebGLFramebuffer>; // レンダーテクスチャのリスト\r\n  public _maskColorBuffers: csmVector<WebGLTexture>; // マスク用カラーバッファーのアドレスのリスト\r\n  public _currentFrameNo: number; // マスクテクスチャに与えるフレーム番号\r\n\r\n  public _maskTexture: CubismRenderTextureResource; // マスク用のテクスチャリソースのリスト\r\n\r\n  gl: WebGLRenderingContext; // WebGLレンダリングコンテキスト\r\n}\r\n\r\n/**\r\n * レンダーテクスチャのリソースを定義する構造体\r\n * クリッピングマスクで使用する\r\n */\r\nexport class CubismRenderTextureResource {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   * @param frameNo レンダラーのフレーム番号\r\n   * @param texture テクスチャのアドレス\r\n   */\r\n  public constructor(frameNo: number, texture: csmVector<WebGLFramebuffer>) {\r\n    this.frameNo = frameNo;\r\n    this.textures = texture;\r\n  }\r\n\r\n  public frameNo: number; // レンダラのフレーム番号\r\n  public textures: csmVector<WebGLFramebuffer>; // テクスチャのアドレス\r\n}\r\n\r\n/**\r\n * クリッピングマスクのコンテキスト\r\n */\r\nexport class CubismClippingContext_WebGL extends CubismClippingContext {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   */\r\n  public constructor(\r\n    manager: CubismClippingManager_WebGL,\r\n    clippingDrawableIndices: Int32Array,\r\n    clipCount: number\r\n  ) {\r\n    super(clippingDrawableIndices, clipCount);\r\n    this._owner = manager;\r\n  }\r\n\r\n  /**\r\n   * このマスクを管理するマネージャのインスタンスを取得する\r\n   * @return クリッピングマネージャのインスタンス\r\n   */\r\n  public getClippingManager(): CubismClippingManager_WebGL {\r\n    return this._owner;\r\n  }\r\n\r\n  public setGl(gl: WebGLRenderingContext): void {\r\n    this._owner.setGL(gl);\r\n  }\r\n\r\n  private _owner: CubismClippingManager_WebGL; // このマスクを管理しているマネージャのインスタンス\r\n}\r\n\r\nexport class CubismRendererProfile_WebGL {\r\n  private setGlEnable(index: GLenum, enabled: GLboolean): void {\r\n    if (enabled) this.gl.enable(index);\r\n    else this.gl.disable(index);\r\n  }\r\n\r\n  private setGlEnableVertexAttribArray(\r\n    index: GLuint,\r\n    enabled: GLboolean\r\n  ): void {\r\n    if (enabled) this.gl.enableVertexAttribArray(index);\r\n    else this.gl.disableVertexAttribArray(index);\r\n  }\r\n\r\n  public save(): void {\r\n    if (this.gl == null) {\r\n      CubismLogError(\r\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\r\n      );\r\n      return;\r\n    }\r\n    //-- push state --\r\n    this._lastArrayBufferBinding = this.gl.getParameter(\r\n      this.gl.ARRAY_BUFFER_BINDING\r\n    );\r\n    this._lastElementArrayBufferBinding = this.gl.getParameter(\r\n      this.gl.ELEMENT_ARRAY_BUFFER_BINDING\r\n    );\r\n    this._lastProgram = this.gl.getParameter(this.gl.CURRENT_PROGRAM);\r\n\r\n    this._lastActiveTexture = this.gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    this.gl.activeTexture(this.gl.TEXTURE1); //テクスチャユニット1をアクティブに（以後の設定対象とする）\r\n    this._lastTexture1Binding2D = this.gl.getParameter(\r\n      this.gl.TEXTURE_BINDING_2D\r\n    );\r\n\r\n    this.gl.activeTexture(this.gl.TEXTURE0); //テクスチャユニット0をアクティブに（以後の設定対象とする）\r\n    this._lastTexture0Binding2D = this.gl.getParameter(\r\n      this.gl.TEXTURE_BINDING_2D\r\n    );\r\n\r\n    this._lastVertexAttribArrayEnabled[0] = this.gl.getVertexAttrib(\r\n      0,\r\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\r\n    );\r\n    this._lastVertexAttribArrayEnabled[1] = this.gl.getVertexAttrib(\r\n      1,\r\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\r\n    );\r\n    this._lastVertexAttribArrayEnabled[2] = this.gl.getVertexAttrib(\r\n      2,\r\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\r\n    );\r\n    this._lastVertexAttribArrayEnabled[3] = this.gl.getVertexAttrib(\r\n      3,\r\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\r\n    );\r\n\r\n    this._lastScissorTest = this.gl.isEnabled(this.gl.SCISSOR_TEST);\r\n    this._lastStencilTest = this.gl.isEnabled(this.gl.STENCIL_TEST);\r\n    this._lastDepthTest = this.gl.isEnabled(this.gl.DEPTH_TEST);\r\n    this._lastCullFace = this.gl.isEnabled(this.gl.CULL_FACE);\r\n    this._lastBlend = this.gl.isEnabled(this.gl.BLEND);\r\n\r\n    this._lastFrontFace = this.gl.getParameter(this.gl.FRONT_FACE);\r\n\r\n    this._lastColorMask = this.gl.getParameter(this.gl.COLOR_WRITEMASK);\r\n\r\n    // backup blending\r\n    this._lastBlending[0] = this.gl.getParameter(this.gl.BLEND_SRC_RGB);\r\n    this._lastBlending[1] = this.gl.getParameter(this.gl.BLEND_DST_RGB);\r\n    this._lastBlending[2] = this.gl.getParameter(this.gl.BLEND_SRC_ALPHA);\r\n    this._lastBlending[3] = this.gl.getParameter(this.gl.BLEND_DST_ALPHA);\r\n\r\n    // モデル描画直前のFBOとビューポートを保存\r\n    this._lastFBO = this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n    this._lastViewport = this.gl.getParameter(this.gl.VIEWPORT);\r\n  }\r\n\r\n  public restore(): void {\r\n    if (this.gl == null) {\r\n      CubismLogError(\r\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\r\n      );\r\n      return;\r\n    }\r\n    this.gl.useProgram(this._lastProgram);\r\n\r\n    this.setGlEnableVertexAttribArray(0, this._lastVertexAttribArrayEnabled[0]);\r\n    this.setGlEnableVertexAttribArray(1, this._lastVertexAttribArrayEnabled[1]);\r\n    this.setGlEnableVertexAttribArray(2, this._lastVertexAttribArrayEnabled[2]);\r\n    this.setGlEnableVertexAttribArray(3, this._lastVertexAttribArrayEnabled[3]);\r\n\r\n    this.setGlEnable(this.gl.SCISSOR_TEST, this._lastScissorTest);\r\n    this.setGlEnable(this.gl.STENCIL_TEST, this._lastStencilTest);\r\n    this.setGlEnable(this.gl.DEPTH_TEST, this._lastDepthTest);\r\n    this.setGlEnable(this.gl.CULL_FACE, this._lastCullFace);\r\n    this.setGlEnable(this.gl.BLEND, this._lastBlend);\r\n\r\n    this.gl.frontFace(this._lastFrontFace);\r\n\r\n    this.gl.colorMask(\r\n      this._lastColorMask[0],\r\n      this._lastColorMask[1],\r\n      this._lastColorMask[2],\r\n      this._lastColorMask[3]\r\n    );\r\n\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._lastArrayBufferBinding); //前にバッファがバインドされていたら破棄する必要がある\r\n    this.gl.bindBuffer(\r\n      this.gl.ELEMENT_ARRAY_BUFFER,\r\n      this._lastElementArrayBufferBinding\r\n    );\r\n\r\n    this.gl.activeTexture(this.gl.TEXTURE1); //テクスチャユニット1を復元\r\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this._lastTexture1Binding2D);\r\n\r\n    this.gl.activeTexture(this.gl.TEXTURE0); //テクスチャユニット0を復元\r\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this._lastTexture0Binding2D);\r\n\r\n    this.gl.activeTexture(this._lastActiveTexture);\r\n\r\n    this.gl.blendFuncSeparate(\r\n      this._lastBlending[0],\r\n      this._lastBlending[1],\r\n      this._lastBlending[2],\r\n      this._lastBlending[3]\r\n    );\r\n  }\r\n\r\n  public setGl(gl: WebGLRenderingContext): void {\r\n    this.gl = gl;\r\n  }\r\n\r\n  constructor() {\r\n    this._lastVertexAttribArrayEnabled = new Array<GLboolean>(4);\r\n    this._lastColorMask = new Array<GLboolean>(4);\r\n    this._lastBlending = new Array<GLint>(4);\r\n    this._lastViewport = new Array<GLint>(4);\r\n  }\r\n\r\n  private _lastArrayBufferBinding: GLint; ///< モデル描画直前の頂点バッファ\r\n  private _lastElementArrayBufferBinding: GLint; ///< モデル描画直前のElementバッファ\r\n  private _lastProgram: GLint; ///< モデル描画直前のシェーダプログラムバッファ\r\n  private _lastActiveTexture: GLint; ///< モデル描画直前のアクティブなテクスチャ\r\n  private _lastTexture0Binding2D: GLint; ///< モデル描画直前のテクスチャユニット0\r\n  private _lastTexture1Binding2D: GLint; ///< モデル描画直前のテクスチャユニット1\r\n  private _lastVertexAttribArrayEnabled: GLboolean[]; ///< モデル描画直前のテクスチャユニット1\r\n  private _lastScissorTest: GLboolean; ///< モデル描画直前のGL_VERTEX_ATTRIB_ARRAY_ENABLEDパラメータ\r\n  private _lastBlend: GLboolean; ///< モデル描画直前のGL_SCISSOR_TESTパラメータ\r\n  private _lastStencilTest: GLboolean; ///< モデル描画直前のGL_STENCIL_TESTパラメータ\r\n  private _lastDepthTest: GLboolean; ///< モデル描画直前のGL_DEPTH_TESTパラメータ\r\n  private _lastCullFace: GLboolean; ///< モデル描画直前のGL_CULL_FACEパラメータ\r\n  private _lastFrontFace: GLint; ///< モデル描画直前のGL_CULL_FACEパラメータ\r\n  private _lastColorMask: GLboolean[]; ///< モデル描画直前のGL_COLOR_WRITEMASKパラメータ\r\n  private _lastBlending: GLint[]; ///< モデル描画直前のカラーブレンディングパラメータ\r\n  private _lastFBO: GLint; ///< モデル描画直前のフレームバッファ\r\n  private _lastViewport: GLint[]; ///< モデル描画直前のビューポート\r\n\r\n  gl: WebGLRenderingContext;\r\n}\r\n\r\n/**\r\n * WebGL用の描画命令を実装したクラス\r\n */\r\nexport class CubismRenderer_WebGL extends CubismRenderer {\r\n  /**\r\n   * レンダラの初期化処理を実行する\r\n   * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\r\n   *\r\n   * @param model モデルのインスタンス\r\n   * @param maskBufferCount バッファの生成数\r\n   */\r\n  public initialize(model: CubismModel, maskBufferCount = 1): void {\r\n    if (model.isUsingMasking()) {\r\n      this._clippingManager = new CubismClippingManager_WebGL(); // クリッピングマスク・バッファ前処理方式を初期化\r\n      this._clippingManager.initialize(model, maskBufferCount);\r\n    }\r\n\r\n    this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);\r\n\r\n    super.initialize(model); // 親クラスの処理を呼ぶ\r\n  }\r\n\r\n  /**\r\n   * WebGLテクスチャのバインド処理\r\n   * CubismRendererにテクスチャを設定し、CubismRenderer内でその画像を参照するためのIndex値を戻り値とする\r\n   * @param modelTextureNo セットするモデルテクスチャの番号\r\n   * @param glTextureNo WebGLテクスチャの番号\r\n   */\r\n  public bindTexture(modelTextureNo: number, glTexture: WebGLTexture): void {\r\n    this._textures.setValue(modelTextureNo, glTexture);\r\n  }\r\n\r\n  /**\r\n   * WebGLにバインドされたテクスチャのリストを取得する\r\n   * @return テクスチャのリスト\r\n   */\r\n  public getBindedTextures(): csmMap<number, WebGLTexture> {\r\n    return this._textures;\r\n  }\r\n\r\n  /**\r\n   * クリッピングマスクバッファのサイズを設定する\r\n   * マスク用のFrameBufferを破棄、再作成する為処理コストは高い\r\n   * @param size クリッピングマスクバッファのサイズ\r\n   */\r\n  public setClippingMaskBufferSize(size: number) {\r\n    // クリッピングマスクを利用しない場合は早期リターン\r\n    if (!this._model.isUsingMasking()) {\r\n      return;\r\n    }\r\n\r\n    // インスタンス破棄前にレンダーテクスチャの数を保存\r\n    const renderTextureCount: number =\r\n      this._clippingManager.getRenderTextureCount();\r\n\r\n    // FrameBufferのサイズを変更するためにインスタンスを破棄・再作成する\r\n    this._clippingManager.release();\r\n    this._clippingManager = void 0;\r\n    this._clippingManager = null;\r\n\r\n    this._clippingManager = new CubismClippingManager_WebGL();\r\n\r\n    this._clippingManager.setClippingMaskBufferSize(size);\r\n\r\n    this._clippingManager.initialize(\r\n      this.getModel(),\r\n      renderTextureCount // インスタンス破棄前に保存したレンダーテクスチャの数\r\n    );\r\n  }\r\n\r\n  /**\r\n   * クリッピングマスクバッファのサイズを取得する\r\n   * @return クリッピングマスクバッファのサイズ\r\n   */\r\n  public getClippingMaskBufferSize(): number {\r\n    return this._model.isUsingMasking()\r\n      ? this._clippingManager.getClippingMaskBufferSize()\r\n      : -1;\r\n  }\r\n\r\n  /**\r\n   * レンダーテクスチャの枚数を取得する\r\n   * @return レンダーテクスチャの枚数\r\n   */\r\n  public getRenderTextureCount(): number {\r\n    return this._model.isUsingMasking()\r\n      ? this._clippingManager.getRenderTextureCount()\r\n      : -1;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._clippingContextBufferForMask = null;\r\n    this._clippingContextBufferForDraw = null;\r\n    this._rendererProfile = new CubismRendererProfile_WebGL();\r\n    this.firstDraw = true;\r\n    this._textures = new csmMap<number, number>();\r\n    this._sortedDrawableIndexList = new csmVector<number>();\r\n    this._bufferData = {\r\n      vertex: (WebGLBuffer = null),\r\n      uv: (WebGLBuffer = null),\r\n      index: (WebGLBuffer = null)\r\n    };\r\n\r\n    // テクスチャ対応マップの容量を確保しておく\r\n    this._textures.prepareCapacity(32, true);\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    if (this._clippingManager) {\r\n      this._clippingManager.release();\r\n      this._clippingManager = void 0;\r\n      this._clippingManager = null;\r\n    }\r\n\r\n    if (this.gl == null) {\r\n      return;\r\n    }\r\n    this.gl.deleteBuffer(this._bufferData.vertex);\r\n    this._bufferData.vertex = null;\r\n    this.gl.deleteBuffer(this._bufferData.uv);\r\n    this._bufferData.uv = null;\r\n    this.gl.deleteBuffer(this._bufferData.index);\r\n    this._bufferData.index = null;\r\n    this._bufferData = null;\r\n\r\n    this._textures = null;\r\n  }\r\n\r\n  /**\r\n   * モデルを描画する実際の処理\r\n   */\r\n  public doDrawModel(): void {\r\n    if (this.gl == null) {\r\n      CubismLogError(\r\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    //------------ クリッピングマスク・バッファ前処理方式の場合 ------------\r\n    if (this._clippingManager != null) {\r\n      this.preDraw();\r\n\r\n      if (this.isUsingHighPrecisionMask()) {\r\n        this._clippingManager.setupMatrixForHighPrecision(\r\n          this.getModel(),\r\n          false\r\n        );\r\n      } else {\r\n        this._clippingManager.setupClippingContext(this.getModel(), this);\r\n      }\r\n    }\r\n\r\n    // 上記クリッピング処理内でも一度PreDrawを呼ぶので注意!!\r\n    this.preDraw();\r\n\r\n    const drawableCount: number = this.getModel().getDrawableCount();\r\n    const renderOrder: Int32Array = this.getModel().getDrawableRenderOrders();\r\n\r\n    // インデックスを描画順でソート\r\n    for (let i = 0; i < drawableCount; ++i) {\r\n      const order: number = renderOrder[i];\r\n      this._sortedDrawableIndexList.set(order, i);\r\n    }\r\n\r\n    // 描画\r\n    for (let i = 0; i < drawableCount; ++i) {\r\n      const drawableIndex: number = this._sortedDrawableIndexList.at(i);\r\n\r\n      // Drawableが表示状態でなければ処理をパスする\r\n      if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {\r\n        continue;\r\n      }\r\n\r\n      const clipContext =\r\n        this._clippingManager != null\r\n          ? this._clippingManager\r\n              .getClippingContextListForDraw()\r\n              .at(drawableIndex)\r\n          : null;\r\n\r\n      if (clipContext != null && this.isUsingHighPrecisionMask()) {\r\n        // 描くことになっていた\r\n        if (clipContext._isUsing) {\r\n          // 生成したFrameBufferと同じサイズでビューポートを設定\r\n          this.gl.viewport(\r\n            0,\r\n            0,\r\n            this._clippingManager.getClippingMaskBufferSize(),\r\n            this._clippingManager.getClippingMaskBufferSize()\r\n          );\r\n\r\n          this.preDraw(); // バッファをクリアする\r\n\r\n          // ---------- マスク描画処理 ----------\r\n          // マスク用RenderTextureをactiveにセット\r\n          this.gl.bindFramebuffer(\r\n            this.gl.FRAMEBUFFER,\r\n            clipContext\r\n              .getClippingManager()\r\n              .getMaskRenderTexture()\r\n              .at(clipContext._bufferIndex)\r\n          );\r\n\r\n          // マスクをクリアする\r\n          // (仮仕様) 1が無効（描かれない）領域、0が有効（描かれる）領域。（シェーダーCd*Csで0に近い値をかけてマスクを作る。1をかけると何も起こらない）\r\n          this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n          this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        }\r\n\r\n        {\r\n          const clipDrawCount: number = clipContext._clippingIdCount;\r\n\r\n          for (let index = 0; index < clipDrawCount; index++) {\r\n            const clipDrawIndex: number = clipContext._clippingIdList[index];\r\n\r\n            // 頂点情報が更新されておらず、信頼性がない場合は描画をパスする\r\n            if (\r\n              !this._model.getDrawableDynamicFlagVertexPositionsDidChange(\r\n                clipDrawIndex\r\n              )\r\n            ) {\r\n              continue;\r\n            }\r\n\r\n            this.setIsCulling(\r\n              this._model.getDrawableCulling(clipDrawIndex) != false\r\n            );\r\n\r\n            // 今回専用の変換を適用して描く\r\n            // チャンネルも切り替える必要がある(A,R,G,B)\r\n            this.setClippingContextBufferForMask(clipContext);\r\n\r\n            this.drawMeshWebGL(this._model, clipDrawIndex);\r\n          }\r\n        }\r\n\r\n        {\r\n          // --- 後処理 ---\r\n          this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo); // 描画対象を戻す\r\n          this.setClippingContextBufferForMask(null);\r\n\r\n          this.gl.viewport(\r\n            s_viewport[0],\r\n            s_viewport[1],\r\n            s_viewport[2],\r\n            s_viewport[3]\r\n          );\r\n\r\n          this.preDraw(); // バッファをクリアする\r\n        }\r\n      }\r\n\r\n      // クリッピングマスクをセットする\r\n      this.setClippingContextBufferForDraw(clipContext);\r\n\r\n      this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));\r\n\r\n      this.drawMeshWebGL(this._model, drawableIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 描画オブジェクト（アートメッシュ）を描画する。\r\n   * @param model 描画対象のモデル\r\n   * @param index 描画対象のメッシュのインデックス\r\n   */\r\n  public drawMeshWebGL(model: Readonly<CubismModel>, index: number): void {\r\n    // 裏面描画の有効・無効\r\n    if (this.isCulling()) {\r\n      this.gl.enable(this.gl.CULL_FACE);\r\n    } else {\r\n      this.gl.disable(this.gl.CULL_FACE);\r\n    }\r\n\r\n    this.gl.frontFace(this.gl.CCW); // Cubism SDK OpenGLはマスク・アートメッシュ共にCCWが表面\r\n\r\n    if (this.isGeneratingMask()) {\r\n      CubismShader_WebGL.getInstance().setupShaderProgramForMask(\r\n        this,\r\n        model,\r\n        index\r\n      );\r\n    } else {\r\n      CubismShader_WebGL.getInstance().setupShaderProgramForDraw(\r\n        this,\r\n        model,\r\n        index\r\n      );\r\n    }\r\n\r\n    {\r\n      const indexCount: number = model.getDrawableVertexIndexCount(index);\r\n      this.gl.drawElements(\r\n        this.gl.TRIANGLES,\r\n        indexCount,\r\n        this.gl.UNSIGNED_SHORT,\r\n        0\r\n      );\r\n    }\r\n\r\n    // 後処理\r\n    this.gl.useProgram(null);\r\n    this.setClippingContextBufferForDraw(null);\r\n    this.setClippingContextBufferForMask(null);\r\n  }\r\n\r\n  protected saveProfile(): void {\r\n    this._rendererProfile.save();\r\n  }\r\n\r\n  protected restoreProfile(): void {\r\n    this._rendererProfile.restore();\r\n  }\r\n\r\n  /**\r\n   * レンダラが保持する静的なリソースを解放する\r\n   * WebGLの静的なシェーダープログラムを解放する\r\n   */\r\n  public static doStaticRelease(): void {\r\n    CubismShader_WebGL.deleteInstance();\r\n  }\r\n\r\n  /**\r\n   * レンダーステートを設定する\r\n   * @param fbo アプリケーション側で指定しているフレームバッファ\r\n   * @param viewport ビューポート\r\n   */\r\n  public setRenderState(fbo: WebGLFramebuffer, viewport: number[]): void {\r\n    s_fbo = fbo;\r\n    s_viewport = viewport;\r\n  }\r\n\r\n  /**\r\n   * 描画開始時の追加処理\r\n   * モデルを描画する前にクリッピングマスクに必要な処理を実装している\r\n   */\r\n  public preDraw(): void {\r\n    if (this.firstDraw) {\r\n      this.firstDraw = false;\r\n    }\r\n\r\n    this.gl.disable(this.gl.SCISSOR_TEST);\r\n    this.gl.disable(this.gl.STENCIL_TEST);\r\n    this.gl.disable(this.gl.DEPTH_TEST);\r\n\r\n    // カリング（1.0beta3）\r\n    this.gl.frontFace(this.gl.CW);\r\n\r\n    this.gl.enable(this.gl.BLEND);\r\n    this.gl.colorMask(true, true, true, true);\r\n\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null); // 前にバッファがバインドされていたら破棄する必要がある\r\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n    // 異方性フィルタリングを適用する\r\n    if (this.getAnisotropy() > 0.0 && this._extension) {\r\n      for (let i = 0; i < this._textures.getSize(); ++i) {\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this._textures.getValue(i));\r\n        this.gl.texParameterf(\r\n          this.gl.TEXTURE_2D,\r\n          this._extension.TEXTURE_MAX_ANISOTROPY_EXT,\r\n          this.getAnisotropy()\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * マスクテクスチャに描画するクリッピングコンテキストをセットする\r\n   */\r\n  public setClippingContextBufferForMask(clip: CubismClippingContext_WebGL) {\r\n    this._clippingContextBufferForMask = clip;\r\n  }\r\n\r\n  /**\r\n   * マスクテクスチャに描画するクリッピングコンテキストを取得する\r\n   * @return マスクテクスチャに描画するクリッピングコンテキスト\r\n   */\r\n  public getClippingContextBufferForMask(): CubismClippingContext_WebGL {\r\n    return this._clippingContextBufferForMask;\r\n  }\r\n\r\n  /**\r\n   * 画面上に描画するクリッピングコンテキストをセットする\r\n   */\r\n  public setClippingContextBufferForDraw(\r\n    clip: CubismClippingContext_WebGL\r\n  ): void {\r\n    this._clippingContextBufferForDraw = clip;\r\n  }\r\n\r\n  /**\r\n   * 画面上に描画するクリッピングコンテキストを取得する\r\n   * @return 画面上に描画するクリッピングコンテキスト\r\n   */\r\n  public getClippingContextBufferForDraw(): CubismClippingContext_WebGL {\r\n    return this._clippingContextBufferForDraw;\r\n  }\r\n\r\n  /**\r\n   * マスク生成時かを判定する\r\n   * @returns 判定値\r\n   */\r\n  public isGeneratingMask() {\r\n    return this.getClippingContextBufferForMask() != null;\r\n  }\r\n\r\n  /**\r\n   * glの設定\r\n   */\r\n  public startUp(gl: WebGLRenderingContext): void {\r\n    this.gl = gl;\r\n\r\n    if (this._clippingManager) {\r\n      this._clippingManager.setGL(gl);\r\n    }\r\n\r\n    CubismShader_WebGL.getInstance().setGl(gl);\r\n    this._rendererProfile.setGl(gl);\r\n\r\n    // 異方性フィルタリングが使用できるかチェック\r\n    this._extension =\r\n      this.gl.getExtension('EXT_texture_filter_anisotropic') ||\r\n      this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') ||\r\n      this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');\r\n  }\r\n\r\n  _textures: csmMap<number, WebGLTexture>; // モデルが参照するテクスチャとレンダラでバインドしているテクスチャとのマップ\r\n  _sortedDrawableIndexList: csmVector<number>; // 描画オブジェクトのインデックスを描画順に並べたリスト\r\n  _clippingManager: CubismClippingManager_WebGL; // クリッピングマスク管理オブジェクト\r\n  _clippingContextBufferForMask: CubismClippingContext_WebGL; // マスクテクスチャに描画するためのクリッピングコンテキスト\r\n  _clippingContextBufferForDraw: CubismClippingContext_WebGL; // 画面上描画するためのクリッピングコンテキスト\r\n  _rendererProfile: CubismRendererProfile_WebGL;\r\n  firstDraw: boolean;\r\n  _bufferData: {\r\n    vertex: WebGLBuffer;\r\n    uv: WebGLBuffer;\r\n    index: WebGLBuffer;\r\n  }; // 頂点バッファデータ\r\n  _extension: any; // 拡張機能\r\n  gl: WebGLRenderingContext; // webglコンテキスト\r\n}\r\n\r\n/**\r\n * レンダラが保持する静的なリソースを開放する\r\n */\r\nCubismRenderer.staticRelease = (): void => {\r\n  CubismRenderer_WebGL.doStaticRelease();\r\n};\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismrenderer_webgl';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismClippingContext = $.CubismClippingContext_WebGL;\r\n  export type CubismClippingContext = $.CubismClippingContext_WebGL;\r\n  export const CubismClippingManager_WebGL = $.CubismClippingManager_WebGL;\r\n  export type CubismClippingManager_WebGL = $.CubismClippingManager_WebGL;\r\n  export const CubismRenderTextureResource = $.CubismRenderTextureResource;\r\n  export type CubismRenderTextureResource = $.CubismRenderTextureResource;\r\n  export const CubismRenderer_WebGL = $.CubismRenderer_WebGL;\r\n  export type CubismRenderer_WebGL = $.CubismRenderer_WebGL;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport {\r\n  CubismBlendMode,\r\n  CubismTextureColor\r\n} from '../rendering/cubismrenderer';\r\nimport { csmMap } from '../type/csmmap';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CSM_ASSERT } from '../utils/cubismdebug';\r\n\r\n/**\r\n * SDK側から与えられたDrawableの乗算色・スクリーン色上書きフラグと\r\n * その色を保持する構造体\r\n */\r\nexport class DrawableColorData {\r\n  constructor(\r\n    isOverwritten = false,\r\n    color: CubismTextureColor = new CubismTextureColor()\r\n  ) {\r\n    this.isOverwritten = isOverwritten;\r\n    this.color = color;\r\n  }\r\n\r\n  public isOverwritten: boolean;\r\n  public color: CubismTextureColor;\r\n}\r\n/**\r\n * @brief テクスチャの色をRGBAで扱うための構造体\r\n */\r\nexport class PartColorData {\r\n  constructor(\r\n    isOverwritten = false,\r\n    color: CubismTextureColor = new CubismTextureColor()\r\n  ) {\r\n    this.isOverwritten = isOverwritten;\r\n    this.color = color;\r\n  }\r\n\r\n  public isOverwritten: boolean;\r\n  public color: CubismTextureColor;\r\n}\r\n\r\n/**\r\n * テクスチャのカリング設定を管理するための構造体\r\n */\r\nexport class DrawableCullingData {\r\n  /**\r\n   * コンストラクタ\r\n   *\r\n   * @param isOverwritten\r\n   * @param isCulling\r\n   */\r\n  public constructor(isOverwritten = false, isCulling = false) {\r\n    this.isOverwritten = isOverwritten;\r\n    this.isCulling = isCulling;\r\n  }\r\n\r\n  public isOverwritten: boolean;\r\n  public isCulling: boolean;\r\n}\r\n\r\n/**\r\n * 모델\r\n *\r\n * MOC 데이터에서 생성 된 모델 클래스.\r\n */\r\nexport class CubismModel {\r\n  /**\r\n   * 모델 매개 변수를 업데이트합니다\r\n   */\r\n  public update(): void {\r\n    // Update model\r\n    this._model.update();\r\n\r\n    this._model.drawables.resetDynamicFlags();\r\n  }\r\n\r\n  /**\r\n   * PixelsperUnit을 얻으십시오\r\n   * @returns PixelsPerUnit\r\n   */\r\n  public getPixelsPerUnit(): number {\r\n    if (this._model == null) {\r\n      return 0.0;\r\n    }\r\n\r\n    return this._model.canvasinfo.PixelsPerUnit;\r\n  }\r\n\r\n  /**\r\n   * 캔버스의 너비를 얻으십시오\r\n   */\r\n  public getCanvasWidth(): number {\r\n    if (this._model == null) {\r\n      return 0.0;\r\n    }\r\n\r\n    return (\r\n      this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 캔버스의 높이를 얻으십시오\r\n   */\r\n  public getCanvasHeight(): number {\r\n    if (this._model == null) {\r\n      return 0.0;\r\n    }\r\n\r\n    return (\r\n      this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 매개 변수를 저장합니다\r\n   */\r\n  public saveParameters(): void {\r\n    const parameterCount: number = this._model.parameters.count;\r\n    const savedParameterCount: number = this._savedParameters.getSize();\r\n\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      if (i < savedParameterCount) {\r\n        this._savedParameters.set(i, this._parameterValues[i]);\r\n      } else {\r\n        this._savedParameters.pushBack(this._parameterValues[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 곱셈 색상을 얻으십시오\r\n   * @param index Drawables Index\r\n   * @returns 지정된 드로우 가능의 색상이 없습니다(RGBA)\r\n   */\r\n  public getMultiplyColor(index: number): CubismTextureColor {\r\n    // Drawable그리고 전체 모델에 대한 계산 가능한 색상 덮어 쓰기 플래그true이 경우 전체 모델의 덮어 쓰기 플래그는 우선 순위가 부여됩니다.\r\n    if (\r\n      this.getOverwriteFlagForModelMultiplyColors() ||\r\n      this.getOverwriteFlagForDrawableMultiplyColors(index)\r\n    ) {\r\n      return this._userMultiplyColors.at(index).color;\r\n    }\r\n\r\n    const color = this.getDrawableMultiplyColor(index);\r\n    return color;\r\n  }\r\n\r\n  /**\r\n   * スクリーン色を取得する\r\n   * @param index Drawablesのインデックス\r\n   * @returns 指定したdrawableのスクリーン色(RGBA)\r\n   */\r\n  public getScreenColor(index: number): CubismTextureColor {\r\n    // 드로우 가능에 대한 화면 색상을 덮어 쓰기 플래그와 전체 모델이 참이면 전체 모델의 덮어 쓰기 플래그가 우선 순위로 표시됩니다.\r\n    if (\r\n      this.getOverwriteFlagForModelScreenColors() ||\r\n      this.getOverwriteFlagForDrawableScreenColors(index)\r\n    ) {\r\n      return this._userScreenColors.at(index).color;\r\n    }\r\n\r\n    const color = this.getDrawableScreenColor(index);\r\n    return color;\r\n  }\r\n\r\n  /**\r\n   * 乗算色をセットする\r\n   * @param index Drawablesのインデックス\r\n   * @param color 設定する乗算色(CubismTextureColor)\r\n   */\r\n  public setMultiplyColorByTextureColor(\r\n    index: number,\r\n    color: CubismTextureColor\r\n  ) {\r\n    this.setMultiplyColorByRGBA(index, color.r, color.g, color.b, color.a);\r\n  }\r\n\r\n  /**\r\n   * 乗算色をセットする\r\n   * @param index Drawablesのインデックス\r\n   * @param r 곱하기 색상의 R 값 구성\r\n   * @param g 設定する乗算色のG値\r\n   * @param b 設定する乗算色のB値\r\n   * @param a 設定する乗算色のA値\r\n   */\r\n  public setMultiplyColorByRGBA(\r\n    index: number,\r\n    r: number,\r\n    g: number,\r\n    b: number,\r\n    a = 1.0\r\n  ) {\r\n    this._userMultiplyColors.at(index).color.r = r;\r\n    this._userMultiplyColors.at(index).color.g = g;\r\n    this._userMultiplyColors.at(index).color.b = b;\r\n    this._userMultiplyColors.at(index).color.a = a;\r\n  }\r\n\r\n  /**\r\n   * スクリーン色をセットする\r\n   * @param index Drawablesのインデックス\r\n   * @param color 設定するスクリーン色(CubismTextureColor)\r\n   */\r\n  public setScreenColorByTextureColor(\r\n    index: number,\r\n    color: CubismTextureColor\r\n  ) {\r\n    this.setScreenColorByRGBA(index, color.r, color.g, color.b, color.a);\r\n  }\r\n\r\n  /**\r\n   * スクリーン色をセットする\r\n   * @param index Drawablesのインデックス\r\n   * @param r 設定するスクリーン色のR値\r\n   * @param g 設定するスクリーン色のG値\r\n   * @param b 設定するスクリーン色のB値\r\n   * @param a 設定するスクリーン色のA値\r\n   */\r\n  public setScreenColorByRGBA(\r\n    index: number,\r\n    r: number,\r\n    g: number,\r\n    b: number,\r\n    a = 1.0\r\n  ) {\r\n    this._userScreenColors.at(index).color.r = r;\r\n    this._userScreenColors.at(index).color.g = g;\r\n    this._userScreenColors.at(index).color.b = b;\r\n    this._userScreenColors.at(index).color.a = a;\r\n  }\r\n  /**\r\n   * 부품의 부품 색상을 얻으십시오\r\n   * @param partIndex partのインデックス\r\n   * @returns 指定したpartの乗算色\r\n   */\r\n  public getPartMultiplyColor(partIndex: number): CubismTextureColor {\r\n    return this._userPartMultiplyColors.at(partIndex).color;\r\n  }\r\n\r\n  /**\r\n   * 부품의 화면 색상을 얻으십시오\r\n   * @param partIndex partのインデックス\r\n   * @returns 指定したpartのスクリーン色\r\n   */\r\n  public getPartScreenColor(partIndex: number): CubismTextureColor {\r\n    return this._userPartScreenColors.at(partIndex).color;\r\n  }\r\n\r\n  /**\r\n   * partのOverwriteColor setter関数\r\n   * @param partIndex partのインデックス\r\n   * @param r 設定する色のR値\r\n   * @param g 設定する色のG値\r\n   * @param b 設定する色のB値\r\n   * @param a 設定する色のA値\r\n   * @param partColors 設定するpartのカラーデータ配列\r\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\r\n   */\r\n  public setPartColor(\r\n    partIndex: number,\r\n    r: number,\r\n    g: number,\r\n    b: number,\r\n    a: number,\r\n    partColors: csmVector<PartColorData>,\r\n    drawableColors: csmVector<DrawableColorData>\r\n  ) {\r\n    partColors.at(partIndex).color.r = r;\r\n    partColors.at(partIndex).color.g = g;\r\n    partColors.at(partIndex).color.b = b;\r\n    partColors.at(partIndex).color.a = a;\r\n\r\n    if (partColors.at(partIndex).isOverwritten) {\r\n      for (\r\n        let i = 0;\r\n        i < this._partChildDrawables.at(partIndex).getSize();\r\n        ++i\r\n      ) {\r\n        const drawableIndex = this._partChildDrawables.at(partIndex).at(i);\r\n        drawableColors.at(drawableIndex).color.r = r;\r\n        drawableColors.at(drawableIndex).color.g = g;\r\n        drawableColors.at(drawableIndex).color.b = b;\r\n        drawableColors.at(drawableIndex).color.a = a;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 乗算色をセットする\r\n   * @param partIndex partのインデックス\r\n   * @param color 設定する乗算色(CubismTextureColor)\r\n   */\r\n  public setPartMultiplyColorByTextureColor(\r\n    partIndex: number,\r\n    color: CubismTextureColor\r\n  ) {\r\n    this.setPartMultiplyColorByRGBA(\r\n      partIndex,\r\n      color.r,\r\n      color.g,\r\n      color.b,\r\n      color.a\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 乗算色をセットする\r\n   * @param partIndex partのインデックス\r\n   * @param r 設定する乗算色のR値\r\n   * @param g 設定する乗算色のG値\r\n   * @param b 設定する乗算色のB値\r\n   * @param a 設定する乗算色のA値\r\n   */\r\n  public setPartMultiplyColorByRGBA(\r\n    partIndex: number,\r\n    r: number,\r\n    g: number,\r\n    b: number,\r\n    a: number\r\n  ) {\r\n    this.setPartColor(\r\n      partIndex,\r\n      r,\r\n      g,\r\n      b,\r\n      a,\r\n      this._userPartMultiplyColors,\r\n      this._userMultiplyColors\r\n    );\r\n  }\r\n\r\n  /**\r\n   * スクリーン色をセットする\r\n   * @param partIndex partのインデックス\r\n   * @param color 設定するスクリーン色(CubismTextureColor)\r\n   */\r\n  public setPartScreenColorByTextureColor(\r\n    partIndex: number,\r\n    color: CubismTextureColor\r\n  ) {\r\n    this.setPartScreenColorByRGBA(\r\n      partIndex,\r\n      color.r,\r\n      color.g,\r\n      color.b,\r\n      color.a\r\n    );\r\n  }\r\n\r\n  /**\r\n   * スクリーン色をセットする\r\n   * @param partIndex partのインデックス\r\n   * @param r 設定するスクリーン色のR値\r\n   * @param g 設定するスクリーン色のG値\r\n   * @param b 設定するスクリーン色のB値\r\n   * @param a 設定するスクリーン色のA値\r\n   */\r\n  public setPartScreenColorByRGBA(\r\n    partIndex: number,\r\n    r: number,\r\n    g: number,\r\n    b: number,\r\n    a: number\r\n  ) {\r\n    this.setPartColor(\r\n      partIndex,\r\n      r,\r\n      g,\r\n      b,\r\n      a,\r\n      this._userPartScreenColors,\r\n      this._userScreenColors\r\n    );\r\n  }\r\n\r\n  /**\r\n   * SDK에서 지정된 모델의 승수를 덮어 쓰나요?\r\n   * @returns true -> SDKからの情報を優先する\r\n   *          false -> モデルに設定されている色情報を使用\r\n   */\r\n  public getOverwriteFlagForModelMultiplyColors(): boolean {\r\n    return this._isOverwrittenModelMultiplyColors;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したモデルのスクリーン色を上書きするか\r\n   * @returns true -> SDKからの情報を優先する\r\n   *          false -> モデルに設定されている色情報を使用\r\n   */\r\n  public getOverwriteFlagForModelScreenColors(): boolean {\r\n    return this._isOverwrittenModelScreenColors;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したモデルの乗算色を上書きするかセットする\r\n   * @param value true -> SDKからの情報を優先する\r\n   *              false -> モデルに設定されている色情報を使用\r\n   */\r\n  public setOverwriteFlagForModelMultiplyColors(value: boolean) {\r\n    this._isOverwrittenModelMultiplyColors = value;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したモデルのスクリーン色を上書きするかセットする\r\n   * @param value true -> SDKからの情報を優先する\r\n   *              false -> モデルに設定されている色情報を使用\r\n   */\r\n  public setOverwriteFlagForModelScreenColors(value: boolean) {\r\n    this._isOverwrittenModelScreenColors = value;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したDrawableIndexの乗算色を上書きするか\r\n   * @returns true -> SDKからの情報を優先する\r\n   *          false -> モデルに設定されている色情報を使用\r\n   */\r\n  public getOverwriteFlagForDrawableMultiplyColors(\r\n    drawableindex: number\r\n  ): boolean {\r\n    return this._userMultiplyColors.at(drawableindex).isOverwritten;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするか\r\n   * @returns true -> SDKからの情報を優先する\r\n   *          false -> モデルに設定されている色情報を使用\r\n   */\r\n  public getOverwriteFlagForDrawableScreenColors(\r\n    drawableindex: number\r\n  ): boolean {\r\n    return this._userScreenColors.at(drawableindex).isOverwritten;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したDrawableIndexの乗算色を上書きするかセットする\r\n   * @param value true -> SDKからの情報を優先する\r\n   *              false -> モデルに設定されている色情報を使用\r\n   */\r\n  public setOverwriteFlagForDrawableMultiplyColors(\r\n    drawableindex: number,\r\n    value: boolean\r\n  ) {\r\n    this._userMultiplyColors.at(drawableindex).isOverwritten = value;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするかセットする\r\n   * @param value true -> SDKからの情報を優先する\r\n   *              false -> モデルに設定されている色情報を使用\r\n   */\r\n  public setOverwriteFlagForDrawableScreenColors(\r\n    drawableindex: number,\r\n    value: boolean\r\n  ) {\r\n    this._userScreenColors.at(drawableindex).isOverwritten = value;\r\n  }\r\n\r\n  /**\r\n   * SDKからpartの乗算色を上書きするか\r\n   * @param partIndex partのインデックス\r\n   * @returns true    ->  SDKからの情報を優先する\r\n   *          false   ->  モデルに設定されている色情報を使用\r\n   */\r\n  public getOverwriteColorForPartMultiplyColors(partIndex: number) {\r\n    return this._userPartMultiplyColors.at(partIndex).isOverwritten;\r\n  }\r\n\r\n  /**\r\n   * SDKからpartのスクリーン色を上書きするか\r\n   * @param partIndex partのインデックス\r\n   * @returns true    ->  SDKからの情報を優先する\r\n   *          false   ->  モデルに設定されている色情報を使用\r\n   */\r\n  public getOverwriteColorForPartScreenColors(partIndex: number) {\r\n    return this._userPartScreenColors.at(partIndex).isOverwritten;\r\n  }\r\n\r\n  /**\r\n   * partのOverwriteFlag setter関数\r\n   * @param partIndex partのインデックス\r\n   * @param value true -> SDKからの情報を優先する\r\n   *              false -> モデルに設定されている色情報を使用\r\n   * @param partColors 設定するpartのカラーデータ配列\r\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\r\n   */\r\n  public setOverwriteColorForPartColors(\r\n    partIndex: number,\r\n    value: boolean,\r\n    partColors: csmVector<PartColorData>,\r\n    drawableColors: csmVector<DrawableColorData>\r\n  ) {\r\n    partColors.at(partIndex).isOverwritten = value;\r\n\r\n    for (let i = 0; i < this._partChildDrawables.at(partIndex).getSize(); ++i) {\r\n      const drawableIndex = this._partChildDrawables.at(partIndex).at(i);\r\n      drawableColors.at(drawableIndex).isOverwritten = value;\r\n\r\n      if (value) {\r\n        drawableColors.at(drawableIndex).color.r =\r\n          partColors.at(partIndex).color.r;\r\n        drawableColors.at(drawableIndex).color.g =\r\n          partColors.at(partIndex).color.g;\r\n        drawableColors.at(drawableIndex).color.b =\r\n          partColors.at(partIndex).color.b;\r\n        drawableColors.at(drawableIndex).color.a =\r\n          partColors.at(partIndex).color.a;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * SDKからpartのスクリーン色を上書きするかをセットする\r\n   * @param partIndex partのインデックス\r\n   * @param value true -> SDKからの情報を優先する\r\n   *              false -> モデルに設定されている色情報を使用\r\n   */\r\n  public setOverwriteColorForPartMultiplyColors(\r\n    partIndex: number,\r\n    value: boolean\r\n  ) {\r\n    this._userPartMultiplyColors.at(partIndex).isOverwritten = value;\r\n    this.setOverwriteColorForPartColors(\r\n      partIndex,\r\n      value,\r\n      this._userPartMultiplyColors,\r\n      this._userMultiplyColors\r\n    );\r\n  }\r\n\r\n  /**\r\n   * SDKからpartのスクリーン色を上書きするかをセットする\r\n   * @param partIndex partのインデックス\r\n   * @param value true -> SDKからの情報を優先する\r\n   *              false -> モデルに設定されている色情報を使用\r\n   */\r\n  public setOverwriteColorForPartScreenColors(\r\n    partIndex: number,\r\n    value: boolean\r\n  ) {\r\n    this._userPartScreenColors.at(partIndex).isOverwritten = value;\r\n    this.setOverwriteColorForPartColors(\r\n      partIndex,\r\n      value,\r\n      this._userPartScreenColors,\r\n      this._userScreenColors\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableのカリング情報を取得する。\r\n   *\r\n   * @param   drawableIndex   Drawableのインデックス\r\n   * @return  Drawableのカリング情報\r\n   */\r\n  public getDrawableCulling(drawableIndex: number): boolean {\r\n    if (\r\n      this.getOverwriteFlagForModelCullings() ||\r\n      this.getOverwriteFlagForDrawableCullings(drawableIndex)\r\n    ) {\r\n      return this._userCullings.at(drawableIndex).isCulling;\r\n    }\r\n\r\n    const constantFlags = this._model.drawables.constantFlags;\r\n    return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(\r\n      constantFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 그림을 그릴 수있는 킹 정보를 설정하십시오.\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @param isCulling カリング情報\r\n   */\r\n  public setDrawableCulling(drawableIndex: number, isCulling: boolean): void {\r\n    this._userCullings.at(drawableIndex).isCulling = isCulling;\r\n  }\r\n\r\n  /**\r\n   * SDKからモデル全体のカリング設定を上書きするか。\r\n   *\r\n   * @retval  true    ->  SDK上のカリング設定を使用\r\n   * @retval  false   ->  モデルのカリング設定を使用\r\n   */\r\n  public getOverwriteFlagForModelCullings(): boolean {\r\n    return this._isOverwrittenCullings;\r\n  }\r\n\r\n  /**\r\n   * SDKからモデル全体のカリング設定を上書きするかを設定する。\r\n   *\r\n   * @param isOverwrittenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\r\n   */\r\n  public setOverwriteFlagForModelCullings(\r\n    isOverwrittenCullings: boolean\r\n  ): void {\r\n    this._isOverwrittenCullings = isOverwrittenCullings;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @retval  true    ->  SDK上のカリング設定を使用\r\n   * @retval  false   ->  モデルのカリング設定を使用\r\n   */\r\n  public getOverwriteFlagForDrawableCullings(drawableIndex: number): boolean {\r\n    return this._userCullings.at(drawableIndex).isOverwritten;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @param isOverwrittenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\r\n   */\r\n  public setOverwriteFlagForDrawableCullings(\r\n    drawableIndex: number,\r\n    isOverwrittenCullings: boolean\r\n  ): void {\r\n    this._userCullings.at(drawableIndex).isOverwritten = isOverwrittenCullings;\r\n  }\r\n\r\n  /**\r\n   * モデルの不透明度を取得する\r\n   *\r\n   * @returns 不透明度の値\r\n   */\r\n  public getModelOapcity(): number {\r\n    return this._modelOpacity;\r\n  }\r\n\r\n  /**\r\n   * モデルの不透明度を設定する\r\n   *\r\n   * @param value 不透明度の値\r\n   */\r\n  public setModelOapcity(value: number) {\r\n    this._modelOpacity = value;\r\n  }\r\n\r\n  /**\r\n   * 모델을 얻으십시오\r\n   */\r\n  public getModel(): Live2DCubismCore.Model {\r\n    return this._model;\r\n  }\r\n\r\n  /**\r\n   * 부품의 색인을 얻으십시오\r\n   * @param partId パーツのID\r\n   * @return パーツのインデックス\r\n   */\r\n  public getPartIndex(partId: CubismIdHandle): number {\r\n    let partIndex: number;\r\n    const partCount: number = this._model.parts.count;\r\n\r\n    for (partIndex = 0; partIndex < partCount; ++partIndex) {\r\n      if (partId == this._partIds.at(partIndex)) {\r\n        return partIndex;\r\n      }\r\n    }\r\n\r\n    // 모델에 존재하지 않는 경우 존재하지 않는 부품 ID 목록을 검색하고 인덱스를 반환하십시오.\r\n    if (this._notExistPartId.isExist(partId)) {\r\n      return this._notExistPartId.getValue(partId);\r\n    }\r\n\r\n    // 非存在パーツIDリストにない場合、新しく要素を追加する\r\n    partIndex = partCount + this._notExistPartId.getSize();\r\n    this._notExistPartId.setValue(partId, partIndex);\r\n    this._notExistPartOpacities.appendKey(partIndex);\r\n\r\n    return partIndex;\r\n  }\r\n\r\n  /**\r\n   * 부품의 ID를 얻으십시오.\r\n   *\r\n   * @param partIndex 획득 할 부품의 색인\r\n   * @return パーツのID\r\n   */\r\n  public getPartId(partIndex: number): CubismIdHandle {\r\n    const partId = this._model.parts.ids[partIndex];\r\n    return CubismFramework.getIdManager().getId(partId);\r\n  }\r\n\r\n  /**\r\n   * パーツの個数の取得\r\n   * @return パーツの個数\r\n   */\r\n  public getPartCount(): number {\r\n    const partCount: number = this._model.parts.count;\r\n    return partCount;\r\n  }\r\n\r\n  /**\r\n   * 불투명 한 부품 세트(Index)\r\n   * @param partIndex パーツのインデックス\r\n   * @param opacity 不透明度\r\n   */\r\n  public setPartOpacityByIndex(partIndex: number, opacity: number): void {\r\n    if (this._notExistPartOpacities.isExist(partIndex)) {\r\n      this._notExistPartOpacities.setValue(partIndex, opacity);\r\n      return;\r\n    }\r\n\r\n    // インデックスの範囲内検知\r\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\r\n\r\n    this._partOpacities[partIndex] = opacity;\r\n  }\r\n\r\n  /**\r\n   * パーツの不透明度の設定(Id)\r\n   * @param partId パーツのID\r\n   * @param opacity パーツの不透明度\r\n   */\r\n  public setPartOpacityById(partId: CubismIdHandle, opacity: number): void {\r\n    // 속도를 높이기 위해 partindex를 획득 할 수있는 메커니즘이지만 외부에서 설정할 때 통화 빈도가 낮기 때문에 필요하지 않습니다.\r\n    const index: number = this.getPartIndex(partId);\r\n\r\n    if (index < 0) {\r\n      return; // パーツがないのでスキップ\r\n    }\r\n\r\n    this.setPartOpacityByIndex(index, opacity);\r\n  }\r\n\r\n  /**\r\n   * パーツの不透明度の取得(index)\r\n   * @param partIndex パーツのインデックス\r\n   * @return パーツの不透明度\r\n   */\r\n  public getPartOpacityByIndex(partIndex: number): number {\r\n    if (this._notExistPartOpacities.isExist(partIndex)) {\r\n      // モデルに存在しないパーツIDの場合、非存在パーツリストから不透明度を返す。\r\n      return this._notExistPartOpacities.getValue(partIndex);\r\n    }\r\n\r\n    // インデックスの範囲内検知\r\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\r\n\r\n    return this._partOpacities[partIndex];\r\n  }\r\n\r\n  /**\r\n   * パーツの不透明度の取得(id)\r\n   * @param partId パーツのＩｄ\r\n   * @return パーツの不透明度\r\n   */\r\n  public getPartOpacityById(partId: CubismIdHandle): number {\r\n    // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\r\n    const index: number = this.getPartIndex(partId);\r\n\r\n    if (index < 0) {\r\n      return 0; // パーツが無いのでスキップ\r\n    }\r\n\r\n    return this.getPartOpacityByIndex(index);\r\n  }\r\n\r\n  /**\r\n   * 매개 변수 인덱스 획득\r\n   * @param パラメータID\r\n   * @return パラメータのインデックス\r\n   */\r\n  public getParameterIndex(parameterId: CubismIdHandle): number {\r\n    let parameterIndex: number;\r\n    const idCount: number = this._model.parameters.count;\r\n\r\n    for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\r\n      if (parameterId != this._parameterIds.at(parameterIndex)) {\r\n        continue;\r\n      }\r\n\r\n      return parameterIndex;\r\n    }\r\n\r\n    // モデルに存在していない場合、非存在パラメータIDリスト内を検索し、そのインデックスを返す\r\n    if (this._notExistParameterId.isExist(parameterId)) {\r\n      return this._notExistParameterId.getValue(parameterId);\r\n    }\r\n\r\n    // 非存在パラメータIDリストにない場合新しく要素を追加する\r\n    parameterIndex =\r\n      this._model.parameters.count + this._notExistParameterId.getSize();\r\n\r\n    this._notExistParameterId.setValue(parameterId, parameterIndex);\r\n    this._notExistParameterValues.appendKey(parameterIndex);\r\n\r\n    return parameterIndex;\r\n  }\r\n\r\n  /**\r\n   * パラメータの個数の取得\r\n   * @return パラメータの個数\r\n   */\r\n  public getParameterCount(): number {\r\n    return this._model.parameters.count;\r\n  }\r\n\r\n  /**\r\n   * パラメータの種類の取得\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @return csmParameterType_Normal -> 通常のパラメータ\r\n   *          csmParameterType_BlendShape -> ブレンドシェイプパラメータ\r\n   */\r\n  public getParameterType(\r\n    parameterIndex: number\r\n  ): Live2DCubismCore.csmParameterType {\r\n    return this._model.parameters.types[parameterIndex];\r\n  }\r\n\r\n  /**\r\n   * 매개 변수의 최대 값을 얻으십시오\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @return パラメータの最大値\r\n   */\r\n  public getParameterMaximumValue(parameterIndex: number): number {\r\n    return this._model.parameters.maximumValues[parameterIndex];\r\n  }\r\n\r\n  /**\r\n   * パラメータの最小値の取得\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @return パラメータの最小値\r\n   */\r\n  public getParameterMinimumValue(parameterIndex: number): number {\r\n    return this._model.parameters.minimumValues[parameterIndex];\r\n  }\r\n\r\n  /**\r\n   * パラメータのデフォルト値の取得\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @return パラメータのデフォルト値\r\n   */\r\n  public getParameterDefaultValue(parameterIndex: number): number {\r\n    return this._model.parameters.defaultValues[parameterIndex];\r\n  }\r\n\r\n  /**\r\n   * 指定したパラメータindexのIDを取得\r\n   *\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @returns パラメータID\r\n   */\r\n  public getParameterId(parameterIndex: number): CubismIdHandle {\r\n    return CubismFramework.getIdManager().getId(\r\n      this._model.parameters.ids[parameterIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の取得\r\n   * @param parameterIndex    パラメータのインデックス\r\n   * @return パラメータの値\r\n   */\r\n  public getParameterValueByIndex(parameterIndex: number): number {\r\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\r\n      return this._notExistParameterValues.getValue(parameterIndex);\r\n    }\r\n\r\n    // インデックスの範囲内検知\r\n    CSM_ASSERT(\r\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\r\n    );\r\n\r\n    return this._parameterValues[parameterIndex];\r\n  }\r\n\r\n  /**\r\n   * 매개 변수 값 획득\r\n   * @param parameterId    パラメータのID\r\n   * @return パラメータの値\r\n   */\r\n  public getParameterValueById(parameterId: CubismIdHandle): number {\r\n    // 高速化のためにparameterIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\r\n    const parameterIndex: number = this.getParameterIndex(parameterId);\r\n    return this.getParameterValueByIndex(parameterIndex);\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の設定\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @param value パラメータの値\r\n   * @param weight 重み\r\n   */\r\n  public setParameterValueByIndex(\r\n    parameterIndex: number,\r\n    value: number,\r\n    weight = 1.0\r\n  ): void {\r\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\r\n      this._notExistParameterValues.setValue(\r\n        parameterIndex,\r\n        weight == 1\r\n          ? value\r\n          : this._notExistParameterValues.getValue(parameterIndex) *\r\n              (1 - weight) +\r\n              value * weight\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    // 인덱스 범위에서 감지\r\n    CSM_ASSERT(\r\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\r\n    );\r\n\r\n    if (this._model.parameters.maximumValues[parameterIndex] < value) {\r\n      value = this._model.parameters.maximumValues[parameterIndex];\r\n    }\r\n    if (this._model.parameters.minimumValues[parameterIndex] > value) {\r\n      value = this._model.parameters.minimumValues[parameterIndex];\r\n    }\r\n\r\n    this._parameterValues[parameterIndex] =\r\n      weight == 1\r\n        ? value\r\n        : (this._parameterValues[parameterIndex] =\r\n            this._parameterValues[parameterIndex] * (1 - weight) +\r\n            value * weight);\r\n  }\r\n\r\n  /**\r\n   * 매개 변수 값 세트\r\n   * @param parameterId パラメータのID\r\n   * @param value パラメータの値\r\n   * @param weight 重み\r\n   */\r\n  public setParameterValueById(\r\n    parameterId: CubismIdHandle,\r\n    value: number,\r\n    weight = 1.0\r\n  ): void {\r\n    const index: number = this.getParameterIndex(parameterId);\r\n    this.setParameterValueByIndex(index, value, weight);\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の加算(index)\r\n   * @param parameterIndex パラメータインデックス\r\n   * @param value 加算する値\r\n   * @param weight 重み\r\n   */\r\n  public addParameterValueByIndex(\r\n    parameterIndex: number,\r\n    value: number,\r\n    weight = 1.0\r\n  ): void {\r\n    this.setParameterValueByIndex(\r\n      parameterIndex,\r\n      this.getParameterValueByIndex(parameterIndex) + value * weight\r\n    );\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の加算(id)\r\n   * @param parameterId パラメータＩＤ\r\n   * @param value 加算する値\r\n   * @param weight 重み\r\n   */\r\n  public addParameterValueById(\r\n    parameterId: any,\r\n    value: number,\r\n    weight = 1.0\r\n  ): void {\r\n    const index: number = this.getParameterIndex(parameterId);\r\n    this.addParameterValueByIndex(index, value, weight);\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の乗算\r\n   * @param parameterId パラメータのID\r\n   * @param value 乗算する値\r\n   * @param weight 重み\r\n   */\r\n  public multiplyParameterValueById(\r\n    parameterId: CubismIdHandle,\r\n    value: number,\r\n    weight = 1.0\r\n  ): void {\r\n    const index: number = this.getParameterIndex(parameterId);\r\n    this.multiplyParameterValueByIndex(index, value, weight);\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の乗算\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @param value 乗算する値\r\n   * @param weight 重み\r\n   */\r\n  public multiplyParameterValueByIndex(\r\n    parameterIndex: number,\r\n    value: number,\r\n    weight = 1.0\r\n  ): void {\r\n    this.setParameterValueByIndex(\r\n      parameterIndex,\r\n      this.getParameterValueByIndex(parameterIndex) *\r\n        (1.0 + (value - 1.0) * weight)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawable Index의 획득\r\n   * @param drawableId DrawableのID\r\n   * @return Drawableのインデックス\r\n   */\r\n  public getDrawableIndex(drawableId: CubismIdHandle): number {\r\n    const drawableCount = this._model.drawables.count;\r\n\r\n    for (\r\n      let drawableIndex = 0;\r\n      drawableIndex < drawableCount;\r\n      ++drawableIndex\r\n    ) {\r\n      if (this._drawableIds.at(drawableIndex) == drawableId) {\r\n        return drawableIndex;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Drawableの個数の取得\r\n   * @return drawableの個数\r\n   */\r\n  public getDrawableCount(): number {\r\n    const drawableCount = this._model.drawables.count;\r\n    return drawableCount;\r\n  }\r\n\r\n  /**\r\n   * DrawableのIDを取得する\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableのID\r\n   */\r\n  public getDrawableId(drawableIndex: number): CubismIdHandle {\r\n    const parameterIds: string[] = this._model.drawables.ids;\r\n    return CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);\r\n  }\r\n\r\n  /**\r\n   * Drawableの描画順リストの取得\r\n   * @return Drawableの描画順リスト\r\n   */\r\n  public getDrawableRenderOrders(): Int32Array {\r\n    const renderOrders: Int32Array = this._model.drawables.renderOrders;\r\n    return renderOrders;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * 関数名が誤っていたため、代替となる getDrawableTextureIndex を追加し、この関数は非推奨となりました。\r\n   *\r\n   * Drawableのテクスチャインデックスリストの取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableのテクスチャインデックスリスト\r\n   */\r\n  public getDrawableTextureIndices(drawableIndex: number): number {\r\n    return this.getDrawableTextureIndex(drawableIndex);\r\n  }\r\n\r\n  /**\r\n   * Drawableのテクスチャインデックスの取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableのテクスチャインデックス\r\n   */\r\n  public getDrawableTextureIndex(drawableIndex: number): number {\r\n    const textureIndices: Int32Array = this._model.drawables.textureIndices;\r\n    return textureIndices[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * DrawableのVertexPositionsの변경 정보 획득\r\n   *\r\n   * 直近のCubismModel.update関数でDrawableの頂点情報が変化したかを取得する。\r\n   *\r\n   * @param   drawableIndex   Drawableのインデックス\r\n   * @retval  true    Drawableの頂点情報が直近のCubismModel.update関数で変化した\r\n   * @retval  false   Drawableの頂点情報が直近のCubismModel.update関数で変化していない\r\n   */\r\n  public getDrawableDynamicFlagVertexPositionsDidChange(\r\n    drawableIndex: number\r\n  ): boolean {\r\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(\r\n      dynamicFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableの頂点インデックスの個数の取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの頂点インデックスの個数\r\n   */\r\n  public getDrawableVertexIndexCount(drawableIndex: number): number {\r\n    const indexCounts: Int32Array = this._model.drawables.indexCounts;\r\n    return indexCounts[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableの頂点の個数の取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの頂点の個数\r\n   */\r\n  public getDrawableVertexCount(drawableIndex: number): number {\r\n    const vertexCounts = this._model.drawables.vertexCounts;\r\n    return vertexCounts[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableの頂点リストの取得\r\n   * @param drawableIndex drawableのインデックス\r\n   * @return drawableの頂点リスト\r\n   */\r\n  public getDrawableVertices(drawableIndex: number): Float32Array {\r\n    return this.getDrawableVertexPositions(drawableIndex);\r\n  }\r\n\r\n  /**\r\n   * Drawableの頂点インデックスリストの取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの頂点インデックスリスト\r\n   */\r\n  public getDrawableVertexIndices(drawableIndex: number): Uint16Array {\r\n    const indicesArray: Uint16Array[] = this._model.drawables.indices;\r\n    return indicesArray[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableの頂点リストの取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの頂点リスト\r\n   */\r\n  public getDrawableVertexPositions(drawableIndex: number): Float32Array {\r\n    const verticesArray: Float32Array[] = this._model.drawables.vertexPositions;\r\n    return verticesArray[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableの頂点のUVリストの取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの頂点UVリスト\r\n   */\r\n  public getDrawableVertexUvs(drawableIndex: number): Float32Array {\r\n    const uvsArray: Float32Array[] = this._model.drawables.vertexUvs;\r\n    return uvsArray[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableの不透明度の取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの不透明度\r\n   */\r\n  public getDrawableOpacity(drawableIndex: number): number {\r\n    const opacities: Float32Array = this._model.drawables.opacities;\r\n    return opacities[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableの乗算色の取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの乗算色(RGBA)\r\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\r\n   */\r\n  public getDrawableMultiplyColor(drawableIndex: number): CubismTextureColor {\r\n    const multiplyColors: Float32Array = this._model.drawables.multiplyColors;\r\n    const index = drawableIndex * 4;\r\n    const multiplyColor: CubismTextureColor = new CubismTextureColor();\r\n    multiplyColor.r = multiplyColors[index];\r\n    multiplyColor.g = multiplyColors[index + 1];\r\n    multiplyColor.b = multiplyColors[index + 2];\r\n    multiplyColor.a = multiplyColors[index + 3];\r\n    return multiplyColor;\r\n  }\r\n\r\n  /**\r\n   * Drawableのスクリーン色の取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableのスクリーン色(RGBA)\r\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\r\n   */\r\n  public getDrawableScreenColor(drawableIndex: number): CubismTextureColor {\r\n    const screenColors: Float32Array = this._model.drawables.screenColors;\r\n    const index = drawableIndex * 4;\r\n    const screenColor: CubismTextureColor = new CubismTextureColor();\r\n    screenColor.r = screenColors[index];\r\n    screenColor.g = screenColors[index + 1];\r\n    screenColor.b = screenColors[index + 2];\r\n    screenColor.a = screenColors[index + 3];\r\n    return screenColor;\r\n  }\r\n\r\n  /**\r\n   * Drawableの親パーツのインデックスの取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの親パーツのインデックス\r\n   */\r\n  public getDrawableParentPartIndex(drawableIndex: number): number {\r\n    return this._model.drawables.parentPartIndices[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableのブレンドモードを取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableのブレンドモード\r\n   */\r\n  public getDrawableBlendMode(drawableIndex: number): CubismBlendMode {\r\n    const constantFlags = this._model.drawables.constantFlags;\r\n\r\n    return Live2DCubismCore.Utils.hasBlendAdditiveBit(\r\n      constantFlags[drawableIndex]\r\n    )\r\n      ? CubismBlendMode.CubismBlendMode_Additive\r\n      : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(\r\n            constantFlags[drawableIndex]\r\n          )\r\n        ? CubismBlendMode.CubismBlendMode_Multiplicative\r\n        : CubismBlendMode.CubismBlendMode_Normal;\r\n  }\r\n\r\n  /**\r\n   * Drawableのマスクの反転使用の取得\r\n   *\r\n   * Drawableのマスク使用時の反転設定を取得する。\r\n   * マスクを使用しない場合は無視される。\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return Drawableの反転設定\r\n   */\r\n  public getDrawableInvertedMaskBit(drawableIndex: number): boolean {\r\n    const constantFlags: Uint8Array = this._model.drawables.constantFlags;\r\n\r\n    return Live2DCubismCore.Utils.hasIsInvertedMaskBit(\r\n      constantFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableのクリッピングマスクリストの取得\r\n   * @return Drawableのクリッピングマスクリスト\r\n   */\r\n  public getDrawableMasks(): Int32Array[] {\r\n    const masks: Int32Array[] = this._model.drawables.masks;\r\n    return masks;\r\n  }\r\n\r\n  /**\r\n   * Drawableのクリッピングマスクの個数リストの取得\r\n   * @return Drawableのクリッピングマスクの個数リスト\r\n   */\r\n  public getDrawableMaskCounts(): Int32Array {\r\n    const maskCounts: Int32Array = this._model.drawables.maskCounts;\r\n    return maskCounts;\r\n  }\r\n\r\n  /**\r\n   * クリッピングマスクの使用状態\r\n   *\r\n   * @return true クリッピングマスクを使用している\r\n   * @return false クリッピングマスクを使用していない\r\n   */\r\n  public isUsingMasking(): boolean {\r\n    for (let d = 0; d < this._model.drawables.count; ++d) {\r\n      if (this._model.drawables.maskCounts[d] <= 0) {\r\n        continue;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Drawableの表示情報を取得する\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return true Drawableが表示\r\n   * @return false Drawableが非表示\r\n   */\r\n  public getDrawableDynamicFlagIsVisible(drawableIndex: number): boolean {\r\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\r\n  }\r\n\r\n  /**\r\n   * DrawableのDrawOrderの変化情報の取得\r\n   *\r\n   * 直近のCubismModel.update関数でdrawableのdrawOrderが変化したかを取得する。\r\n   * drawOrderはartMesh上で指定する0から1000の情報\r\n   * @param drawableIndex drawableのインデックス\r\n   * @return true drawableの不透明度が直近のCubismModel.update関数で変化した\r\n   * @return false drawableの不透明度が直近のCubismModel.update関数で変化している\r\n   */\r\n  public getDrawableDynamicFlagVisibilityDidChange(\r\n    drawableIndex: number\r\n  ): boolean {\r\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(\r\n      dynamicFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableの不透明度の変化情報の取得\r\n   *\r\n   * 直近のCubismModel.update関数でdrawableの不透明度が変化したかを取得する。\r\n   *\r\n   * @param drawableIndex drawableのインデックス\r\n   * @return true Drawableの不透明度が直近のCubismModel.update関数で変化した\r\n   * @return false Drawableの不透明度が直近のCubismModel.update関数で変化してない\r\n   */\r\n  public getDrawableDynamicFlagOpacityDidChange(\r\n    drawableIndex: number\r\n  ): boolean {\r\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasOpacityDidChangeBit(\r\n      dynamicFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableの도출 순서대로 변경 정보 획득\r\n   *\r\n   * 直近のCubismModel.update関数でDrawableの描画の順序が変化したかを取得する。\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return true Drawableの描画の順序が直近のCubismModel.update関数で変化した\r\n   * @return false Drawableの描画の順序が直近のCubismModel.update関数で変化してない\r\n   */\r\n  public getDrawableDynamicFlagRenderOrderDidChange(\r\n    drawableIndex: number\r\n  ): boolean {\r\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(\r\n      dynamicFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableの乗算色・スクリーン色の変化情報の取得\r\n   *\r\n   * 直近のCubismModel.update関数でDrawableの乗算色・スクリーン色が変化したかを取得する。\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return true Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化した\r\n   * @return false Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化してない\r\n   */\r\n  public getDrawableDynamicFlagBlendColorDidChange(\r\n    drawableIndex: number\r\n  ): boolean {\r\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(\r\n      dynamicFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 저장된 매개 변수를 읽으십시오\r\n   */\r\n  public loadParameters(): void {\r\n    let parameterCount: number = this._model.parameters.count;\r\n    const savedParameterCount: number = this._savedParameters.getSize();\r\n\r\n    if (parameterCount > savedParameterCount) {\r\n      parameterCount = savedParameterCount;\r\n    }\r\n\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      this._parameterValues[i] = this._savedParameters.at(i);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初期化する\r\n   */\r\n  public initialize(): void {\r\n    CSM_ASSERT(this._model);\r\n\r\n    this._parameterValues = this._model.parameters.values;\r\n    this._partOpacities = this._model.parts.opacities;\r\n    this._parameterMaximumValues = this._model.parameters.maximumValues;\r\n    this._parameterMinimumValues = this._model.parameters.minimumValues;\r\n\r\n    {\r\n      const parameterIds: string[] = this._model.parameters.ids;\r\n      const parameterCount: number = this._model.parameters.count;\r\n\r\n      this._parameterIds.prepareCapacity(parameterCount);\r\n      for (let i = 0; i < parameterCount; ++i) {\r\n        this._parameterIds.pushBack(\r\n          CubismFramework.getIdManager().getId(parameterIds[i])\r\n        );\r\n      }\r\n    }\r\n\r\n    const partCount: number = this._model.parts.count;\r\n    {\r\n      const partIds: string[] = this._model.parts.ids;\r\n\r\n      this._partIds.prepareCapacity(partCount);\r\n      for (let i = 0; i < partCount; ++i) {\r\n        this._partIds.pushBack(\r\n          CubismFramework.getIdManager().getId(partIds[i])\r\n        );\r\n      }\r\n\r\n      this._userPartMultiplyColors.prepareCapacity(partCount);\r\n      this._userPartScreenColors.prepareCapacity(partCount);\r\n\r\n      this._partChildDrawables.prepareCapacity(partCount);\r\n    }\r\n\r\n    {\r\n      const drawableIds: string[] = this._model.drawables.ids;\r\n      const drawableCount: number = this._model.drawables.count;\r\n\r\n      this._userMultiplyColors.prepareCapacity(drawableCount);\r\n      this._userScreenColors.prepareCapacity(drawableCount);\r\n\r\n      // カリング設定\r\n      this._userCullings.prepareCapacity(drawableCount);\r\n      const userCulling: DrawableCullingData = new DrawableCullingData(\r\n        false,\r\n        false\r\n      );\r\n\r\n      // Part\r\n      {\r\n        for (let i = 0; i < partCount; ++i) {\r\n          const multiplyColor: CubismTextureColor = new CubismTextureColor(\r\n            1.0,\r\n            1.0,\r\n            1.0,\r\n            1.0\r\n          );\r\n          const screenColor: CubismTextureColor = new CubismTextureColor(\r\n            0.0,\r\n            0.0,\r\n            0.0,\r\n            1.0\r\n          );\r\n\r\n          const userMultiplyColor: PartColorData = new PartColorData(\r\n            false,\r\n            multiplyColor\r\n          );\r\n          const userScreenColor: PartColorData = new PartColorData(\r\n            false,\r\n            screenColor\r\n          );\r\n\r\n          this._userPartMultiplyColors.pushBack(userMultiplyColor);\r\n          this._userPartScreenColors.pushBack(userScreenColor);\r\n          this._partChildDrawables.pushBack(new csmVector<number>());\r\n          this._partChildDrawables.at(i).prepareCapacity(drawableCount);\r\n        }\r\n      }\r\n\r\n      // Drawables\r\n      {\r\n        for (let i = 0; i < drawableCount; ++i) {\r\n          const multiplyColor: CubismTextureColor = new CubismTextureColor(\r\n            1.0,\r\n            1.0,\r\n            1.0,\r\n            1.0\r\n          );\r\n          const screenColor: CubismTextureColor = new CubismTextureColor(\r\n            0.0,\r\n            0.0,\r\n            0.0,\r\n            1.0\r\n          );\r\n\r\n          const userMultiplyColor: DrawableColorData = new DrawableColorData(\r\n            false,\r\n            multiplyColor\r\n          );\r\n          const userScreenColor: DrawableColorData = new DrawableColorData(\r\n            false,\r\n            screenColor\r\n          );\r\n\r\n          this._drawableIds.pushBack(\r\n            CubismFramework.getIdManager().getId(drawableIds[i])\r\n          );\r\n\r\n          this._userMultiplyColors.pushBack(userMultiplyColor);\r\n          this._userScreenColors.pushBack(userScreenColor);\r\n\r\n          this._userCullings.pushBack(userCulling);\r\n\r\n          const parentIndex = this.getDrawableParentPartIndex(i);\r\n          if (parentIndex >= 0) {\r\n            this._partChildDrawables.at(parentIndex).pushBack(i);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   * @param model モデル\r\n   */\r\n  public constructor(model: Live2DCubismCore.Model) {\r\n    this._model = model;\r\n    this._parameterValues = null;\r\n    this._parameterMaximumValues = null;\r\n    this._parameterMinimumValues = null;\r\n    this._partOpacities = null;\r\n    this._savedParameters = new csmVector<number>();\r\n    this._parameterIds = new csmVector<CubismIdHandle>();\r\n    this._drawableIds = new csmVector<CubismIdHandle>();\r\n    this._partIds = new csmVector<CubismIdHandle>();\r\n    this._isOverwrittenModelMultiplyColors = false;\r\n    this._isOverwrittenModelScreenColors = false;\r\n    this._isOverwrittenCullings = false;\r\n    this._modelOpacity = 1.0;\r\n\r\n    this._userMultiplyColors = new csmVector<DrawableColorData>();\r\n    this._userScreenColors = new csmVector<DrawableColorData>();\r\n    this._userCullings = new csmVector<DrawableCullingData>();\r\n    this._userPartMultiplyColors = new csmVector<PartColorData>();\r\n    this._userPartScreenColors = new csmVector<PartColorData>();\r\n    this._partChildDrawables = new csmVector<csmVector<number>>();\r\n\r\n    this._notExistPartId = new csmMap<CubismIdHandle, number>();\r\n    this._notExistParameterId = new csmMap<CubismIdHandle, number>();\r\n    this._notExistParameterValues = new csmMap<number, number>();\r\n    this._notExistPartOpacities = new csmMap<number, number>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    this._model.release();\r\n    this._model = null;\r\n  }\r\n\r\n  private _notExistPartOpacities: csmMap<number, number>; // 存在していないパーツの不透明度のリスト\r\n  private _notExistPartId: csmMap<CubismIdHandle, number>; // 存在していないパーツIDのリスト\r\n\r\n  private _notExistParameterValues: csmMap<number, number>; // 存在していないパラメータの値のリスト\r\n  private _notExistParameterId: csmMap<CubismIdHandle, number>; // 存在していないパラメータIDのリスト\r\n\r\n  private _savedParameters: csmVector<number>; // 保存されたパラメータ\r\n\r\n  private _isOverwrittenModelMultiplyColors: boolean; // SDK上でモデル全体の乗算色を上書きするか判定するフラグ\r\n  private _isOverwrittenModelScreenColors: boolean; // SDK上でモデル全体のスクリーン色を上書きするか判定するフラグ\r\n  private _userMultiplyColors: csmVector<DrawableColorData>; // Drawableごとに設定する乗算色と上書きフラグを管理するリスト\r\n  private _userScreenColors: csmVector<DrawableColorData>; // Drawableごとに設定するスクリーン色と上書きフラグを管理するリスト\r\n  private _userPartScreenColors: csmVector<PartColorData>; // Part 乗算色の配列\r\n  private _userPartMultiplyColors: csmVector<PartColorData>; // Part スクリーン色の配列\r\n  private _partChildDrawables: csmVector<csmVector<number>>; // Partの子DrawableIndexの配列\r\n\r\n  private _model: Live2DCubismCore.Model; // モデル\r\n\r\n  private _parameterValues: Float32Array; // パラメータの値のリスト\r\n  private _parameterMaximumValues: Float32Array; // パラメータの最大値のリスト\r\n  private _parameterMinimumValues: Float32Array; // パラメータの最小値のリスト\r\n\r\n  private _partOpacities: Float32Array; // パーツの不透明度のリスト\r\n\r\n  private _modelOpacity: number; // モデルの不透明度\r\n\r\n  private _parameterIds: csmVector<CubismIdHandle>;\r\n  private _partIds: csmVector<CubismIdHandle>;\r\n  private _drawableIds: csmVector<CubismIdHandle>;\r\n\r\n  private _isOverwrittenCullings: boolean; // モデルのカリング設定をすべて上書きするか？\r\n  private _userCullings: csmVector<DrawableCullingData>; // カリング設定の配列\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmodel';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismModel = $.CubismModel;\r\n  export type CubismModel = $.CubismModel;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CSM_ASSERT, CubismLogError } from '../utils/cubismdebug';\r\nimport { CubismModel } from './cubismmodel';\r\n\r\n/**\r\n * Mocデータの管理\r\n *\r\n * Mocデータの管理を行うクラス。\r\n */\r\nexport class CubismMoc {\r\n  /**\r\n   * Mocデータの作成\r\n   */\r\n  public static create(\r\n    mocBytes: ArrayBuffer,\r\n    shouldCheckMocConsistency: boolean\r\n  ): CubismMoc {\r\n    let cubismMoc: CubismMoc = null;\r\n\r\n    if (shouldCheckMocConsistency) {\r\n      // .moc3の整合性を確認\r\n      const consistency = this.hasMocConsistency(mocBytes);\r\n\r\n      if (!consistency) {\r\n        // 整合性が確認できなければ処理しない\r\n        CubismLogError(`Inconsistent MOC3.`);\r\n        return cubismMoc;\r\n      }\r\n    }\r\n\r\n    const moc: Live2DCubismCore.Moc =\r\n      Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);\r\n\r\n    if (moc) {\r\n      cubismMoc = new CubismMoc(moc);\r\n      cubismMoc._mocVersion = Live2DCubismCore.Version.csmGetMocVersion(\r\n        moc,\r\n        mocBytes\r\n      );\r\n    }\r\n\r\n    return cubismMoc;\r\n  }\r\n\r\n  /**\r\n   * Mocデータを削除\r\n   *\r\n   * Mocデータを削除する\r\n   */\r\n  public static delete(moc: CubismMoc): void {\r\n    moc._moc._release();\r\n    moc._moc = null;\r\n    moc = null;\r\n  }\r\n\r\n  /**\r\n   * モデルを作成する\r\n   *\r\n   * @return Mocデータから作成されたモデル\r\n   */\r\n  createModel(): CubismModel {\r\n    let cubismModel: CubismModel = null;\r\n\r\n    const model: Live2DCubismCore.Model = Live2DCubismCore.Model.fromMoc(\r\n      this._moc\r\n    );\r\n\r\n    if (model) {\r\n      cubismModel = new CubismModel(model);\r\n      cubismModel.initialize();\r\n\r\n      ++this._modelCount;\r\n    }\r\n\r\n    return cubismModel;\r\n  }\r\n\r\n  /**\r\n   * モデルを削除する\r\n   */\r\n  deleteModel(model: CubismModel): void {\r\n    if (model != null) {\r\n      model.release();\r\n      model = null;\r\n      --this._modelCount;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  private constructor(moc: Live2DCubismCore.Moc) {\r\n    this._moc = moc;\r\n    this._modelCount = 0;\r\n    this._mocVersion = 0;\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    CSM_ASSERT(this._modelCount == 0);\r\n\r\n    this._moc._release();\r\n    this._moc = null;\r\n  }\r\n\r\n  /**\r\n   * 最新の.moc3 Versionを取得\r\n   */\r\n  public getLatestMocVersion(): number {\r\n    return Live2DCubismCore.Version.csmGetLatestMocVersion();\r\n  }\r\n\r\n  /**\r\n   * 読み込んだモデルの.moc3 Versionを取得\r\n   */\r\n  public getMocVersion(): number {\r\n    return this._mocVersion;\r\n  }\r\n\r\n  /**\r\n   * .moc3 の整合性を検証する\r\n   */\r\n  public static hasMocConsistency(mocBytes: ArrayBuffer): boolean {\r\n    const isConsistent =\r\n      Live2DCubismCore.Moc.prototype.hasMocConsistency(mocBytes);\r\n    return isConsistent === 1 ? true : false;\r\n  }\r\n\r\n  _moc: Live2DCubismCore.Moc; // Mocデータ\r\n  _modelCount: number; // Mocデータから作られたモデルの個数\r\n  _mocVersion: number; // 読み込んだモデルの.moc3 Version\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmoc';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMoc = $.CubismMoc;\r\n  export type CubismMoc = $.CubismMoc;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { CubismJson } from '../utils/cubismjson';\r\n\r\nconst Meta = 'Meta';\r\nconst UserDataCount = 'UserDataCount';\r\nconst TotalUserDataSize = 'TotalUserDataSize';\r\nconst UserData = 'UserData';\r\nconst Target = 'Target';\r\nconst Id = 'Id';\r\nconst Value = 'Value';\r\n\r\nexport class CubismModelUserDataJson {\r\n  /**\r\n   * コンストラクタ\r\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\r\n   * @param size      バッファのサイズ\r\n   */\r\n  public constructor(buffer: ArrayBuffer, size: number) {\r\n    this._json = CubismJson.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    CubismJson.delete(this._json);\r\n  }\r\n\r\n  /**\r\n   * ユーザーデータ個数の取得\r\n   * @return ユーザーデータの個数\r\n   */\r\n  public getUserDataCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(UserDataCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * ユーザーデータ総文字列数の取得\r\n   *\r\n   * @return ユーザーデータ総文字列数\r\n   */\r\n  public getTotalUserDataSize(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(TotalUserDataSize)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * ユーザーデータのタイプの取得\r\n   *\r\n   * @return ユーザーデータのタイプ\r\n   */\r\n  public getUserDataTargetType(i: number): string {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(UserData)\r\n      .getValueByIndex(i)\r\n      .getValueByString(Target)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * ユーザーデータのターゲットIDの取得\r\n   *\r\n   * @param i インデックス\r\n   * @return ユーザーデータターゲットID\r\n   */\r\n  public getUserDataId(i: number): CubismIdHandle {\r\n    return CubismFramework.getIdManager().getId(\r\n      this._json\r\n        .getRoot()\r\n        .getValueByString(UserData)\r\n        .getValueByIndex(i)\r\n        .getValueByString(Id)\r\n        .getRawString()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * ユーザーデータの文字列の取得\r\n   *\r\n   * @param i インデックス\r\n   * @return ユーザーデータ\r\n   */\r\n  public getUserDataValue(i: number): string {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(UserData)\r\n      .getValueByIndex(i)\r\n      .getValueByString(Value)\r\n      .getRawString();\r\n  }\r\n\r\n  private _json: CubismJson;\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmodeluserdatajson';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismModelUserDataJson = $.CubismModelUserDataJson;\r\n  export type CubismModelUserDataJson = $.CubismModelUserDataJson;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { csmString } from '../type/csmstring';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CubismModelUserDataJson } from './cubismmodeluserdatajson';\r\n\r\nconst ArtMesh = 'ArtMesh';\r\n\r\n/**\r\n * ユーザーデータインターフェース\r\n *\r\n * Jsonから読み込んだユーザーデータを記録しておくための構造体\r\n */\r\nexport class CubismModelUserDataNode {\r\n  targetType: CubismIdHandle; // ユーザーデータターゲットタイプ\r\n  targetId: CubismIdHandle; // ユーザーデータターゲットのID\r\n  value: csmString; // ユーザーデータ\r\n}\r\n\r\n/**\r\n * ユーザデータの管理クラス\r\n *\r\n * ユーザデータをロード、管理、検索インターフェイス、解放までを行う。\r\n */\r\nexport class CubismModelUserData {\r\n  /**\r\n   * インスタンスの作成\r\n   *\r\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\r\n   * @param size      バッファのサイズ\r\n   * @return 作成されたインスタンス\r\n   */\r\n  public static create(buffer: ArrayBuffer, size: number): CubismModelUserData {\r\n    const ret: CubismModelUserData = new CubismModelUserData();\r\n\r\n    ret.parseUserData(buffer, size);\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * インスタンスを破棄する\r\n   *\r\n   * @param modelUserData 破棄するインスタンス\r\n   */\r\n  public static delete(modelUserData: CubismModelUserData): void {\r\n    if (modelUserData != null) {\r\n      modelUserData.release();\r\n      modelUserData = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ArtMeshのユーザーデータのリストの取得\r\n   *\r\n   * @return ユーザーデータリスト\r\n   */\r\n  public getArtMeshUserDatas(): csmVector<CubismModelUserDataNode> {\r\n    return this._artMeshUserDataNode;\r\n  }\r\n\r\n  /**\r\n   * userdata3.jsonのパース\r\n   *\r\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\r\n   * @param size      バッファのサイズ\r\n   */\r\n  public parseUserData(buffer: ArrayBuffer, size: number): void {\r\n    let json: CubismModelUserDataJson = new CubismModelUserDataJson(\r\n      buffer,\r\n      size\r\n    );\r\n    if (!json) {\r\n      json.release();\r\n      json = void 0;\r\n      return;\r\n    }\r\n\r\n    const typeOfArtMesh = CubismFramework.getIdManager().getId(ArtMesh);\r\n    const nodeCount: number = json.getUserDataCount();\r\n\r\n    for (let i = 0; i < nodeCount; i++) {\r\n      const addNode: CubismModelUserDataNode = new CubismModelUserDataNode();\r\n\r\n      addNode.targetId = json.getUserDataId(i);\r\n      addNode.targetType = CubismFramework.getIdManager().getId(\r\n        json.getUserDataTargetType(i)\r\n      );\r\n      addNode.value = new csmString(json.getUserDataValue(i));\r\n      this._userDataNodes.pushBack(addNode);\r\n\r\n      if (addNode.targetType == typeOfArtMesh) {\r\n        this._artMeshUserDataNode.pushBack(addNode);\r\n      }\r\n    }\r\n\r\n    json.release();\r\n    json = void 0;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._userDataNodes = new csmVector<CubismModelUserDataNode>();\r\n    this._artMeshUserDataNode = new csmVector<CubismModelUserDataNode>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   *\r\n   * ユーザーデータ構造体配列を解放する\r\n   */\r\n  public release(): void {\r\n    for (let i = 0; i < this._userDataNodes.getSize(); ++i) {\r\n      this._userDataNodes.set(i, null);\r\n    }\r\n\r\n    this._userDataNodes = null;\r\n  }\r\n\r\n  private _userDataNodes: csmVector<CubismModelUserDataNode>; // ユーザーデータ構造体配列\r\n  private _artMeshUserDataNode: csmVector<CubismModelUserDataNode>; // 閲覧リストの保持\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmodeluserdata';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismModelUserData = $.CubismModelUserData;\r\n  export type CubismModelUserData = $.CubismModelUserData;\r\n  export const CubismModelUserDataNode = $.CubismModelUserDataNode;\r\n  export type CubismModelUserDataNode = $.CubismModelUserDataNode;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismBreath } from '../effect/cubismbreath';\r\nimport { CubismEyeBlink } from '../effect/cubismeyeblink';\r\nimport { CubismPose } from '../effect/cubismpose';\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { Constant } from '../live2dcubismframework';\r\nimport { CubismModelMatrix } from '../math/cubismmodelmatrix';\r\nimport { CubismTargetPoint } from '../math/cubismtargetpoint';\r\nimport { ACubismMotion, FinishedMotionCallback } from '../motion/acubismmotion';\r\nimport { CubismExpressionMotion } from '../motion/cubismexpressionmotion';\r\nimport { CubismExpressionMotionManager } from '../motion/cubismexpressionmotionmanager';\r\nimport { CubismMotion } from '../motion/cubismmotion';\r\nimport { CubismMotionManager } from '../motion/cubismmotionmanager';\r\nimport { CubismMotionQueueManager } from '../motion/cubismmotionqueuemanager';\r\nimport { CubismPhysics } from '../physics/cubismphysics';\r\nimport { CubismRenderer_WebGL } from '../rendering/cubismrenderer_webgl';\r\nimport { csmString } from '../type/csmstring';\r\nimport { CubismLogError, CubismLogInfo } from '../utils/cubismdebug';\r\nimport { CubismMoc } from './cubismmoc';\r\nimport { CubismModel } from './cubismmodel';\r\nimport { CubismModelUserData } from './cubismmodeluserdata';\r\n\r\n/**\r\n * 실제로 사용자가 사용하는 모델\r\n *\r\n * 실제로 사용자가 사용하는 모델의 기본 클래스.이것을 상속하고 구현하십시오.\r\n */\r\nexport class CubismUserModel {\r\n  /**\r\n   * 초기화 상태 획득\r\n   *\r\n   * 초기화 되었습니까?\r\n   *\r\n   * @return true     초기화\r\n   * @return false    초기화되지 않았습니다\r\n   */\r\n  public isInitialized(): boolean {\r\n    return this._initialized;\r\n  }\r\n\r\n  /**\r\n   * 초기화 상태 설정\r\n   *\r\n   * 초기화 상태를 설정하십시오.\r\n   *\r\n   * @param v 초기화 상태\r\n   */\r\n  public setInitialized(v: boolean): void {\r\n    this._initialized = v;\r\n  }\r\n\r\n  /**\r\n   * 업데이트 된 상태 획득\r\n   *\r\n   * 업데이트 되었습니까?\r\n   *\r\n   * @return true     업데이트\r\n   * @return false    업데이트되지 않았습니다\r\n   */\r\n  public isUpdating(): boolean {\r\n    return this._updating;\r\n  }\r\n\r\n  /**\r\n   * 업데이트 된 상태 설정\r\n   *\r\n   * 업데이트 상태를 설정하십시오\r\n   *\r\n   * @param v 갱신 상태\r\n   */\r\n  public setUpdating(v: boolean): void {\r\n    this._updating = v;\r\n  }\r\n\r\n  /**\r\n   * 마우스 정보 설정을 드래그합니다\r\n   * @param x- 드래그하는 커서의 위치\r\n   * @param y 커서 드래그의 위치\r\n   */\r\n  public setDragging(x: number, y: number): void {\r\n    this._dragManager.set(x, y);\r\n  }\r\n\r\n  /**\r\n   * 가속 정보를 설정합니다\r\n   * @param x x- 축 가속도\r\n   * @param y y 축 방향 가속도\r\n   * @param z z 축 방향 가속도\r\n   */\r\n  public setAcceleration(x: number, y: number, z: number): void {\r\n    this._accelerationX = x;\r\n    this._accelerationY = y;\r\n    this._accelerationZ = z;\r\n  }\r\n\r\n  /**\r\n   * 모델 매트릭스를 얻으십시오\r\n   * @return 모델 매트릭스\r\n   */\r\n  public getModelMatrix(): CubismModelMatrix {\r\n    return this._modelMatrix;\r\n  }\r\n\r\n  /**\r\n   * 투명도 설정\r\n   * @param a 불투명체\r\n   */\r\n  public setOpacity(a: number): void {\r\n    this._opacity = a;\r\n  }\r\n\r\n  /**\r\n   * 불투명 정도의 획득\r\n   * @return 불투명체\r\n   */\r\n  public getOpacity(): number {\r\n    return this._opacity;\r\n  }\r\n\r\n  /**\r\n   * 모델 데이터를 읽으십시오\r\n   *\r\n   * @param buffer    MoC3 파일이 버퍼에 로드됨.\r\n   */\r\n  public loadModel(buffer: ArrayBuffer, shouldCheckMocConsistency = false) {\r\n    this._moc = CubismMoc.create(buffer, shouldCheckMocConsistency);\r\n\r\n    if (this._moc == null) {\r\n      CubismLogError('Failed to CubismMoc.create().');\r\n      return;\r\n    }\r\n\r\n    this._model = this._moc.createModel();\r\n\r\n    if (this._model == null) {\r\n      CubismLogError('Failed to CreateModel().');\r\n      return;\r\n    }\r\n\r\n    this._model.saveParameters();\r\n    this._modelMatrix = new CubismModelMatrix(\r\n      this._model.getCanvasWidth(),\r\n      this._model.getCanvasHeight()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 모션 데이터를 읽으십시오\r\n   * @param buffer motion3.JSON 파일이 버퍼에 로드됨.\r\n   * @param size 버퍼 사이즈\r\n   * @param name 모션 이름\r\n   * @param onFinishedMotionHandler 모션 재생 끝에서 호출 된 콜백 함수\r\n   * @return 모션 클래스\r\n   */\r\n  public loadMotion(\r\n    buffer: ArrayBuffer,\r\n    size: number,\r\n    name: string,\r\n    onFinishedMotionHandler?: FinishedMotionCallback\r\n  ): CubismMotion {\r\n    if (buffer == null || size == 0) {\r\n      CubismLogError('Failed to loadMotion().');\r\n      return null;\r\n    }\r\n    return CubismMotion.create(buffer, size, onFinishedMotionHandler);\r\n  }\r\n\r\n  /**\r\n   * 표현 데이터 읽기\r\n   * @param buffer exp파일이 버퍼에 로드됨.\r\n   * @param size 버파 크기\r\n   * @param name 表情の名前\r\n   */\r\n  public loadExpression(\r\n    buffer: ArrayBuffer,\r\n    size: number,\r\n    name: string\r\n  ): ACubismMotion {\r\n    if (buffer == null || size == 0) {\r\n      CubismLogError('Failed to loadExpression().');\r\n      return null;\r\n    }\r\n    return CubismExpressionMotion.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * 포즈 데이터를 읽으십시오\r\n   * @param buffer pose3.jsonが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   */\r\n  public loadPose(buffer: ArrayBuffer, size: number): void {\r\n    if (buffer == null || size == 0) {\r\n      CubismLogError('Failed to loadPose().');\r\n      return;\r\n    }\r\n    this._pose = CubismPose.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * 모델에 첨부 된 사용자 데이터를 읽으십시오\r\n   * @param buffer userdata3.jsonが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   */\r\n  public loadUserData(buffer: ArrayBuffer, size: number): void {\r\n    if (buffer == null || size == 0) {\r\n      CubismLogError('Failed to loadUserData().');\r\n      return;\r\n    }\r\n    this._modelUserData = CubismModelUserData.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * 物理演算データの読み込み\r\n   * @param buffer  physics3.jsonが読み込まれているバッファ\r\n   * @param size    バッファのサイズ\r\n   */\r\n  public loadPhysics(buffer: ArrayBuffer, size: number): void {\r\n    if (buffer == null || size == 0) {\r\n      CubismLogError('Failed to loadPhysics().');\r\n      return;\r\n    }\r\n    this._physics = CubismPhysics.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * 当たり判定の取得\r\n   * @param drawableId 検証したいDrawableのID\r\n   * @param pointX X位置\r\n   * @param pointY Y位置\r\n   * @return true ヒットしている\r\n   * @return false ヒットしていない\r\n   */\r\n  public isHit(\r\n    drawableId: CubismIdHandle,\r\n    pointX: number,\r\n    pointY: number\r\n  ): boolean {\r\n    const drawIndex: number = this._model.getDrawableIndex(drawableId);\r\n\r\n    if (drawIndex < 0) {\r\n      return false; // 存在しない場合はfalse\r\n    }\r\n\r\n    const count: number = this._model.getDrawableVertexCount(drawIndex);\r\n    const vertices: Float32Array = this._model.getDrawableVertices(drawIndex);\r\n\r\n    let left: number = vertices[0];\r\n    let right: number = vertices[0];\r\n    let top: number = vertices[1];\r\n    let bottom: number = vertices[1];\r\n\r\n    for (let j = 1; j < count; ++j) {\r\n      const x = vertices[Constant.vertexOffset + j * Constant.vertexStep];\r\n      const y = vertices[Constant.vertexOffset + j * Constant.vertexStep + 1];\r\n\r\n      if (x < left) {\r\n        left = x; // Min x\r\n      }\r\n\r\n      if (x > right) {\r\n        right = x; // Max x\r\n      }\r\n\r\n      if (y < top) {\r\n        top = y; // Min y\r\n      }\r\n\r\n      if (y > bottom) {\r\n        bottom = y; // Max y\r\n      }\r\n    }\r\n\r\n    const tx: number = this._modelMatrix.invertTransformX(pointX);\r\n    const ty: number = this._modelMatrix.invertTransformY(pointY);\r\n\r\n    return left <= tx && tx <= right && top <= ty && ty <= bottom;\r\n  }\r\n\r\n  /**\r\n   * 모델 획득\r\n   * @return 모델\r\n   */\r\n  public getModel(): CubismModel {\r\n    return this._model;\r\n  }\r\n\r\n  /**\r\n   * レンダラの取得\r\n   * @return 표현\r\n   */\r\n  public getRenderer(): CubismRenderer_WebGL {\r\n    return this._renderer;\r\n  }\r\n\r\n  /**\r\n   * 렌더링을 작성하고 초기화를 실행하십시오\r\n   * @param maskBufferCount 생성 된 버퍼 수\r\n   */\r\n  public createRenderer(maskBufferCount = 1): void {\r\n    if (this._renderer) {\r\n      this.deleteRenderer();\r\n    }\r\n\r\n    this._renderer = new CubismRenderer_WebGL();\r\n    this._renderer.initialize(this._model, maskBufferCount);\r\n  }\r\n\r\n  /**\r\n   * 렌다 라 릴리스\r\n   */\r\n  public deleteRenderer(): void {\r\n    if (this._renderer != null) {\r\n      this._renderer.release();\r\n      this._renderer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 이벤트 화재 당시 표준 처리\r\n   *\r\n   * 이벤트가 재생 시점에있을 때 프로세스.\r\n   * 상속에 의해 덮어 쓰는 것으로 가정합니다.\r\n   * 덮어 쓰지 않으면 로그 출력이 있습니다.\r\n   *\r\n   * @param eventValue 점화 된 이벤트의 문자 문자열 데이터\r\n   */\r\n  public motionEventFired(eventValue: csmString): void {\r\n    CubismLogInfo('{0}', eventValue.s);\r\n  }\r\n\r\n  /**\r\n   * 이벤트를위한 콜백\r\n   *\r\n   * 이벤트 이벤트 등록을위한 콜백.\r\n   * Cubismusermodel의 상속 인 EventFired를 호출하십시오.\r\n   *\r\n   * @param caller 점화 된 이벤트를 관리 한 모션 매니저, 비교\r\n   * @param eventValue 점화 된 이벤트의 문자 문자열 데이터\r\n   * @param customData Cubismusermodel을 상속 한 인스턴스를 가정합니다\r\n   */\r\n  public static cubismDefaultMotionEventCallback(\r\n    caller: CubismMotionQueueManager,\r\n    eventValue: csmString,\r\n    customData: CubismUserModel\r\n  ): void {\r\n    const model: CubismUserModel = customData;\r\n\r\n    if (model != null) {\r\n      model.motionEventFired(eventValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 건설자\r\n   */\r\n  public constructor() {\r\n    // 각 변수 초기화\r\n    this._moc = null;\r\n    this._model = null;\r\n    this._motionManager = null;\r\n    this._expressionManager = null;\r\n    this._eyeBlink = null;\r\n    this._breath = null;\r\n    this._modelMatrix = null;\r\n    this._pose = null;\r\n    this._dragManager = null;\r\n    this._physics = null;\r\n    this._modelUserData = null;\r\n    this._initialized = false;\r\n    this._updating = false;\r\n    this._opacity = 1.0;\r\n    this._lipsync = true;\r\n    this._lastLipSyncValue = 0.0;\r\n    this._dragX = 0.0;\r\n    this._dragY = 0.0;\r\n    this._accelerationX = 0.0;\r\n    this._accelerationY = 0.0;\r\n    this._accelerationZ = 0.0;\r\n    this._mocConsistency = false;\r\n    this._debugMode = false;\r\n    this._renderer = null;\r\n\r\n    // 모션 관리자를 만듭니다\r\n    this._motionManager = new CubismMotionManager();\r\n    this._motionManager.setEventCallback(\r\n      CubismUserModel.cubismDefaultMotionEventCallback,\r\n      this\r\n    );\r\n\r\n    // 얼굴 관리자를 만듭니다\r\n    this._expressionManager = new CubismExpressionMotionManager();\r\n\r\n    // 드래그 애니메이션\r\n    this._dragManager = new CubismTargetPoint();\r\n  }\r\n\r\n  /**\r\n   * 소멸자와 동등한 프로세스\r\n   */\r\n  public release() {\r\n    if (this._motionManager != null) {\r\n      this._motionManager.release();\r\n      this._motionManager = null;\r\n    }\r\n\r\n    if (this._expressionManager != null) {\r\n      this._expressionManager.release();\r\n      this._expressionManager = null;\r\n    }\r\n\r\n    if (this._moc != null) {\r\n      this._moc.deleteModel(this._model);\r\n      this._moc.release();\r\n      this._moc = null;\r\n    }\r\n\r\n    this._modelMatrix = null;\r\n\r\n    CubismPose.delete(this._pose);\r\n    CubismEyeBlink.delete(this._eyeBlink);\r\n    CubismBreath.delete(this._breath);\r\n\r\n    this._dragManager = null;\r\n\r\n    CubismPhysics.delete(this._physics);\r\n    CubismModelUserData.delete(this._modelUserData);\r\n\r\n    this.deleteRenderer();\r\n  }\r\n\r\n  protected _moc: CubismMoc; // Mocデータ\r\n  protected _model: CubismModel; // Modelインスタンス\r\n\r\n  protected _motionManager: CubismMotionManager; // 모션 관리\r\n  protected _expressionManager: CubismExpressionMotionManager; // 표현 관리\r\n  protected _eyeBlink: CubismEyeBlink; // 자동 깜박임\r\n  protected _breath: CubismBreath; // 숨 쉬다\r\n  protected _modelMatrix: CubismModelMatrix; // 모델 매트릭스\r\n  protected _pose: CubismPose; // 포즈 관리\r\n  protected _dragManager: CubismTargetPoint; // 마우스 드래그\r\n  protected _physics: CubismPhysics; // 물리학\r\n  protected _modelUserData: CubismModelUserData; // 사용자 데이터\r\n\r\n  protected _initialized: boolean; // 초기화되었는지 여부\r\n  protected _updating: boolean; // 업데이트되었는지 여부\r\n  protected _opacity: number; // 불투명체\r\n  protected _lipsync: boolean; // 립싱크 여부\r\n  protected _lastLipSyncValue: number; // 마지막 립 싱크 싱크 제어 영역\r\n  protected _dragX: number; // x- 마우스 드래그의 위치\r\n  protected _dragY: number; // 마우스 드래그의 Y 위치\r\n  protected _accelerationX: number; // x- 축 가속도\r\n  protected _accelerationY: number; // y 축 방향 가속도\r\n  protected _accelerationZ: number; // z 축 방향 가속도\r\n  protected _mocConsistency: boolean; // MOC3 일관성을 확인할지 여부\r\n  protected _debugMode: boolean; // 디버그 모드입니까?\r\n\r\n  private _renderer: CubismRenderer_WebGL; // レンダラ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismusermodel';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismUserModel = $.CubismUserModel;\r\n  export type CubismUserModel = $.CubismUserModel;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * 플랫폼 의존성 기능을 추상화하십시오 Cubism Platform Abstraction Layer.\r\n *\r\n * 파일 읽기 및 시간 획득과 같은 플랫폼에 의존하는 기능을 요약하십시오.\r\n */\r\nexport class LAppPal {\r\n  /**\r\n   * ファイルをバイトデータとして読みこむ\r\n   *\r\n   * @param filePath 読み込み対象ファイルのパス\r\n   * @return\r\n   * {\r\n   *      buffer,   読み込んだバイトデータ\r\n   *      size        ファイルサイズ\r\n   * }\r\n   */\r\n  public static loadFileAsBytes(\r\n    filePath: string,\r\n    callback: (arrayBuffer: ArrayBuffer, size: number) => void\r\n  ): void {\r\n    fetch(filePath)\r\n      .then(response => response.arrayBuffer())\r\n      .then(arrayBuffer => callback(arrayBuffer, arrayBuffer.byteLength));\r\n  }\r\n\r\n  /**\r\n   * 델타 시간 얻기 (이전 프레임과의 차이)\r\n   * @return デルタ時間[ms]\r\n   */\r\n  public static getDeltaTime(): number {\r\n    return this.s_deltaTime;\r\n  }\r\n\r\n  public static updateTime(): void {\r\n    this.s_currentFrame = Date.now();\r\n    this.s_deltaTime = (this.s_currentFrame - this.s_lastFrame) / 1000;\r\n    this.s_lastFrame = this.s_currentFrame;\r\n  }\r\n\r\n  /**\r\n   * 메시지를 출력하십시오\r\n   * @param message 끈\r\n   */\r\n  public static printMessage(message: string): void {\r\n    console.log(message);\r\n  }\r\n\r\n  static lastUpdate = Date.now();\r\n\r\n  static s_currentFrame = 0.0;\r\n  static s_lastFrame = 0.0;\r\n  static s_deltaTime = 0.0;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/** @deprecated この変数は getInstance() が非推奨になったことに伴い、非推奨となりました。 */\r\nexport let s_instance: LAppWavFileHandler = null;\r\n\r\nexport class LAppWavFileHandler {\r\n  /**\r\n   * 클래스 인스턴스 (싱글 톤)를 반환합니다.\r\n   * 인스턴스가 생성되지 않으면 인스턴스가 내부에 생성됩니다.\r\n   *\r\n   * @return 클래스 인스턴스\r\n   * @deprecated 이 클래스에서 단일 -트론 패턴의 사용은 권장되지 않았습니다.대신 새 LappwavfileHandler ()를 사용하십시오.\r\n   */\r\n  public static getInstance(): LAppWavFileHandler {\r\n    if (s_instance == null) {\r\n      s_instance = new LAppWavFileHandler();\r\n    }\r\n\r\n    return s_instance;\r\n  }\r\n\r\n  /**\r\n   * クラスのインスタンス（シングルトン）を解放する。\r\n   *\r\n   * @deprecated この関数は getInstance() が非推奨になったことに伴い、非推奨となりました。\r\n   */\r\n  public static releaseInstance(): void {\r\n    if (s_instance != null) {\r\n      s_instance = void 0;\r\n    }\r\n\r\n    s_instance = null;\r\n  }\r\n\r\n  public update(deltaTimeSeconds: number) {\r\n    let goalOffset: number;\r\n    let rms: number;\r\n\r\n    // データロード前/ファイル末尾に達した場合は更新しない\r\n    if (\r\n      this._pcmData == null ||\r\n      this._sampleOffset >= this._wavFileInfo._samplesPerChannel\r\n    ) {\r\n      this._lastRms = 0.0;\r\n      return false;\r\n    }\r\n\r\n    // 経過時間後の状態を保持\r\n    this._userTimeSeconds += deltaTimeSeconds;\r\n    goalOffset = Math.floor(\r\n      this._userTimeSeconds * this._wavFileInfo._samplingRate\r\n    );\r\n    if (goalOffset > this._wavFileInfo._samplesPerChannel) {\r\n      goalOffset = this._wavFileInfo._samplesPerChannel;\r\n    }\r\n\r\n    // RMS計測\r\n    rms = 0.0;\r\n    for (\r\n      let channelCount = 0;\r\n      channelCount < this._wavFileInfo._numberOfChannels;\r\n      channelCount++\r\n    ) {\r\n      for (\r\n        let sampleCount = this._sampleOffset;\r\n        sampleCount < goalOffset;\r\n        sampleCount++\r\n      ) {\r\n        const pcm = this._pcmData[channelCount][sampleCount];\r\n        rms += pcm * pcm;\r\n      }\r\n    }\r\n    rms = Math.sqrt(\r\n      rms /\r\n        (this._wavFileInfo._numberOfChannels *\r\n          (goalOffset - this._sampleOffset))\r\n    );\r\n\r\n    this._lastRms = rms;\r\n    this._sampleOffset = goalOffset;\r\n    return true;\r\n  }\r\n\r\n  public start(filePath: string): void {\r\n    // サンプル位参照位置を初期化\r\n    this._sampleOffset = 0;\r\n    this._userTimeSeconds = 0.0;\r\n\r\n    // RMS値をリセット\r\n    this._lastRms = 0.0;\r\n\r\n    this.loadWavFile(filePath);\r\n  }\r\n\r\n  public getRms(): number {\r\n    return this._lastRms;\r\n  }\r\n\r\n  public loadWavFile(filePath: string): Promise<boolean> {\r\n    return new Promise(resolveValue => {\r\n      let ret = false;\r\n\r\n      if (this._pcmData != null) {\r\n        this.releasePcmData();\r\n      }\r\n\r\n      // ファイルロード\r\n      const asyncFileLoad = async () => {\r\n        return fetch(filePath).then(responce => {\r\n          return responce.arrayBuffer();\r\n        });\r\n      };\r\n\r\n      const asyncWavFileManager = (async () => {\r\n        this._byteReader._fileByte = await asyncFileLoad();\r\n        this._byteReader._fileDataView = new DataView(\r\n          this._byteReader._fileByte\r\n        );\r\n        this._byteReader._fileSize = this._byteReader._fileByte.byteLength;\r\n        this._byteReader._readOffset = 0;\r\n\r\n        // ファイルロードに失敗しているか、先頭のシグネチャ\"RIFF\"を入れるサイズもない場合は失敗\r\n        if (\r\n          this._byteReader._fileByte == null ||\r\n          this._byteReader._fileSize < 4\r\n        ) {\r\n          resolveValue(false);\r\n          return;\r\n        }\r\n\r\n        // ファイル名\r\n        this._wavFileInfo._fileName = filePath;\r\n\r\n        try {\r\n          // シグネチャ \"RIFF\"\r\n          if (!this._byteReader.getCheckSignature('RIFF')) {\r\n            ret = false;\r\n            throw new Error('Cannot find Signeture \"RIFF\".');\r\n          }\r\n          // ファイルサイズ-8（読み飛ばし）\r\n          this._byteReader.get32LittleEndian();\r\n          // シグネチャ \"WAVE\"\r\n          if (!this._byteReader.getCheckSignature('WAVE')) {\r\n            ret = false;\r\n            throw new Error('Cannot find Signeture \"WAVE\".');\r\n          }\r\n          // シグネチャ \"fmt \"\r\n          if (!this._byteReader.getCheckSignature('fmt ')) {\r\n            ret = false;\r\n            throw new Error('Cannot find Signeture \"fmt\".');\r\n          }\r\n          // fmtチャンクサイズ\r\n          const fmtChunkSize = this._byteReader.get32LittleEndian();\r\n          // フォーマットIDは1（リニアPCM）以外受け付けない\r\n          if (this._byteReader.get16LittleEndian() != 1) {\r\n            ret = false;\r\n            throw new Error('File is not linear PCM.');\r\n          }\r\n          // チャンネル数\r\n          this._wavFileInfo._numberOfChannels =\r\n            this._byteReader.get16LittleEndian();\r\n          // サンプリングレート\r\n          this._wavFileInfo._samplingRate =\r\n            this._byteReader.get32LittleEndian();\r\n          // データ速度[byte/sec]（読み飛ばし）\r\n          this._byteReader.get32LittleEndian();\r\n          // ブロックサイズ（読み飛ばし）\r\n          this._byteReader.get16LittleEndian();\r\n          // 量子化ビット数\r\n          this._wavFileInfo._bitsPerSample =\r\n            this._byteReader.get16LittleEndian();\r\n          // fmtチャンクの拡張部分の読み飛ばし\r\n          if (fmtChunkSize > 16) {\r\n            this._byteReader._readOffset += fmtChunkSize - 16;\r\n          }\r\n          // \"data\"チャンクが出現するまで読み飛ばし\r\n          while (\r\n            !this._byteReader.getCheckSignature('data') &&\r\n            this._byteReader._readOffset < this._byteReader._fileSize\r\n          ) {\r\n            this._byteReader._readOffset +=\r\n              this._byteReader.get32LittleEndian() + 4;\r\n          }\r\n          // ファイル内に\"data\"チャンクが出現しなかった\r\n          if (this._byteReader._readOffset >= this._byteReader._fileSize) {\r\n            ret = false;\r\n            throw new Error('Cannot find \"data\" Chunk.');\r\n          }\r\n          // サンプル数\r\n          {\r\n            const dataChunkSize = this._byteReader.get32LittleEndian();\r\n            this._wavFileInfo._samplesPerChannel =\r\n              (dataChunkSize * 8) /\r\n              (this._wavFileInfo._bitsPerSample *\r\n                this._wavFileInfo._numberOfChannels);\r\n          }\r\n          // 領域確保\r\n          this._pcmData = new Array(this._wavFileInfo._numberOfChannels);\r\n          for (\r\n            let channelCount = 0;\r\n            channelCount < this._wavFileInfo._numberOfChannels;\r\n            channelCount++\r\n          ) {\r\n            this._pcmData[channelCount] = new Float32Array(\r\n              this._wavFileInfo._samplesPerChannel\r\n            );\r\n          }\r\n          // 波形データ取得\r\n          for (\r\n            let sampleCount = 0;\r\n            sampleCount < this._wavFileInfo._samplesPerChannel;\r\n            sampleCount++\r\n          ) {\r\n            for (\r\n              let channelCount = 0;\r\n              channelCount < this._wavFileInfo._numberOfChannels;\r\n              channelCount++\r\n            ) {\r\n              this._pcmData[channelCount][sampleCount] = this.getPcmSample();\r\n            }\r\n          }\r\n\r\n          ret = true;\r\n\r\n          resolveValue(ret);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      })().then(() => {\r\n        resolveValue(ret);\r\n      });\r\n    });\r\n  }\r\n\r\n  public getPcmSample(): number {\r\n    let pcm32;\r\n\r\n    // 32ビット幅に拡張してから-1～1の範囲に丸める\r\n    switch (this._wavFileInfo._bitsPerSample) {\r\n      case 8:\r\n        pcm32 = this._byteReader.get8() - 128;\r\n        pcm32 <<= 24;\r\n        break;\r\n      case 16:\r\n        pcm32 = this._byteReader.get16LittleEndian() << 16;\r\n        break;\r\n      case 24:\r\n        pcm32 = this._byteReader.get24LittleEndian() << 8;\r\n        break;\r\n      default:\r\n        // 対応していないビット幅\r\n        pcm32 = 0;\r\n        break;\r\n    }\r\n\r\n    return pcm32 / 2147483647; //Number.MAX_VALUE;\r\n  }\r\n\r\n  /**\r\n   * 指定したチャンネルから音声サンプルの配列を取得する\r\n   *\r\n   * @param usechannel 利用するチャンネル\r\n   * @returns 指定したチャンネルの音声サンプルの配列\r\n   */\r\n  public getPcmDataChannel(usechannel: number): Float32Array {\r\n    // 指定したチャンネル数がデータ用配列の長さより多いならnullを返す。\r\n    if (!this._pcmData || !(usechannel < this._pcmData.length)) {\r\n      return null;\r\n    }\r\n\r\n    // _pcmDataから新規に指定したチャンネルのFloat32Arrayを作成する。\r\n    return Float32Array.from(this._pcmData[usechannel]);\r\n  }\r\n\r\n  /**\r\n   * 音声のサンプリング周波数を取得する。\r\n   *\r\n   * @returns 音声のサンプリング周波数\r\n   */\r\n  public getWavSamplingRate(): number {\r\n    if (!this._wavFileInfo || this._wavFileInfo._samplingRate < 1) {\r\n      return null;\r\n    }\r\n\r\n    return this._wavFileInfo._samplingRate;\r\n  }\r\n\r\n  public releasePcmData(): void {\r\n    for (\r\n      let channelCount = 0;\r\n      channelCount < this._wavFileInfo._numberOfChannels;\r\n      channelCount++\r\n    ) {\r\n      delete this._pcmData[channelCount];\r\n    }\r\n    delete this._pcmData;\r\n    this._pcmData = null;\r\n  }\r\n\r\n  constructor() {\r\n    this._pcmData = null;\r\n    this._userTimeSeconds = 0.0;\r\n    this._lastRms = 0.0;\r\n    this._sampleOffset = 0.0;\r\n    this._wavFileInfo = new WavFileInfo();\r\n    this._byteReader = new ByteReader();\r\n  }\r\n\r\n  _pcmData: Array<Float32Array>;\r\n  _userTimeSeconds: number;\r\n  _lastRms: number;\r\n  _sampleOffset: number;\r\n  _wavFileInfo: WavFileInfo;\r\n  _byteReader: ByteReader;\r\n  _loadFiletoBytes = (arrayBuffer: ArrayBuffer, length: number): void => {\r\n    this._byteReader._fileByte = arrayBuffer;\r\n    this._byteReader._fileDataView = new DataView(this._byteReader._fileByte);\r\n    this._byteReader._fileSize = length;\r\n  };\r\n}\r\n\r\nexport class WavFileInfo {\r\n  constructor() {\r\n    this._fileName = '';\r\n    this._numberOfChannels = 0;\r\n    this._bitsPerSample = 0;\r\n    this._samplingRate = 0;\r\n    this._samplesPerChannel = 0;\r\n  }\r\n\r\n  _fileName: string; ///< ファイル名\r\n  _numberOfChannels: number; ///< チャンネル数\r\n  _bitsPerSample: number; ///< サンプルあたりビット数\r\n  _samplingRate: number; ///< サンプリングレート\r\n  _samplesPerChannel: number; ///< 1チャンネルあたり総サンプル数\r\n}\r\n\r\nexport class ByteReader {\r\n  constructor() {\r\n    this._fileByte = null;\r\n    this._fileDataView = null;\r\n    this._fileSize = 0;\r\n    this._readOffset = 0;\r\n  }\r\n\r\n  /**\r\n   * @brief 8ビット読み込み\r\n   * @return Csm::csmUint8 読み取った8ビット値\r\n   */\r\n  public get8(): number {\r\n    const ret = this._fileDataView.getUint8(this._readOffset);\r\n    this._readOffset++;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * @brief 16ビット読み込み（リトルエンディアン）\r\n   * @return Csm::csmUint16 読み取った16ビット値\r\n   */\r\n  public get16LittleEndian(): number {\r\n    const ret =\r\n      (this._fileDataView.getUint8(this._readOffset + 1) << 8) |\r\n      this._fileDataView.getUint8(this._readOffset);\r\n    this._readOffset += 2;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * @brief 24ビット読み込み（リトルエンディアン）\r\n   * @return Csm::csmUint32 読み取った24ビット値（下位24ビットに設定）\r\n   */\r\n  public get24LittleEndian(): number {\r\n    const ret =\r\n      (this._fileDataView.getUint8(this._readOffset + 2) << 16) |\r\n      (this._fileDataView.getUint8(this._readOffset + 1) << 8) |\r\n      this._fileDataView.getUint8(this._readOffset);\r\n    this._readOffset += 3;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * @brief 32ビット読み込み（リトルエンディアン）\r\n   * @return Csm::csmUint32 読み取った32ビット値\r\n   */\r\n  public get32LittleEndian(): number {\r\n    const ret =\r\n      (this._fileDataView.getUint8(this._readOffset + 3) << 24) |\r\n      (this._fileDataView.getUint8(this._readOffset + 2) << 16) |\r\n      (this._fileDataView.getUint8(this._readOffset + 1) << 8) |\r\n      this._fileDataView.getUint8(this._readOffset);\r\n    this._readOffset += 4;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * @brief シグネチャの取得と参照文字列との一致チェック\r\n   * @param[in] reference 検査対象のシグネチャ文字列\r\n   * @retval  true    一致している\r\n   * @retval  false   一致していない\r\n   */\r\n  public getCheckSignature(reference: string): boolean {\r\n    const getSignature: Uint8Array = new Uint8Array(4);\r\n    const referenceString: Uint8Array = new TextEncoder().encode(reference);\r\n    if (reference.length != 4) {\r\n      return false;\r\n    }\r\n    for (let signatureOffset = 0; signatureOffset < 4; signatureOffset++) {\r\n      getSignature[signatureOffset] = this.get8();\r\n    }\r\n    return (\r\n      getSignature[0] == referenceString[0] &&\r\n      getSignature[1] == referenceString[1] &&\r\n      getSignature[2] == referenceString[2] &&\r\n      getSignature[3] == referenceString[3]\r\n    );\r\n  }\r\n\r\n  _fileByte: ArrayBuffer; ///< ロードしたファイルのバイト列\r\n  _fileDataView: DataView;\r\n  _fileSize: number; ///< ファイルサイズ\r\n  _readOffset: number; ///< ファイル参照位置\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismDefaultParameterId } from '@framework/cubismdefaultparameterid';\r\nimport { CubismModelSettingJson } from '@framework/cubismmodelsettingjson';\r\nimport {\r\n  BreathParameterData,\r\n  CubismBreath\r\n} from '@framework/effect/cubismbreath';\r\nimport { CubismEyeBlink } from '@framework/effect/cubismeyeblink';\r\nimport { ICubismModelSetting } from '@framework/icubismmodelsetting';\r\nimport { CubismIdHandle } from '@framework/id/cubismid';\r\nimport { CubismFramework } from '@framework/live2dcubismframework';\r\nimport { CubismMatrix44 } from '@framework/math/cubismmatrix44';\r\nimport { CubismUserModel } from '@framework/model/cubismusermodel';\r\nimport {\r\n  ACubismMotion,\r\n  FinishedMotionCallback\r\n} from '@framework/motion/acubismmotion';\r\nimport { CubismMotion } from '@framework/motion/cubismmotion';\r\nimport {\r\n  CubismMotionQueueEntryHandle,\r\n  InvalidMotionQueueEntryHandleValue\r\n} from '@framework/motion/cubismmotionqueuemanager';\r\nimport { csmMap } from '@framework/type/csmmap';\r\nimport { csmRect } from '@framework/type/csmrectf';\r\nimport { csmString } from '@framework/type/csmstring';\r\nimport { csmVector } from '@framework/type/csmvector';\r\nimport {\r\n  CSM_ASSERT,\r\n  CubismLogError,\r\n  CubismLogInfo\r\n} from '@framework/utils/cubismdebug';\r\n\r\nimport * as LAppDefine from './lappdefine';\r\nimport { frameBuffer, LAppDelegate } from './lappdelegate';\r\nimport { canvas, gl } from './lappglmanager';\r\nimport { LAppPal } from './lapppal';\r\nimport { TextureInfo } from './lapptexturemanager';\r\nimport { LAppWavFileHandler } from './lappwavfilehandler';\r\nimport { CubismMoc } from '@framework/model/cubismmoc';\r\n\r\n// 부위별 인덱스 리스트\r\nconst LIPS_LIST = [0, 13, 14, 17, 37, 39, 40, 61, 78, 80, 81, 82, 84, 87, 88, 91, 95, 146, 178, 181, 185, 191, 267, 269, 270, 291, 308, 310, 311, 312, 314, 317, 318, 321, 324, 375, 402, 405, 409, 415]\r\nconst LEFT_EYE_LIST = [249, 263, 362, 373, 374, 380, 381, 382, 384, 385, 386, 387, 388, 390, 398, 466]\r\nconst LEFT_EYEBROW_LIST = [276, 282, 283, 285, 293, 295, 296, 300, 334, 336]\r\nconst LEFT_IRIS_LIST = [474, 475, 476, 477]\r\nconst RIGHT_EYE_LIST = [7, 33, 133, 144, 145, 153, 154, 155, 157, 158, 159, 160, 161, 163, 173, 246]\r\nconst RIGHT_EYEBROW_LIST = [46, 52, 53, 55, 63, 65, 66, 70, 105, 107]\r\nconst RIGHT_IRIS_LIST = [469, 470, 471, 472]\r\nconst FACE_OVAL_LIST = [10, 21, 54, 58, 67, 93, 103, 109, 127, 132, 136, 148, 149, 150, 152, 162, 172, 176, 234, 251, 284, 288, 297, 323, 332, 338, 356, 361, 365, 377, 378, 379, 389, 397, 400, 454] \r\n// 얼굴 중앙 좌표인 5번과 그 외 얼굴 테두리를 나타내는 좌표들 \r\nconst FACE_OVAL_AND_CENTER = [5, 10, 21, 54, 58, 67, 93, 103, 109, 127, 132, 136, 148, 149, 150, 152, 162, 172, 176, 234, 251, 284, 288, 297, 323, 332, 338, 356, 361, 365, 377, 378, 379, 389, 397, 400, 454] \r\n// 13, 14번과 그 외 테두리\r\nconst FACE_OVAL_AND_MOUTH = [13, 14, 10, 21, 54, 58, 67, 93, 103, 109, 127, 132, 136, 148, 149, 150, 152, 162, 172, 176, 234, 251, 284, 288, 297, 323, 332, 338, 356, 361, 365, 377, 378, 379, 389, 397, 400, 454]\r\n\r\n// 해당 인덱스에 따른 좌표값 출력\r\nfunction calListIndex(detect_list: any[], landmarks: { [x: string]: any; }) {\r\n  const res = detect_list.map(index => landmarks[index])\r\n  return res\r\n}\r\n\r\n// 비디오 엘리먼트 및 캔버스 엘리먼트 가져오기\r\nconst videoElement = document.getElementsByClassName('input_video')[0] as HTMLVideoElement;\r\nconst canvasElement = document.getElementsByClassName('output_canvas')[0] as HTMLCanvasElement;\r\nconst canvasCtx = canvasElement.getContext('2d') as CanvasRenderingContext2D;\r\n// 캔버스 높이와 너비\r\nconst canvasHeight = canvasElement.height/100;\r\nconst canvasWidth = canvasElement.width/100;\r\n\r\n// 얼굴 기울기 값\r\nlet faceInclination:number = 0;\r\n// 얼굴 기울기 값 계산 함수\r\nfunction calFaceInclination(data: any) {    \r\n  if (data[0].x > data[1].x){\r\n    faceInclination = -1 * (data[0].x - data[1].x)\r\n      /Number(((((data[0].x - data[1].x)*canvasWidth)**2 + ((data[0].y - data[1].y)*canvasHeight)**2)**0.5).toFixed(3))\r\n    faceInclination = faceInclination*600\r\n  }else{\r\n    faceInclination = (data[1].x - data[0].x)\r\n      /Number(((((data[0].x - data[1].x)*canvasWidth)**2 + ((data[0].y - data[1].y)*canvasHeight)**2)**0.5).toFixed(3))\r\n    faceInclination = faceInclination*600\r\n  }    \r\n  // console.log(faceInclination);\r\n  \r\n}\r\n\r\n\r\n// 얼굴방향 좌표(faceDirectionX, faceDirectionY)\r\nlet faceDirectionX:number = 0;\r\nlet faceDirectionY:number = 0;\r\n// const eventEmitter = mitt();\r\n\r\n// 얼굴 함수\r\n/**\r\n * 얼굴 방향에 따른 좌표값을 반환해주는 함수, 클래스에서 값 업데이트 시 사용\r\n * \r\n */\r\nfunction returnFaceDirectionData() {\r\n  const X = faceDirectionX;\r\n  const Y = faceDirectionY;\r\n  return {X, Y}\r\n}\r\n\r\n// 입 변수\r\nlet mouthRatio: number = 0;\r\n// 입 함수 \r\nfunction mouthRatioCal(data: any) {\r\n  if(data.length > 0){\r\n    const bigBox1 = getBigBox(data);    \r\n    const bigBoxHeight = bigBox1.maxY - bigBox1.minY;    \r\n    const mouthHeight = data[1].y - data[0].y\r\n    mouthRatio = Number((mouthHeight/bigBoxHeight*5).toFixed(1));\r\n    \r\n    mouthRatio = Number((mouthHeight/bigBoxHeight*5).toFixed(3));\r\n  }\r\n}\r\n\r\n// 값 받고 변환해주기\r\nfunction convertData(data: any) {\r\n  // console.log(data[0]);\r\n  \r\n  if (data.length > 0) {\r\n    const bigBox = getBigBox(data);\r\n    const { regX, regY } = calcFacePosition(data, bigBox);\r\n    faceDirectionX = regX;\r\n    faceDirectionY = regY;\r\n        return {regX: regX, regY: regY}\r\n  }\r\n} \r\n// 얼굴 방향 계산 함수\r\nfunction calcFacePosition(data: any, bigBox: any) {\r\n  const bigBoxWidth = bigBox.maxX - bigBox.minX;\r\n  const bigBoxHeight = bigBox.maxY - bigBox.minY;\r\n  \r\n  const gapVertical =\r\n    bigBoxHeight - ((data[19].y + data[36].y) / 2 - bigBox.minY);\r\n  const gapHorizontal = bigBoxWidth - (data[5].x - bigBox.minX);\r\n  let regY = Number((gapVertical / bigBoxHeight).toFixed(2));\r\n  let regX = Number((gapHorizontal / bigBoxWidth).toFixed(2));\r\n  \r\n  regX = Number(((regX - 0.7) * 4 ).toFixed(2));\r\n  regY = Number(((regY * -1 + 0.6) * 5).toFixed(2));\r\n\r\n  return { regX, regY };  \r\n}\r\n\r\n// x, y의 최솟값, 최댓값 담기\r\nfunction getBigBox(data: any) {\r\n  let minX = 987654321;\r\n  let minY = 987654321;\r\n  let maxX = -987654321;\r\n  let maxY = -987654321;  \r\n  data.forEach((dot: {x?:number, y?:number}) => {\r\n    if (dot.x !== undefined && dot.y !== undefined) {\r\n      if (minX > dot.x) {\r\n        minX = dot.x;\r\n      }\r\n      if (minY > dot.y) {\r\n        minY = dot.y;\r\n      }\r\n      if (maxX < dot.x) {\r\n        maxX = dot.x;\r\n      }\r\n      if (maxY < dot.y) {\r\n        maxY = dot.y;\r\n      }\r\n    }\r\n  });\r\n  \r\n  return { minX, minY, maxX, maxY };\r\n}\r\n\r\n// Mediapipe 얼굴 인식 결과 처리 함수\r\nfunction onResults(results: { image: HTMLVideoElement, multiFaceLandmarks: any[] }) {\r\n    canvasCtx.save();  // 캔버스 상태 저장\r\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);  // 캔버스 초기화\r\n    canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);  // 비디오 프레임을 캔버스에 그림\r\n    // 얼굴 랜드마크가 있으면 처리\r\n    if (results.multiFaceLandmarks) {\r\n        for (const landmarks of results.multiFaceLandmarks) {\r\n            const MP_FACE_CENTER_OVAL = calListIndex(FACE_OVAL_AND_CENTER, landmarks)\r\n            // 입과 얼굴 테두리\r\n            const MP_MOUTH_INFO = calListIndex(FACE_OVAL_AND_MOUTH, landmarks)\r\n            // 얼굴 중심 양 끝 좌표\r\n            const MP_CENTER_END_INFO = calListIndex([10, 152], landmarks)\r\n            // 입 벌린 정도 계산\r\n            mouthRatioCal(MP_MOUTH_INFO);\r\n            \r\n            convertData(MP_FACE_CENTER_OVAL);\r\n            calFaceInclination(MP_CENTER_END_INFO);\r\n            \r\n        }\r\n    }\r\n    canvasCtx.restore();  // 캔버스 상태 복원\r\n}\r\n\r\n// facemash 전역변수 선언 *****\r\ndeclare class FaceMesh {\r\n  constructor(config: { locateFile: (file: string) => string });\r\n  setOptions(options: { maxNumFaces: number; refineLandmarks: boolean; minDetectionConfidence: number; minTrackingConfidence: number }): void;\r\n  onResults(callback: (results: any) => void): void;\r\n  send(input: { image: HTMLVideoElement }): Promise<void>;\r\n}\r\n// Mediapipe FaceMesh 객체 생성 및 설정\r\nconst faceMesh =  new FaceMesh({\r\n    locateFile: (file: string) => {\r\n        return `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`;  // Mediapipe 리소스를 CDN에서 로드\r\n    }\r\n});\r\n\r\n// FaceMesh 설정\r\nfaceMesh.setOptions({\r\n    maxNumFaces: 1,  // 최대 감지할 얼굴 개수 설정\r\n    refineLandmarks: true,  // 정밀한 랜드마크 감지 활성화\r\n    minDetectionConfidence: 0.5,  // 감지 신뢰도 최소값 설정\r\n    minTrackingConfidence: 0.5  // 추적 신뢰도 최소값 설정\r\n});\r\n\r\n// 얼굴 인식 결과가 나오면 onResults 함수 호출\r\nfaceMesh.onResults(onResults);\r\n\r\n// 카메라 전역변수 선언 *****\r\ndeclare class Camera {\r\n  constructor(videoElement: HTMLVideoElement, config: { onFrame: () => Promise<void>; width: number; height: number });\r\n  start(): void;\r\n  stop(): void;\r\n}\r\n// 카메라 설정 및 시작\r\nconst camera = new Camera(videoElement, {\r\n    onFrame: async () => {\r\n        await faceMesh.send({ image: videoElement });  // 각 프레임마다 FaceMesh에 비디오 이미지 전송\r\n    },\r\n    width: 1280,  // 카메라 해상도 가로\r\n    height: 720  // 카메라 해상도 세로\r\n});\r\ncamera.start();  // 카메라 스트리밍 시작\r\n\r\n// document.addEventListener(\"DOMContentLoaded\", () => {\r\n//     // DOMContentLoaded 이벤트 시 실행할 내용 추가 가능\r\n// });\r\n\r\n// 자체 작성 끝 ----------------------------------------------------------------------------------\r\n\r\n\r\nenum LoadStep {\r\n  LoadAssets,\r\n  LoadModel,\r\n  WaitLoadModel,\r\n  LoadExpression,\r\n  WaitLoadExpression,\r\n  LoadPhysics,\r\n  WaitLoadPhysics,\r\n  LoadPose,\r\n  WaitLoadPose,\r\n  SetupEyeBlink,\r\n  SetupBreath,\r\n  LoadUserData,\r\n  WaitLoadUserData,\r\n  SetupEyeBlinkIds,\r\n  SetupLipSyncIds,\r\n  SetupLayout,\r\n  LoadMotion,\r\n  WaitLoadMotion,\r\n  CompleteInitialize,\r\n  CompleteSetupModel,\r\n  LoadTexture,\r\n  WaitLoadTexture,\r\n  CompleteSetup\r\n}\r\n\r\n/**\r\n * 실제로 사용자가 사용하는 모델의 모델<br>\r\n * 모델 생성, 기능 구성 요소 생성, 갱신 처리 및 렌더링 호출.\r\n */\r\nexport class LAppModel extends CubismUserModel {\r\n  /**\r\n   * model3.JSON이 배치 된 디렉토리 및 파일 경로에서 모델 생성\r\n   * @param dir\r\n   * @param fileName\r\n   */\r\n  public loadAssets(dir: string, fileName: string): void {\r\n    this._modelHomeDir = dir;\r\n\r\n    fetch(`${this._modelHomeDir}${fileName}`)\r\n      .then(response => response.arrayBuffer())\r\n      .then(arrayBuffer => {\r\n        const setting: ICubismModelSetting = new CubismModelSettingJson(\r\n          arrayBuffer,\r\n          arrayBuffer.byteLength\r\n        );\r\n\r\n        // ステートを更新\r\n        this._state = LoadStep.LoadModel;\r\n\r\n        // 結果を保存\r\n        this.setupModel(setting);\r\n      })\r\n      .catch(error => {\r\n        // model3.JSON에서 오류가 발생할 때 그리는 것은 불가능하므로 설정하지 않고 아무것도하지 않습니다.\r\n        CubismLogError(`Failed to load file ${this._modelHomeDir}${fileName}`);\r\n      });\r\n  }\r\n\r\n  /**\r\n   *model3.json에서 모델을 생성합니다.\r\n   * 모델 생성, 모션, 물리적 작동 등과 같은 구성 요소는 Model3.json의 설명에 따라 수행됩니다.\r\n   *\r\n   * @param setting ICubismModelSettingのインスタンス\r\n   */\r\n  private setupModel(setting: ICubismModelSetting): void {\r\n    this._updating = true;\r\n    this._initialized = false;\r\n\r\n    this._modelSetting = setting;\r\n\r\n    // CubismModel\r\n    if (this._modelSetting.getModelFileName() != '') {\r\n      const modelFileName = this._modelSetting.getModelFileName();\r\n\r\n      fetch(`${this._modelHomeDir}${modelFileName}`)\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response.arrayBuffer();\r\n          } else if (response.status >= 400) {\r\n            CubismLogError(\r\n              `Failed to load file ${this._modelHomeDir}${modelFileName}`\r\n            );\r\n            return new ArrayBuffer(0);\r\n          }\r\n        })\r\n        .then(arrayBuffer => {\r\n          this.loadModel(arrayBuffer, this._mocConsistency);\r\n          this._state = LoadStep.LoadExpression;\r\n\r\n          // callback\r\n          loadCubismExpression();\r\n        });\r\n\r\n      this._state = LoadStep.WaitLoadModel;\r\n    } else {\r\n      LAppPal.printMessage('Model data does not exist.');\r\n    }\r\n\r\n    // Expression\r\n    const loadCubismExpression = (): void => {\r\n      if (this._modelSetting.getExpressionCount() > 0) {\r\n        const count: number = this._modelSetting.getExpressionCount();\r\n\r\n        for (let i = 0; i < count; i++) {\r\n          const expressionName = this._modelSetting.getExpressionName(i);\r\n          const expressionFileName =\r\n            this._modelSetting.getExpressionFileName(i);\r\n\r\n          fetch(`${this._modelHomeDir}${expressionFileName}`)\r\n            .then(response => {\r\n              if (response.ok) {\r\n                return response.arrayBuffer();\r\n              } else if (response.status >= 400) {\r\n                CubismLogError(\r\n                  `Failed to load file ${this._modelHomeDir}${expressionFileName}`\r\n                );\r\n                // 파일이 존재하지 않더라도 응답은 NULL을 반환하지 않으므로 빈 배열 버퍼와 호환됩니다.\r\n                return new ArrayBuffer(0);\r\n              }\r\n            })\r\n            .then(arrayBuffer => {\r\n              const motion: ACubismMotion = this.loadExpression(\r\n                arrayBuffer,\r\n                arrayBuffer.byteLength,\r\n                expressionName\r\n              );\r\n\r\n              if (this._expressions.getValue(expressionName) != null) {\r\n                ACubismMotion.delete(\r\n                  this._expressions.getValue(expressionName)\r\n                );\r\n                this._expressions.setValue(expressionName, null);\r\n              }\r\n\r\n              this._expressions.setValue(expressionName, motion);\r\n\r\n              this._expressionCount++;\r\n\r\n              if (this._expressionCount >= count) {\r\n                this._state = LoadStep.LoadPhysics;\r\n\r\n                // callback\r\n                loadCubismPhysics();\r\n              }\r\n            });\r\n        }\r\n        this._state = LoadStep.WaitLoadExpression;\r\n      } else {\r\n        this._state = LoadStep.LoadPhysics;\r\n\r\n        // callback\r\n        loadCubismPhysics();\r\n      }\r\n    };\r\n\r\n    // Physics\r\n    const loadCubismPhysics = (): void => {\r\n      if (this._modelSetting.getPhysicsFileName() != '') {\r\n        const physicsFileName = this._modelSetting.getPhysicsFileName();\r\n\r\n        fetch(`${this._modelHomeDir}${physicsFileName}`)\r\n          .then(response => {\r\n            if (response.ok) {\r\n              return response.arrayBuffer();\r\n            } else if (response.status >= 400) {\r\n              CubismLogError(\r\n                `Failed to load file ${this._modelHomeDir}${physicsFileName}`\r\n              );\r\n              return new ArrayBuffer(0);\r\n            }\r\n          })\r\n          .then(arrayBuffer => {\r\n            this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);\r\n\r\n            this._state = LoadStep.LoadPose;\r\n\r\n            // callback\r\n            loadCubismPose();\r\n          });\r\n        this._state = LoadStep.WaitLoadPhysics;\r\n      } else {\r\n        this._state = LoadStep.LoadPose;\r\n\r\n        // callback\r\n        loadCubismPose();\r\n      }\r\n    };\r\n\r\n    // Pose\r\n    const loadCubismPose = (): void => {\r\n      if (this._modelSetting.getPoseFileName() != '') {\r\n        const poseFileName = this._modelSetting.getPoseFileName();\r\n\r\n        fetch(`${this._modelHomeDir}${poseFileName}`)\r\n          .then(response => {\r\n            if (response.ok) {\r\n              return response.arrayBuffer();\r\n            } else if (response.status >= 400) {\r\n              CubismLogError(\r\n                `Failed to load file ${this._modelHomeDir}${poseFileName}`\r\n              );\r\n              return new ArrayBuffer(0);\r\n            }\r\n          })\r\n          .then(arrayBuffer => {\r\n            this.loadPose(arrayBuffer, arrayBuffer.byteLength);\r\n\r\n            this._state = LoadStep.SetupEyeBlink;\r\n\r\n            // callback\r\n            setupEyeBlink();\r\n          });\r\n        this._state = LoadStep.WaitLoadPose;\r\n      } else {\r\n        this._state = LoadStep.SetupEyeBlink;\r\n\r\n        // callback\r\n        setupEyeBlink();\r\n      }\r\n    };\r\n\r\n    // EyeBlink\r\n    const setupEyeBlink = (): void => {\r\n      if (this._modelSetting.getEyeBlinkParameterCount() > 0) {\r\n        this._eyeBlink = CubismEyeBlink.create(this._modelSetting);\r\n        this._state = LoadStep.SetupBreath;\r\n      }\r\n\r\n      // callback\r\n      setupBreath();\r\n    };\r\n\r\n    // Breath\r\n    const setupBreath = (): void => {\r\n      this._breath = CubismBreath.create();\r\n\r\n      const breathParameters: csmVector<BreathParameterData> = new csmVector();\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5)\r\n      );\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5)\r\n      );\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5)\r\n      );\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5)\r\n      );\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(\r\n          CubismFramework.getIdManager().getId(\r\n            CubismDefaultParameterId.ParamBreath\r\n          ),\r\n          0.5,\r\n          0.5,\r\n          3.2345,\r\n          1\r\n        )\r\n      );\r\n\r\n      this._breath.setParameters(breathParameters);\r\n      this._state = LoadStep.LoadUserData;\r\n\r\n      // callback\r\n      loadUserData();\r\n    };\r\n\r\n    // UserData\r\n    const loadUserData = (): void => {\r\n      if (this._modelSetting.getUserDataFile() != '') {\r\n        const userDataFile = this._modelSetting.getUserDataFile();\r\n\r\n        fetch(`${this._modelHomeDir}${userDataFile}`)\r\n          .then(response => {\r\n            if (response.ok) {\r\n              return response.arrayBuffer();\r\n            } else if (response.status >= 400) {\r\n              CubismLogError(\r\n                `Failed to load file ${this._modelHomeDir}${userDataFile}`\r\n              );\r\n              return new ArrayBuffer(0);\r\n            }\r\n          })\r\n          .then(arrayBuffer => {\r\n            this.loadUserData(arrayBuffer, arrayBuffer.byteLength);\r\n\r\n            this._state = LoadStep.SetupEyeBlinkIds;\r\n\r\n            // callback\r\n            setupEyeBlinkIds();\r\n          });\r\n\r\n        this._state = LoadStep.WaitLoadUserData;\r\n      } else {\r\n        this._state = LoadStep.SetupEyeBlinkIds;\r\n\r\n        // callback\r\n        setupEyeBlinkIds();\r\n      }\r\n    };\r\n\r\n    // EyeBlinkIds\r\n    const setupEyeBlinkIds = (): void => {\r\n      const eyeBlinkIdCount: number =\r\n        this._modelSetting.getEyeBlinkParameterCount();\r\n\r\n      for (let i = 0; i < eyeBlinkIdCount; ++i) {\r\n        this._eyeBlinkIds.pushBack(\r\n          this._modelSetting.getEyeBlinkParameterId(i)\r\n        );\r\n      }\r\n\r\n      this._state = LoadStep.SetupLipSyncIds;\r\n\r\n      // callback\r\n      setupLipSyncIds();\r\n    };\r\n\r\n    // LipSyncIds\r\n    const setupLipSyncIds = (): void => {\r\n      const lipSyncIdCount = this._modelSetting.getLipSyncParameterCount();\r\n\r\n      for (let i = 0; i < lipSyncIdCount; ++i) {\r\n        this._lipSyncIds.pushBack(this._modelSetting.getLipSyncParameterId(i));\r\n      }\r\n      this._state = LoadStep.SetupLayout;\r\n\r\n      // callback\r\n      setupLayout();\r\n    };\r\n\r\n    // Layout\r\n    const setupLayout = (): void => {\r\n      const layout: csmMap<string, number> = new csmMap<string, number>();\r\n\r\n      if (this._modelSetting == null || this._modelMatrix == null) {\r\n        CubismLogError('Failed to setupLayout().');\r\n        return;\r\n      }\r\n\r\n      this._modelSetting.getLayoutMap(layout);\r\n      this._modelMatrix.setupFromLayout(layout);\r\n      this._state = LoadStep.LoadMotion;\r\n\r\n      // callback\r\n      loadCubismMotion();\r\n    };\r\n\r\n    // Motion\r\n    const loadCubismMotion = (): void => {\r\n      this._state = LoadStep.WaitLoadMotion;\r\n      this._model.saveParameters();\r\n      this._allMotionCount = 0;\r\n      this._motionCount = 0;\r\n      const group: string[] = [];\r\n\r\n      const motionGroupCount: number = this._modelSetting.getMotionGroupCount();\r\n\r\n      // 총 움직임 수를 찾으십시오\r\n      for (let i = 0; i < motionGroupCount; i++) {\r\n        group[i] = this._modelSetting.getMotionGroupName(i);\r\n        this._allMotionCount += this._modelSetting.getMotionCount(group[i]);\r\n      }\r\n\r\n      // 독서 운동\r\n      for (let i = 0; i < motionGroupCount; i++) {\r\n        this.preLoadMotionGroup(group[i]);\r\n      }\r\n\r\n      // 움직임이없는 경우\r\n      if (motionGroupCount == 0) {\r\n        this._state = LoadStep.LoadTexture;\r\n\r\n        // 모든 움직임을 중지하십시오\r\n        this._motionManager.stopAllMotions();\r\n\r\n        this._updating = false;\r\n        this._initialized = true;\r\n\r\n        this.createRenderer();\r\n        this.setupTextures();\r\n        this.getRenderer().startUp(gl);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * テクスチャユニットにテクスチャをロードする\r\n   */\r\n  private setupTextures(): void {\r\n    // TypeScript는 iPhone의 알파 품질을 향상시키기 위해 TypeScript의 Pimultiedalpha를 채택합니다.\r\n    const usePremultiply = true;\r\n\r\n    if (this._state == LoadStep.LoadTexture) {\r\n      // 텍스처 읽기\r\n      const textureCount: number = this._modelSetting.getTextureCount();\r\n\r\n      for (\r\n        let modelTextureNumber = 0;\r\n        modelTextureNumber < textureCount;\r\n        modelTextureNumber++\r\n      ) {\r\n        // 텍스처 이름이 빈 문자 인 경우 부하 바인딩 프로세스를 건너 뜁니다.\r\n        if (this._modelSetting.getTextureFileName(modelTextureNumber) == '') {\r\n          console.log('getTextureFileName null');\r\n          continue;\r\n        }\r\n\r\n        // 텍스처를 WebGL 텍스처 장치에로드하십시오\r\n        let texturePath =\r\n          this._modelSetting.getTextureFileName(modelTextureNumber);\r\n        texturePath = this._modelHomeDir + texturePath;\r\n\r\n        // 도로가 완료 될 때 호출되는 콜백 기능\r\n        const onLoad = (textureInfo: TextureInfo): void => {\r\n          this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);\r\n\r\n          this._textureCount++;\r\n\r\n          if (this._textureCount >= textureCount) {\r\n            // 도로 완료\r\n            this._state = LoadStep.CompleteSetup;\r\n          }\r\n        };\r\n\r\n        // 독서\r\n        LAppDelegate.getInstance()\r\n          .getTextureManager()\r\n          .createTextureFromPngFile(texturePath, usePremultiply, onLoad);\r\n        this.getRenderer().setIsPremultipliedAlpha(usePremultiply);\r\n      }\r\n\r\n      this._state = LoadStep.WaitLoadTexture;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 재구성 렌더링\r\n   */\r\n  public reloadRenderer(): void {\r\n    this.deleteRenderer();\r\n    this.createRenderer();\r\n    this.setupTextures();\r\n  }\r\n\r\n  /**\r\n   * 고쳐 쓰다\r\n   */\r\n  public update(): void {\r\n    if (this._state != LoadStep.CompleteSetup) return;\r\n\r\n    const deltaTimeSeconds: number = LAppPal.getDeltaTime();\r\n    this._userTimeSeconds += deltaTimeSeconds;\r\n\r\n    this._dragManager.update(deltaTimeSeconds);\r\n    this._dragX = this._dragManager.getX();\r\n    this._dragY = this._dragManager.getY();\r\n\r\n  // 내꺼 시작 ------------------------------------------------\r\n  //테스트\r\n    const dataRecive: {X:number, Y:number} = returnFaceDirectionData();\r\n    this.faceDirectionX = dataRecive.X;\r\n    this.faceDirectionY = dataRecive.Y;\r\n  // ㅇㅇ\r\n    this.testDragX = \r\n      this.testDragX + (this.faceDirectionX - this.testDragX) / 16;\r\n    this.testDragY = \r\n      this.testDragY + (this.faceDirectionY - this.testDragY) / 16;\r\n    this.mouthRatio = \r\n      this.mouthRatio + (mouthRatio - this.mouthRatio) / 4;\r\n\r\n    this.faceInclination = \r\n      this.faceInclination + (faceInclination - this.faceInclination) / 8;\r\n      \r\n  // 내꺼 끝 ------------------------------------------------\r\n\r\n    // 모션별로 매개 변수 업데이트 여부\r\n    let motionUpdated = false;\r\n\r\n    //--------------------------------------------------------------------------\r\n    this._model.loadParameters(); // 이전에 저장된 상태를로드하십시오\r\n    if (this._motionManager.isFinished()) {\r\n      // モーションの再生がない場合、待機モーションの中からランダムで再生する\r\n      this.startRandomMotion(\r\n        LAppDefine.MotionGroupIdle,\r\n        LAppDefine.PriorityIdle\r\n      );\r\n    } else {\r\n      motionUpdated = this._motionManager.updateMotion(\r\n        this._model,\r\n        deltaTimeSeconds\r\n      ); // 업데이트 동작\r\n    }\r\n    this._model.saveParameters(); // 상태를 저장하십시오\r\n    //--------------------------------------------------------------------------\r\n\r\n    // 깜박임\r\n    if (!motionUpdated) {\r\n      if (this._eyeBlink != null) {\r\n        // 메인 모션의 업데이트가 없을 때\r\n        this._eyeBlink.updateParameters(this._model, deltaTimeSeconds); // 금이 가다\r\n      }\r\n    }\r\n\r\n    if (this._expressionManager != null) {\r\n      this._expressionManager.updateMotion(this._model, deltaTimeSeconds); // 표현식으로 업데이트 된 매개 변수 (상대 변경)\r\n    }\r\n\r\n    // 드래그하여변화\r\n    // 드래그하여얼굴 방향 조정\r\n\r\n  // 내꺼 시작 ------------------------------------------------\r\n    this._model.addParameterValueById(this._idParamAngleX, this.testDragX * 30);\r\n    this._model.addParameterValueById(this._idParamAngleY, this.testDragY * 30);\r\n    this._model.addParameterValueById(this._idParamEyeBallX, this.testDragX * 10); \r\n    this._model.addParameterValueById(this._idParamEyeBallY, this.testDragY * 10);\r\n    this._model.addParameterValueById(this._idParamMouthOpenY, this.mouthRatio); \r\n    this._model.addParameterValueById(this._idParamAngleZ, this.faceInclination); \r\n  // 내꺼 끝 ------------------------------------------------\r\n    this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30); // -30에서 30까지의 값을 추가하십시오\r\n    this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\r\n    this._model.addParameterValueById(\r\n      this._idParamAngleZ,\r\n      this._dragX * this._dragY * -30\r\n    );\r\n\r\n    // 드래그하여신체 방향의 조정\r\n    this._model.addParameterValueById(\r\n      this._idParamBodyAngleX,\r\n      this._dragX * 10\r\n    ); // -10에서 10까지의 값을 추가하십시오\r\n\r\n    // 드래그하여 의한 눈 방향 조정\r\n    this._model.addParameterValueById(this._idParamEyeBallX, this._dragX); // -1에서 1까지의 값을 추가하십시오\r\n    this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\r\n\r\n    // 호흡 등\r\n    if (this._breath != null) {\r\n      this._breath.updateParameters(this._model, deltaTimeSeconds);\r\n    }\r\n\r\n    // 물리적 작동 설정\r\n    if (this._physics != null) {\r\n      this._physics.evaluate(this._model, deltaTimeSeconds);\r\n    }\r\n\r\n    // 립싱크 설정\r\n    if (this._lipsync) {\r\n      let value = 0.0; // 립 동기화를 실시간으로 수행 할 때는 시스템에서 볼륨을 가져오고0~1 범위의 값을 입력하십시오.ます。\r\n\r\n      this._wavFileHandler.update(deltaTimeSeconds);\r\n      value = this._wavFileHandler.getRms();\r\n\r\n      for (let i = 0; i < this._lipSyncIds.getSize(); ++i) {\r\n        this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);\r\n      }\r\n    }\r\n\r\n    // 설정 설정\r\n    if (this._pose != null) {\r\n      this._pose.updateParameters(this._model, deltaTimeSeconds);\r\n    }\r\n\r\n    this._model.update();\r\n  }\r\n\r\n  /**\r\n   * 인수에 의해 지정된 움직임을 시작하십시오\r\n   * @param group モーショングループ名\r\n   * @param no グループ内の番号\r\n   * @param priority 優先度\r\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\r\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\r\n   */\r\n  public startMotion(\r\n    group: string,\r\n    no: number,\r\n    priority: number,\r\n    onFinishedMotionHandler?: FinishedMotionCallback\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (priority == LAppDefine.PriorityForce) {\r\n      this._motionManager.setReservePriority(priority);\r\n    } else if (!this._motionManager.reserveMotion(priority)) {\r\n      if (this._debugMode) {\r\n        LAppPal.printMessage(\"[APP]can't start motion.\");\r\n      }\r\n      return InvalidMotionQueueEntryHandleValue;\r\n    }\r\n\r\n    const motionFileName = this._modelSetting.getMotionFileName(group, no);\r\n\r\n    // ex) idle_0\r\n    const name = `${group}_${no}`;\r\n    let motion: CubismMotion = this._motions.getValue(name) as CubismMotion;\r\n    let autoDelete = false;\r\n\r\n    if (motion == null) {\r\n      fetch(`${this._modelHomeDir}${motionFileName}`)\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response.arrayBuffer();\r\n          } else if (response.status >= 400) {\r\n            CubismLogError(\r\n              `Failed to load file ${this._modelHomeDir}${motionFileName}`\r\n            );\r\n            return new ArrayBuffer(0);\r\n          }\r\n        })\r\n        .then(arrayBuffer => {\r\n          motion = this.loadMotion(\r\n            arrayBuffer,\r\n            arrayBuffer.byteLength,\r\n            null,\r\n            onFinishedMotionHandler\r\n          );\r\n\r\n          if (motion == null) {\r\n            return;\r\n          }\r\n\r\n          let fadeTime: number = this._modelSetting.getMotionFadeInTimeValue(\r\n            group,\r\n            no\r\n          );\r\n\r\n          if (fadeTime >= 0.0) {\r\n            motion.setFadeInTime(fadeTime);\r\n          }\r\n\r\n          fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, no);\r\n          if (fadeTime >= 0.0) {\r\n            motion.setFadeOutTime(fadeTime);\r\n          }\r\n\r\n          motion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\r\n          autoDelete = true; // 終了時にメモリから削除\r\n        });\r\n    } else {\r\n      motion.setFinishedMotionHandler(onFinishedMotionHandler);\r\n    }\r\n\r\n    //voice\r\n    const voice = this._modelSetting.getMotionSoundFileName(group, no);\r\n    if (voice.localeCompare('') != 0) {\r\n      let path = voice;\r\n      path = this._modelHomeDir + path;\r\n      this._wavFileHandler.start(path);\r\n    }\r\n\r\n    if (this._debugMode) {\r\n      LAppPal.printMessage(`[APP]start motion: [${group}_${no}`);\r\n    }\r\n    return this._motionManager.startMotionPriority(\r\n      motion,\r\n      autoDelete,\r\n      priority\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 무작위로 선택된 동작을 시작하십시오.\r\n   * @param group 모션 그룹 이름\r\n   * @param priority 우선 사항\r\n   * @param onFinishedMotionHandler 모션 재생 끝에서 호출 된 콜백 함수\r\n   * @return 시작 모션의 식별 번호를 반환합니다.개별 운동이 종료되었는지 판단하십시오isFinished()논쟁으로 사용하십시오.시작할 수 없을 때[-1]\r\n   */\r\n  public startRandomMotion(\r\n    group: string,\r\n    priority: number,\r\n    onFinishedMotionHandler?: FinishedMotionCallback\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (this._modelSetting.getMotionCount(group) == 0) {\r\n      return InvalidMotionQueueEntryHandleValue;\r\n    }\r\n\r\n    const no: number = Math.floor(\r\n      Math.random() * this._modelSetting.getMotionCount(group)\r\n    );\r\n\r\n    return this.startMotion(group, no, priority, onFinishedMotionHandler);\r\n  }\r\n\r\n  /**\r\n   * 인수에 의해 지정된 표현식 모션을 설정하십시오\r\n   *\r\n   * @param expressionId 表情モーションのID\r\n   */\r\n  public setExpression(expressionId: string): void {\r\n    const motion: ACubismMotion = this._expressions.getValue(expressionId);\r\n\r\n    if (this._debugMode) {\r\n      LAppPal.printMessage(`[APP]expression: [${expressionId}]`);\r\n    }\r\n\r\n    if (motion != null) {\r\n      this._expressionManager.startMotionPriority(\r\n        motion,\r\n        false,\r\n        LAppDefine.PriorityForce\r\n      );\r\n    } else {\r\n      if (this._debugMode) {\r\n        LAppPal.printMessage(`[APP]expression[${expressionId}] is null`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 무작위로 선택된 표현 운동을 설정하십시오\r\n   */\r\n  public setRandomExpression(): void {\r\n    if (this._expressions.getSize() == 0) {\r\n      return;\r\n    }\r\n\r\n    const no: number = Math.floor(Math.random() * this._expressions.getSize());\r\n\r\n    for (let i = 0; i < this._expressions.getSize(); i++) {\r\n      if (i == no) {\r\n        const name: string = this._expressions._keyValues[i].first;\r\n        this.setExpression(name);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 이벤트발사받다\r\n   */\r\n  public motionEventFired(eventValue: csmString): void {\r\n    CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);\r\n  }\r\n\r\n  /**\r\n   * 나중에심판시험\r\n   * 지정된 ID의 정점 목록에서 사각형을 계산하고 좌표가 직사각형 범위 내에 있는지 확인하십시오.\r\n   *\r\n   * @param hitArenaName  当たり判定をテストする対象のID\r\n   * @param x             判定を行うX座標\r\n   * @param y             判定を行うY座標\r\n   */\r\n  public hitTest(hitArenaName: string, x: number, y: number): boolean {\r\n    // 투명성 중에는 인기 판단이 없습니다.\r\n    if (this._opacity < 1) {\r\n      return false;\r\n    }\r\n\r\n    const count: number = this._modelSetting.getHitAreasCount();\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\r\n        const drawId: CubismIdHandle = this._modelSetting.getHitAreaId(i);\r\n        return this.isHit(drawId, x, y);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n  convertData() {\r\n    return 1;\r\n  }\r\n  /**\r\n   * 그룹 이름에서 동작 데이터를 한 번에로드하십시오.\r\n   * 모션 데이터의 이름이 내부에 있습니다ModelSetting~에서습득하다。\r\n   *\r\n   * @param group 모션 데이터 그룹 이름\r\n   */\r\n  public preLoadMotionGroup(group: string): void {\r\n    for (let i = 0; i < this._modelSetting.getMotionCount(group); i++) {\r\n      const motionFileName = this._modelSetting.getMotionFileName(group, i);\r\n\r\n      // ex) idle_0\r\n      const name = `${group}_${i}`;\r\n      if (this._debugMode) {\r\n        LAppPal.printMessage(\r\n          `[APP]load motion: ${motionFileName} => [${name}]`\r\n        );\r\n      }\r\n\r\n      fetch(`${this._modelHomeDir}${motionFileName}`)\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response.arrayBuffer();\r\n          } else if (response.status >= 400) {\r\n            CubismLogError(\r\n              `Failed to load file ${this._modelHomeDir}${motionFileName}`\r\n            );\r\n            return new ArrayBuffer(0);\r\n          }\r\n        })\r\n        .then(arrayBuffer => {\r\n          const tmpMotion: CubismMotion = this.loadMotion(\r\n            arrayBuffer,\r\n            arrayBuffer.byteLength,\r\n            name\r\n          );\r\n\r\n          if (tmpMotion != null) {\r\n            let fadeTime = this._modelSetting.getMotionFadeInTimeValue(\r\n              group,\r\n              i\r\n            );\r\n            if (fadeTime >= 0.0) {\r\n              tmpMotion.setFadeInTime(fadeTime);\r\n            }\r\n\r\n            fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, i);\r\n            if (fadeTime >= 0.0) {\r\n              tmpMotion.setFadeOutTime(fadeTime);\r\n            }\r\n            tmpMotion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\r\n\r\n            if (this._motions.getValue(name) != null) {\r\n              ACubismMotion.delete(this._motions.getValue(name));\r\n            }\r\n\r\n            this._motions.setValue(name, tmpMotion);\r\n\r\n            this._motionCount++;\r\n            if (this._motionCount >= this._allMotionCount) {\r\n              this._state = LoadStep.LoadTexture;\r\n\r\n              // 모든 움직임을 중지하십시오\r\n              this._motionManager.stopAllMotions();\r\n\r\n              this._updating = false;\r\n              this._initialized = true;\r\n\r\n              this.createRenderer();\r\n              this.setupTextures();\r\n              this.getRenderer().startUp(gl);\r\n            }\r\n          } else {\r\n            // loadMotion할 수 없다면 총 모션 수가 이동하므로 줄이십시오.\r\n            this._allMotionCount--;\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * すべてのモーションデータを解放する。\r\n   */\r\n  public releaseMotions(): void {\r\n    this._motions.clear();\r\n  }\r\n\r\n  /**\r\n   * 全ての表情データを解放する。\r\n   */\r\n  public releaseExpressions(): void {\r\n    this._expressions.clear();\r\n  }\r\n\r\n  /**\r\n   * 모델을 그리기위한 처리.모델을 그리는 공간View-Projection매트릭스를 제공하십시오。\r\n   */\r\n  public doDraw(): void {\r\n    if (this._model == null) return;\r\n\r\n    // キャンバスサイズを渡す\r\n    const viewport: number[] = [0, 0, canvas.width, canvas.height];\r\n\r\n    this.getRenderer().setRenderState(frameBuffer, viewport);\r\n    this.getRenderer().drawModel();\r\n  }\r\n\r\n  /**\r\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\r\n   */\r\n  public draw(matrix: CubismMatrix44): void {\r\n    if (this._model == null) {\r\n      return;\r\n    }\r\n\r\n    // 各読み込み終了後\r\n    if (this._state == LoadStep.CompleteSetup) {\r\n      matrix.multiplyByMatrix(this._modelMatrix);\r\n\r\n      this.getRenderer().setMvpMatrix(matrix);\r\n\r\n      this.doDraw();\r\n    }\r\n  }\r\n\r\n  public async hasMocConsistencyFromFile() {\r\n    CSM_ASSERT(this._modelSetting.getModelFileName().localeCompare(``));\r\n\r\n    // CubismModel\r\n    if (this._modelSetting.getModelFileName() != '') {\r\n      const modelFileName = this._modelSetting.getModelFileName();\r\n\r\n      const response = await fetch(`${this._modelHomeDir}${modelFileName}`);\r\n      const arrayBuffer = await response.arrayBuffer();\r\n\r\n      this._consistency = CubismMoc.hasMocConsistency(arrayBuffer);\r\n\r\n      if (!this._consistency) {\r\n        CubismLogInfo('Inconsistent MOC3.');\r\n      } else {\r\n        CubismLogInfo('Consistent MOC3.');\r\n      }\r\n\r\n      return this._consistency;\r\n    } else {\r\n      LAppPal.printMessage('Model data does not exist.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n\r\n    // 내꺼 시작\r\n    this.faceDirectionX = 0;\r\n    this.faceDirectionY = 0;\r\n    // this.internalVar = null;\r\n    // this.eventEmitter = eventEmitter;\r\n    this.testDragX = 0;\r\n    this.testDragY = 0;\r\n    // 테스트용 변수\r\n    this.dataSendfaceDirectionX = 0;\r\n    this.dataSendfaceDirectionY = 0;\r\n    // 내꺼 끝\r\n\r\n    this._modelSetting = null;\r\n    this._modelHomeDir = null;\r\n    this._userTimeSeconds = 0.0;\r\n\r\n    this._eyeBlinkIds = new csmVector<CubismIdHandle>();\r\n    this._lipSyncIds = new csmVector<CubismIdHandle>();\r\n\r\n    this._motions = new csmMap<string, ACubismMotion>();\r\n    this._expressions = new csmMap<string, ACubismMotion>();\r\n\r\n    this._hitArea = new csmVector<csmRect>();\r\n    this._userArea = new csmVector<csmRect>();\r\n\r\n    this._idParamAngleX = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamAngleX\r\n    );\r\n    this._idParamAngleY = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamAngleY\r\n    );\r\n    this._idParamAngleZ = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamAngleZ\r\n    );\r\n    this._idParamEyeBallX = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamEyeBallX\r\n    );\r\n    this._idParamEyeBallY = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamEyeBallY\r\n    );\r\n    this._idParamBodyAngleX = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamBodyAngleX\r\n    );\r\n  // 내꺼 시작 -------------------------------------------------------------\r\n    this.mouthRatio = 0;\r\n    this.faceInclination = 0;\r\n    this._idParamMouthOpenY = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamMouthOpenY\r\n    );\r\n    // 내꺼 끝 -------------------------------------------------------------\r\n\r\n\r\n    if (LAppDefine.MOCConsistencyValidationEnable) {\r\n      this._mocConsistency = true;\r\n    }\r\n\r\n    this._state = LoadStep.LoadAssets;\r\n    this._expressionCount = 0;\r\n    this._textureCount = 0;\r\n    this._motionCount = 0;\r\n    this._allMotionCount = 0;\r\n    this._wavFileHandler = new LAppWavFileHandler();\r\n    this._consistency = false;\r\n  }\r\n\r\n  // 내꺼 시작 -------------------------------------------------------------\r\n  faceDirectionX: number;\r\n  faceDirectionY: number;\r\n  // internalVar: Promise<any>;\r\n  // private eventEmitter: any;\r\n  testDragX: number;\r\n  testDragY: number;\r\n  // 테스트용 변수\r\n  dataSendfaceDirectionX: number;\r\n  dataSendfaceDirectionY: number;\r\n  faceInclination: number;\r\n  // 내꺼 끝 --------------------------------------------------------------\r\n\r\n  _modelSetting: ICubismModelSetting; // モデルセッティング情報\r\n  _modelHomeDir: string; // モデルセッティングが置かれたディレクトリ\r\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\r\n\r\n  _eyeBlinkIds: csmVector<CubismIdHandle>; // 깜박임 함수 매개 변수 ID 모델에서 설정했습니다\r\n  _lipSyncIds: csmVector<CubismIdHandle>; // モデルに設定されたリップシンク機能用パラメータID\r\n\r\n  _motions: csmMap<string, ACubismMotion>; // 読み込まれているモーションのリスト\r\n  _expressions: csmMap<string, ACubismMotion>; // 読み込まれている表情のリスト\r\n\r\n  _hitArea: csmVector<csmRect>;\r\n  _userArea: csmVector<csmRect>;\r\n  // 내꺼 시작 -------------------------------------------------------------\r\n  _idParamMouthOpenY: CubismIdHandle;  // 입 벌린 정도\r\n  mouthRatio: number; // 입 비율\r\n  // 내꺼 끝 -------------------------------------------------------------\r\n\r\n  _idParamAngleX: CubismIdHandle; // パラメータID: ParamAngleX\r\n  _idParamAngleY: CubismIdHandle; // パラメータID: ParamAngleY\r\n  _idParamAngleZ: CubismIdHandle; // パラメータID: ParamAngleZ\r\n  _idParamEyeBallX: CubismIdHandle; // パラメータID: ParamEyeBallX\r\n  _idParamEyeBallY: CubismIdHandle; // パラメータID: ParamEyeBAllY\r\n  _idParamBodyAngleX: CubismIdHandle; // パラメータID: ParamBodyAngleX\r\n\r\n  _state: LoadStep; // 現在のステータス管理用\r\n  _expressionCount: number; // 表情データカウント\r\n  _textureCount: number; // テクスチャカウント\r\n  _motionCount: number; // モーションデータカウント\r\n  _allMotionCount: number; // モーション総数\r\n  _wavFileHandler: LAppWavFileHandler; //wavファイルハンドラ\r\n  _consistency: boolean; // MOC3一貫性チェック管理用\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMatrix44 } from '@framework/math/cubismmatrix44';\r\nimport { ACubismMotion } from '@framework/motion/acubismmotion';\r\nimport { csmVector } from '@framework/type/csmvector';\r\n\r\nimport * as LAppDefine from './lappdefine';\r\nimport { canvas } from './lappglmanager';\r\nimport { LAppModel } from './lappmodel';\r\nimport { LAppPal } from './lapppal';\r\n\r\nexport let s_instance: LAppLive2DManager = null;\r\n\r\n/**\r\n * 샘플 애플리케이션에서 CubismModel을 관리하는 클래스\r\n * 모델 생성 및 파괴, 탭 이벤트 처리 및 모델 스위칭.\r\n */\r\nexport class LAppLive2DManager {\r\n  /**\r\n   * 클래스 인스턴스 (싱글 톤)를 반환합니다.\r\n   * 인스턴스가 생성되지 않으면 인스턴스가 내부에 생성됩니다.\r\n   *\r\n   * @return 클래스 인스턴스\r\n   */\r\n  public static getInstance(): LAppLive2DManager {\r\n    if (s_instance == null) {\r\n      s_instance = new LAppLive2DManager();\r\n    }\r\n\r\n    return s_instance;\r\n  }\r\n\r\n  /**\r\n   * 클래스의 인스턴스 (싱글 톤)를 해제하십시오.\r\n   */\r\n  public static releaseInstance(): void {\r\n    if (s_instance != null) {\r\n      s_instance = void 0;\r\n    }\r\n\r\n    s_instance = null;\r\n  }\r\n\r\n  /**\r\n   * 현재 장면에서 고정 된 모델을 반환하십시오.\r\n   *\r\n   * @param no 모델 목록 인덱스 값\r\n   * @return 모델 인스턴스를 반환합니다.인덱스 값이 범위를 벗어난 경우 NULL을 반환하십시오.\r\n   */\r\n  public getModel(no: number): LAppModel {\r\n    if (no < this._models.getSize()) {\r\n      return this._models.at(no);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 현재 장면에서 보유한 모든 모델을 해제하십시오\r\n   */\r\n  public releaseAllModel(): void {\r\n    for (let i = 0; i < this._models.getSize(); i++) {\r\n      this._models.at(i).release();\r\n      this._models.set(i, null);\r\n    }\r\n\r\n    this._models.clear();\r\n  }\r\n\r\n  /**\r\n   * 화면을 드래그 할 때 처리\r\n   *\r\n   * @param x x 화면의 좌표\r\n   * @param y 화면 Y 좌표\r\n   */\r\n  public onDrag(x: number, y: number): void {\r\n    for (let i = 0; i < this._models.getSize(); i++) {\r\n      const model: LAppModel = this.getModel(i);\r\n\r\n      if (model) {\r\n        model.setDragging(x, y);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 화면을 탭 할 때 처리\r\n   *\r\n   * @param x x 화면의 좌표\r\n   * @param y 화면 Y 좌표\r\n   */\r\n  public onTap(x: number, y: number): void {\r\n    if (LAppDefine.DebugLogEnable) {\r\n      LAppPal.printMessage(\r\n        `[APP]tap point: {x: ${x.toFixed(2)} y: ${y.toFixed(2)}}`\r\n      );\r\n    }\r\n\r\n    for (let i = 0; i < this._models.getSize(); i++) {\r\n      if (this._models.at(i).hitTest(LAppDefine.HitAreaNameHead, x, y)) {\r\n        if (LAppDefine.DebugLogEnable) {\r\n          LAppPal.printMessage(\r\n            `[APP]hit area: [${LAppDefine.HitAreaNameHead}]`\r\n          );\r\n        }\r\n        this._models.at(i).setRandomExpression();\r\n      } else if (this._models.at(i).hitTest(LAppDefine.HitAreaNameBody, x, y)) {\r\n        if (LAppDefine.DebugLogEnable) {\r\n          LAppPal.printMessage(\r\n            `[APP]hit area: [${LAppDefine.HitAreaNameBody}]`\r\n          );\r\n        }\r\n        this._models\r\n          .at(i)\r\n          .startRandomMotion(\r\n            LAppDefine.MotionGroupTapBody,\r\n            LAppDefine.PriorityNormal,\r\n            this._finishedMotion\r\n          );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 화면을 업데이트 할 때 처리\r\n   * 모델 업데이트 및 그리기\r\n   */\r\n  public onUpdate(): void {\r\n    const { width, height } = canvas;\r\n\r\n    const modelCount: number = this._models.getSize();\r\n\r\n    for (let i = 0; i < modelCount; ++i) {\r\n      const projection: CubismMatrix44 = new CubismMatrix44();\r\n      const model: LAppModel = this.getModel(i);\r\n\r\n      if (model.getModel()) {\r\n        if (model.getModel().getCanvasWidth() > 1.0 && width < height) {\r\n          // 수직 창에 긴 모델을 표시 할 때 모델의 수평 크기에서 스케일을 계산하십시오.\r\n          model.getModelMatrix().setWidth(2.0);\r\n          projection.scale(1.0, width / height);\r\n        } else {\r\n          projection.scale(height / width, 1.0);\r\n        }\r\n\r\n        // 필요한 경우 여기에서 곱하십시오\r\n        if (this._viewMatrix != null) {\r\n          projection.multiplyByMatrix(this._viewMatrix);\r\n        }\r\n      }\r\n\r\n      model.update();\r\n      model.draw(projection); // 프로젝션은 참조 전달이기 때문에 변환됩니다.\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 다음 장면으로 변경하십시오\r\n   * 샘플 응용 프로그램에서 모델 세트를 전환하십시오.\r\n   */\r\n  public nextScene(): void {\r\n    const no: number = (this._sceneIndex + 1) % LAppDefine.ModelDirSize;\r\n    this.changeScene(no);\r\n  }\r\n\r\n  /**\r\n   * 장면을 전환하십시오\r\n   * 샘플 응용 프로그램에서 모델 세트를 전환하십시오.\r\n   */\r\n  public changeScene(index: number): void {\r\n    this._sceneIndex = index;\r\n\r\n    if (LAppDefine.DebugLogEnable) {\r\n        LAppPal.printMessage(`[APP]model index: ${this._sceneIndex}`);\r\n    }\r\n\r\n    // ModelDir 배열에서 모델 디렉토리와 JSON 파일 이름 결정\r\n    const model = LAppDefine.ModelDir[index];\r\n    const modelPath = `${LAppDefine.ResourcesPath}${model}/`;\r\n    const modelJsonName = `${model}.model3.json`;\r\n\r\n    // 기존 모델 해제 후 새 모델 로드\r\n    this.releaseAllModel();\r\n    this._models.pushBack(new LAppModel());\r\n    this._models.at(0).loadAssets(modelPath, modelJsonName);\r\n}\r\n\r\n  public setViewMatrix(m: CubismMatrix44) {\r\n    for (let i = 0; i < 16; i++) {\r\n      this._viewMatrix.getArray()[i] = m.getArray()[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 건설자\r\n   */\r\n  constructor() {\r\n    this._viewMatrix = new CubismMatrix44();\r\n    this._models = new csmVector<LAppModel>();\r\n    this._sceneIndex = 0;\r\n    this.changeScene(this._sceneIndex);\r\n  }\r\n\r\n  _viewMatrix: CubismMatrix44; // 모델링에 사용되는 매트릭스를 봅니다\r\n  _models: csmVector<LAppModel>; // 모델 인스턴스 컨테이너\r\n  _sceneIndex: number; // 표시 할 장면의 인덱스 값\r\n  // 모션 재생 끝을위한 콜백 기능\r\n  _finishedMotion = (self: ACubismMotion): void => {\r\n    LAppPal.printMessage('Motion Finished:');\r\n    console.log(self);\r\n  };\r\n}\r\n\r\n(window as any).LAppLive2DManager = LAppLive2DManager;","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { csmVector, iterator } from '@framework/type/csmvector';\r\n\r\nimport { gl } from './lappglmanager';\r\n\r\n/**\r\n * テクスチャ管理クラス\r\n * 画像読み込み、管理を行うクラス。\r\n */\r\nexport class LAppTextureManager {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  constructor() {\r\n    this._textures = new csmVector<TextureInfo>();\r\n  }\r\n\r\n  /**\r\n   * 解放する。\r\n   */\r\n  public release(): void {\r\n    for (\r\n      let ite: iterator<TextureInfo> = this._textures.begin();\r\n      ite.notEqual(this._textures.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      gl.deleteTexture(ite.ptr().id);\r\n    }\r\n    this._textures = null;\r\n  }\r\n\r\n  /**\r\n   * 画像読み込み\r\n   *\r\n   * @param fileName 読み込む画像ファイルパス名\r\n   * @param usePremultiply Premult処理を有効にするか\r\n   * @return 画像情報、読み込み失敗時はnullを返す\r\n   */\r\n  public createTextureFromPngFile(\r\n    fileName: string,\r\n    usePremultiply: boolean,\r\n    callback: (textureInfo: TextureInfo) => void\r\n  ): void {\r\n    // search loaded texture already\r\n    for (\r\n      let ite: iterator<TextureInfo> = this._textures.begin();\r\n      ite.notEqual(this._textures.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      if (\r\n        ite.ptr().fileName == fileName &&\r\n        ite.ptr().usePremultply == usePremultiply\r\n      ) {\r\n        // 2回目以降はキャッシュが使用される(待ち時間なし)\r\n        // WebKitでは同じImageのonloadを再度呼ぶには再インスタンスが必要\r\n        // 詳細：https://stackoverflow.com/a/5024181\r\n        ite.ptr().img = new Image();\r\n        ite\r\n          .ptr()\r\n          .img.addEventListener('load', (): void => callback(ite.ptr()), {\r\n            passive: true\r\n          });\r\n        ite.ptr().img.src = fileName;\r\n        return;\r\n      }\r\n    }\r\n\r\n    // データのオンロードをトリガーにする\r\n    const img = new Image();\r\n    img.addEventListener(\r\n      'load',\r\n      (): void => {\r\n        // テクスチャオブジェクトの作成\r\n        const tex: WebGLTexture = gl.createTexture();\r\n\r\n        // テクスチャを選択\r\n        gl.bindTexture(gl.TEXTURE_2D, tex);\r\n\r\n        // テクスチャにピクセルを書き込む\r\n        gl.texParameteri(\r\n          gl.TEXTURE_2D,\r\n          gl.TEXTURE_MIN_FILTER,\r\n          gl.LINEAR_MIPMAP_LINEAR\r\n        );\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\r\n        // Premult処理を行わせる\r\n        if (usePremultiply) {\r\n          gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\r\n        }\r\n\r\n        // テクスチャにピクセルを書き込む\r\n        gl.texImage2D(\r\n          gl.TEXTURE_2D,\r\n          0,\r\n          gl.RGBA,\r\n          gl.RGBA,\r\n          gl.UNSIGNED_BYTE,\r\n          img\r\n        );\r\n\r\n        // ミップマップを生成\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n\r\n        // テクスチャをバインド\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n        const textureInfo: TextureInfo = new TextureInfo();\r\n        if (textureInfo != null) {\r\n          textureInfo.fileName = fileName;\r\n          textureInfo.width = img.width;\r\n          textureInfo.height = img.height;\r\n          textureInfo.id = tex;\r\n          textureInfo.img = img;\r\n          textureInfo.usePremultply = usePremultiply;\r\n          this._textures.pushBack(textureInfo);\r\n        }\r\n\r\n        callback(textureInfo);\r\n      },\r\n      { passive: true }\r\n    );\r\n    img.src = fileName;\r\n  }\r\n\r\n  /**\r\n   * 画像の解放\r\n   *\r\n   * 配列に存在する画像全てを解放する。\r\n   */\r\n  public releaseTextures(): void {\r\n    for (let i = 0; i < this._textures.getSize(); i++) {\r\n      this._textures.set(i, null);\r\n    }\r\n\r\n    this._textures.clear();\r\n  }\r\n\r\n  /**\r\n   * 画像の解放\r\n   *\r\n   * 指定したテクスチャの画像を解放する。\r\n   * @param texture 解放するテクスチャ\r\n   */\r\n  public releaseTextureByTexture(texture: WebGLTexture): void {\r\n    for (let i = 0; i < this._textures.getSize(); i++) {\r\n      if (this._textures.at(i).id != texture) {\r\n        continue;\r\n      }\r\n\r\n      this._textures.set(i, null);\r\n      this._textures.remove(i);\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 画像の解放\r\n   *\r\n   * 指定した名前の画像を解放する。\r\n   * @param fileName 解放する画像ファイルパス名\r\n   */\r\n  public releaseTextureByFilePath(fileName: string): void {\r\n    for (let i = 0; i < this._textures.getSize(); i++) {\r\n      if (this._textures.at(i).fileName == fileName) {\r\n        this._textures.set(i, null);\r\n        this._textures.remove(i);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  _textures: csmVector<TextureInfo>;\r\n}\r\n\r\n/**\r\n * 画像情報構造体\r\n */\r\nexport class TextureInfo {\r\n  img: HTMLImageElement; // 画像\r\n  id: WebGLTexture = null; // テクスチャ\r\n  width = 0; // 横幅\r\n  height = 0; // 高さ\r\n  usePremultply: boolean; // Premult処理を有効にするか\r\n  fileName: string; // ファイル名\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMatrix44 } from './cubismmatrix44';\r\n\r\n/**\r\n * 4x4 카메라 위치를 변경하는 데 편리한 4x4 행렬\r\n *\r\n * 카메라의 위치를 ​​변경하는 데 편리한 4x4 큐 클래스.\r\n */\r\nexport class CubismViewMatrix extends CubismMatrix44 {\r\n  /**\r\n   * 건설자\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._screenLeft = 0.0;\r\n    this._screenRight = 0.0;\r\n    this._screenTop = 0.0;\r\n    this._screenBottom = 0.0;\r\n    this._maxLeft = 0.0;\r\n    this._maxRight = 0.0;\r\n    this._maxTop = 0.0;\r\n    this._maxBottom = 0.0;\r\n    this._maxScale = 0.0;\r\n    this._minScale = 0.0;\r\n  }\r\n\r\n  /**\r\n   * 움직임을 조정하십시오\r\n   *\r\n   * @param x x- 축 이동량\r\n   * @param y y 축 이동량\r\n   */\r\n  public adjustTranslate(x: number, y: number): void {\r\n    if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {\r\n      x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];\r\n    }\r\n\r\n    if (this._tr[0] * this._maxRight + (this._tr[12] + x) < this._screenRight) {\r\n      x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];\r\n    }\r\n\r\n    if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {\r\n      y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];\r\n    }\r\n\r\n    if (\r\n      this._tr[5] * this._maxBottom + (this._tr[13] + y) >\r\n      this._screenBottom\r\n    ) {\r\n      y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];\r\n    }\r\n\r\n    const tr1: Float32Array = new Float32Array([\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      x,\r\n      y,\r\n      0.0,\r\n      1.0\r\n    ]);\r\n\r\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n  }\r\n\r\n  /**\r\n   * 확대율을 조정하십시오\r\n   *\r\n   * @param cx x 축의 중심이 확장됩니다\r\n   * @param cy 확장 할 y 축의 중심 위치\r\n   * @param scale 확장 속도\r\n   */\r\n  public adjustScale(cx: number, cy: number, scale: number): void {\r\n    const maxScale: number = this.getMaxScale();\r\n    const minScale: number = this.getMinScale();\r\n\r\n    const targetScale = scale * this._tr[0];\r\n\r\n    if (targetScale < minScale) {\r\n      if (this._tr[0] > 0.0) {\r\n        scale = minScale / this._tr[0];\r\n      }\r\n    } else if (targetScale > maxScale) {\r\n      if (this._tr[0] > 0.0) {\r\n        scale = maxScale / this._tr[0];\r\n      }\r\n    }\r\n\r\n    const tr1: Float32Array = new Float32Array([\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      cx,\r\n      cy,\r\n      0.0,\r\n      1.0\r\n    ]);\r\n\r\n    const tr2: Float32Array = new Float32Array([\r\n      scale,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      scale,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0\r\n    ]);\r\n\r\n    const tr3: Float32Array = new Float32Array([\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      -cx,\r\n      -cy,\r\n      0.0,\r\n      1.0\r\n    ]);\r\n\r\n    CubismMatrix44.multiply(tr3, this._tr, this._tr);\r\n    CubismMatrix44.multiply(tr2, this._tr, this._tr);\r\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n  }\r\n\r\n  /**\r\n   * 장치에 해당하는 논리 치료 ​​범위 설정\r\n   *\r\n   * @param left      왼쪽의 x 축의 위치\r\n   * @param right     右辺のX軸の位置\r\n   * @param bottom    하단에있는 y 축의 위치\r\n   * @param top       상단의 y 축의 위치\r\n   */\r\n  public setScreenRect(\r\n    left: number,\r\n    right: number,\r\n    bottom: number,\r\n    top: number\r\n  ): void {\r\n    this._screenLeft = left;\r\n    this._screenRight = right;\r\n    this._screenBottom = bottom;\r\n    this._screenTop = top;\r\n  }\r\n\r\n  /**\r\n   * 장치에 해당하는 논리 좌표 설정.\r\n   * @param left      왼쪽의 x 축의 위치\r\n   * @param right     오른쪽 x 축의 위치\r\n   * @param bottom    하단에있는 y 축의 위치\r\n   * @param top       상단의 y 축의 위치\r\n   */\r\n  public setMaxScreenRect(\r\n    left: number,\r\n    right: number,\r\n    bottom: number,\r\n    top: number\r\n  ): void {\r\n    this._maxLeft = left;\r\n    this._maxRight = right;\r\n    this._maxTop = top;\r\n    this._maxBottom = bottom;\r\n  }\r\n\r\n  /**\r\n   * 최대 확대율 설정\r\n   * @param maxScale 최대 확대율\r\n   */\r\n  public setMaxScale(maxScale: number): void {\r\n    this._maxScale = maxScale;\r\n  }\r\n\r\n  /**\r\n   * 최소 확대율 설정\r\n   * @param minScale 최소 확대율\r\n   */\r\n  public setMinScale(minScale: number): void {\r\n    this._minScale = minScale;\r\n  }\r\n\r\n  /**\r\n   * 최대 확대율 획득\r\n   * @return 최대 확대율\r\n   */\r\n  public getMaxScale(): number {\r\n    return this._maxScale;\r\n  }\r\n\r\n  /**\r\n   * 최소 확대율을 얻으십시오\r\n   * @return 최소 확대율\r\n   */\r\n  public getMinScale(): number {\r\n    return this._minScale;\r\n  }\r\n\r\n  /**\r\n   * 확대율이 최대인지 확인하십시오\r\n   *\r\n   * @return true 최대 확대율\r\n   * @return false 확대율은 가장 크지 않습니다\r\n   */\r\n  public isMaxScale(): boolean {\r\n    return this.getScaleX() >= this._maxScale;\r\n  }\r\n\r\n  /**\r\n   * 확대율이 최소인지 확인하십시오\r\n   *\r\n   * @return true 최소 확장 속도\r\n   * @return false 확대율은 최소가 아닙니다\r\n   */\r\n  public isMinScale(): boolean {\r\n    return this.getScaleX() <= this._minScale;\r\n  }\r\n\r\n  /**\r\n   * 장치에 해당하는 논리 좌표의 왼쪽에서 x 축 위치를 가져옵니다.\r\n   * @return 장치에 해당하는 논리 좌표의 왼쪽에있는 x 축 위치\r\n   */\r\n  public getScreenLeft(): number {\r\n    return this._screenLeft;\r\n  }\r\n\r\n  /**\r\n   * 장치에 해당하는 논리 좌표의 오른쪽에서 x 축 위치를 가져옵니다.\r\n   * @return 장치에 해당하는 논리 좌표의 오른쪽에있는 x 축 위치\r\n   */\r\n  public getScreenRight(): number {\r\n    return this._screenRight;\r\n  }\r\n\r\n  /**\r\n   * 장치에 해당하는 논리 좌표의 하단에서 y 축 위치를 가져옵니다.\r\n   * @return 장치에 해당하는 논리 좌표의 하단에있는 y 축 위치\r\n   */\r\n  public getScreenBottom(): number {\r\n    return this._screenBottom;\r\n  }\r\n\r\n  /**\r\n   * 장치에 해당하는 논리 좌표 상단에서 y 축 위치를 가져옵니다.\r\n   * @return 장치에 해당하는 논리 좌표 상단의 y 축 위치\r\n   */\r\n  public getScreenTop(): number {\r\n    return this._screenTop;\r\n  }\r\n\r\n  /**\r\n   * 왼쪽에서 x 축 위치의 최대 값을 얻습니다.\r\n   * @return 왼쪽에서 x 축 위치의 최대 값\r\n   */\r\n  public getMaxLeft(): number {\r\n    return this._maxLeft;\r\n  }\r\n\r\n  /**\r\n   * 오른쪽에서 x 축 위치의 최대 값을 얻습니다.\r\n   * @return 오른쪽에서 x 축 위치의 최대 값\r\n   */\r\n  public getMaxRight(): number {\r\n    return this._maxRight;\r\n  }\r\n\r\n  /**\r\n   * 하단에서 y 축 위치의 최대 값을 얻으십시오.\r\n   * @return 하단에서 y 축 위치의 최대 값\r\n   */\r\n  public getMaxBottom(): number {\r\n    return this._maxBottom;\r\n  }\r\n\r\n  /**\r\n   * 상단에서 y 축 위치의 최대 값을 얻습니다.\r\n   * @return 상단의 y 축 위치의 최대 값\r\n   */\r\n  public getMaxTop(): number {\r\n    return this._maxTop;\r\n  }\r\n\r\n  private _screenLeft: number; // 장치에 해당하는 논리 좌표 범위 (왼쪽 X 축 위치)\r\n  private _screenRight: number; // 장치에 해당하는 논리 좌표 (오른쪽 X 축 위치)\r\n  private _screenTop: number; // 장치에 해당하는 논리 좌표 범위 (상단 y 축 위치)\r\n  private _screenBottom: number; // 장치에 해당하는 논리 좌표 (하단 y 축 위치)\r\n  private _maxLeft: number; // 로그 좌표 전송 가능한 범위 (왼쪽 X 축 위치)\r\n  private _maxRight: number; // 로그 좌표 이동 범위 (오른쪽 X 축 위치)\r\n  private _maxTop: number; // 이동 가능한 논리 좌표 범위 (상단 y 축 위치)\r\n  private _maxBottom: number; // 논리 좌표의 전송 가능한 범위 (하단 y 축 위치)\r\n  private _maxScale: number; // 확대율의 최대 값\r\n  private _minScale: number; // 확대율의 최소값\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismviewmatrix';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismViewMatrix = $.CubismViewMatrix;\r\n  export type CubismViewMatrix = $.CubismViewMatrix;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { canvas, gl } from './lappglmanager';\r\n\r\n/**\r\n * スプライトを実装するクラス\r\n *\r\n * テクスチャＩＤ、Rectの管理\r\n */\r\nexport class LAppSprite {\r\n  /**\r\n   * コンストラクタ\r\n   * @param x            x座標\r\n   * @param y            y座標\r\n   * @param width        横幅\r\n   * @param height       高さ\r\n   * @param textureId    テクスチャ\r\n   */\r\n  constructor(\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number,\r\n    textureId: WebGLTexture\r\n  ) {\r\n    this._rect = new Rect();\r\n    this._rect.left = x - width * 0.5;\r\n    this._rect.right = x + width * 0.5;\r\n    this._rect.up = y + height * 0.5;\r\n    this._rect.down = y - height * 0.5;\r\n    this._texture = textureId;\r\n    this._vertexBuffer = null;\r\n    this._uvBuffer = null;\r\n    this._indexBuffer = null;\r\n\r\n    this._positionLocation = null;\r\n    this._uvLocation = null;\r\n    this._textureLocation = null;\r\n\r\n    this._positionArray = null;\r\n    this._uvArray = null;\r\n    this._indexArray = null;\r\n\r\n    this._firstDraw = true;\r\n  }\r\n\r\n  /**\r\n   * 解放する。\r\n   */\r\n  public release(): void {\r\n    this._rect = null;\r\n\r\n    gl.deleteTexture(this._texture);\r\n    this._texture = null;\r\n\r\n    gl.deleteBuffer(this._uvBuffer);\r\n    this._uvBuffer = null;\r\n\r\n    gl.deleteBuffer(this._vertexBuffer);\r\n    this._vertexBuffer = null;\r\n\r\n    gl.deleteBuffer(this._indexBuffer);\r\n    this._indexBuffer = null;\r\n  }\r\n\r\n  /**\r\n   * テクスチャを返す\r\n   */\r\n  public getTexture(): WebGLTexture {\r\n    return this._texture;\r\n  }\r\n\r\n  /**\r\n   * 描画する。\r\n   * @param programId シェーダープログラム\r\n   * @param canvas 描画するキャンパス情報\r\n   */\r\n  public render(programId: WebGLProgram): void {\r\n    if (this._texture == null) {\r\n      // ロードが完了していない\r\n      return;\r\n    }\r\n\r\n    // 初回描画時\r\n    if (this._firstDraw) {\r\n      // 何番目のattribute変数か取得\r\n      this._positionLocation = gl.getAttribLocation(programId, 'position');\r\n      gl.enableVertexAttribArray(this._positionLocation);\r\n\r\n      this._uvLocation = gl.getAttribLocation(programId, 'uv');\r\n      gl.enableVertexAttribArray(this._uvLocation);\r\n\r\n      // 何番目のuniform変数か取得\r\n      this._textureLocation = gl.getUniformLocation(programId, 'texture');\r\n\r\n      // uniform属性の登録\r\n      gl.uniform1i(this._textureLocation, 0);\r\n\r\n      // uvバッファ、座標初期化\r\n      {\r\n        this._uvArray = new Float32Array([\r\n          1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0\r\n        ]);\r\n\r\n        // uvバッファを作成\r\n        this._uvBuffer = gl.createBuffer();\r\n      }\r\n\r\n      // 頂点バッファ、座標初期化\r\n      {\r\n        const maxWidth = canvas.width;\r\n        const maxHeight = canvas.height;\r\n\r\n        // 頂点データ\r\n        this._positionArray = new Float32Array([\r\n          (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),\r\n          (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),\r\n          (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),\r\n          (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),\r\n          (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),\r\n          (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5),\r\n          (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),\r\n          (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5)\r\n        ]);\r\n\r\n        // 頂点バッファを作成\r\n        this._vertexBuffer = gl.createBuffer();\r\n      }\r\n\r\n      // 頂点インデックスバッファ、初期化\r\n      {\r\n        // インデックスデータ\r\n        this._indexArray = new Uint16Array([0, 1, 2, 3, 2, 0]);\r\n\r\n        // インデックスバッファを作成\r\n        this._indexBuffer = gl.createBuffer();\r\n      }\r\n\r\n      this._firstDraw = false;\r\n    }\r\n\r\n    // UV座標登録\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._uvBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, this._uvArray, gl.STATIC_DRAW);\r\n\r\n    // attribute属性を登録\r\n    gl.vertexAttribPointer(this._uvLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n    // 頂点座標を登録\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, this._positionArray, gl.STATIC_DRAW);\r\n\r\n    // attribute属性を登録\r\n    gl.vertexAttribPointer(this._positionLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n    // 頂点インデックスを作成\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._indexArray, gl.DYNAMIC_DRAW);\r\n\r\n    // モデルの描画\r\n    gl.bindTexture(gl.TEXTURE_2D, this._texture);\r\n    gl.drawElements(\r\n      gl.TRIANGLES,\r\n      this._indexArray.length,\r\n      gl.UNSIGNED_SHORT,\r\n      0\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 当たり判定\r\n   * @param pointX x座標\r\n   * @param pointY y座標\r\n   */\r\n  public isHit(pointX: number, pointY: number): boolean {\r\n    // 画面サイズを取得する。\r\n    const { height } = canvas;\r\n\r\n    // Y座標は変換する必要あり\r\n    const y = height - pointY;\r\n\r\n    return (\r\n      pointX >= this._rect.left &&\r\n      pointX <= this._rect.right &&\r\n      y <= this._rect.up &&\r\n      y >= this._rect.down\r\n    );\r\n  }\r\n\r\n  _texture: WebGLTexture; // テクスチャ\r\n  _vertexBuffer: WebGLBuffer; // 頂点バッファ\r\n  _uvBuffer: WebGLBuffer; // uv頂点バッファ\r\n  _indexBuffer: WebGLBuffer; // 頂点インデックスバッファ\r\n  _rect: Rect; // 矩形\r\n\r\n  _positionLocation: number;\r\n  _uvLocation: number;\r\n  _textureLocation: WebGLUniformLocation;\r\n\r\n  _positionArray: Float32Array;\r\n  _uvArray: Float32Array;\r\n  _indexArray: Uint16Array;\r\n\r\n  _firstDraw: boolean;\r\n}\r\n\r\nexport class Rect {\r\n  public left: number; // 左辺\r\n  public right: number; // 右辺\r\n  public up: number; // 上辺\r\n  public down: number; // 下辺\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nexport class TouchManager {\r\n  /**\r\n   * 건설자\r\n   */\r\n  constructor() {\r\n    this._startX = 0.0;\r\n    this._startY = 0.0;\r\n    this._lastX = 0.0;\r\n    this._lastY = 0.0;\r\n    this._lastX1 = 0.0;\r\n    this._lastY1 = 0.0;\r\n    this._lastX2 = 0.0;\r\n    this._lastY2 = 0.0;\r\n    this._lastTouchDistance = 0.0;\r\n    this._deltaX = 0.0;\r\n    this._deltaY = 0.0;\r\n    this._scale = 1.0;\r\n    this._touchSingle = false;\r\n    this._flipAvailable = false;\r\n  }\r\n\r\n  public getCenterX(): number {\r\n    return this._lastX;\r\n  }\r\n\r\n  public getCenterY(): number {\r\n    return this._lastY;\r\n  }\r\n\r\n  public getDeltaX(): number {\r\n    return this._deltaX;\r\n  }\r\n\r\n  public getDeltaY(): number {\r\n    return this._deltaY;\r\n  }\r\n\r\n  public getStartX(): number {\r\n    return this._startX;\r\n  }\r\n\r\n  public getStartY(): number {\r\n    return this._startY;\r\n  }\r\n\r\n  public getScale(): number {\r\n    return this._scale;\r\n  }\r\n\r\n  public getX(): number {\r\n    return this._lastX;\r\n  }\r\n\r\n  public getY(): number {\r\n    return this._lastY;\r\n  }\r\n\r\n  public getX1(): number {\r\n    return this._lastX1;\r\n  }\r\n\r\n  public getY1(): number {\r\n    return this._lastY1;\r\n  }\r\n\r\n  public getX2(): number {\r\n    return this._lastX2;\r\n  }\r\n\r\n  public getY2(): number {\r\n    return this._lastY2;\r\n  }\r\n\r\n  public isSingleTouch(): boolean {\r\n    return this._touchSingle;\r\n  }\r\n\r\n  public isFlickAvailable(): boolean {\r\n    return this._flipAvailable;\r\n  }\r\n\r\n  public disableFlick(): void {\r\n    this._flipAvailable = false;\r\n  }\r\n\r\n  /**\r\n   * 터치 시작시 이벤트\r\n   * @param deviceX 터치 된 화면의 x 값\r\n   * @param deviceY 터치 된 화면의 Y 값\r\n   */\r\n  public touchesBegan(deviceX: number, deviceY: number): void {\r\n    this._lastX = deviceX;\r\n    this._lastY = deviceY;\r\n    this._startX = deviceX;\r\n    this._startY = deviceY;\r\n    this._lastTouchDistance = -1.0;\r\n    this._flipAvailable = true;\r\n    this._touchSingle = true;\r\n  }\r\n\r\n  /**\r\n   * 드래그시 이벤트\r\n   * @param deviceX 터치 된 화면의 x 값\r\n   * @param deviceY タッチした画面のyの値\r\n   */\r\n  public touchesMoved(deviceX: number, deviceY: number): void {\r\n    this._lastX = deviceX;\r\n    this._lastY = deviceY;\r\n    this._lastTouchDistance = -1.0;\r\n    this._touchSingle = true;\r\n  }\r\n\r\n  /**\r\n   * 도시 거리 측정\r\n   * @return 플릭 거리\r\n   */\r\n  public getFlickDistance(): number {\r\n    return this.calculateDistance(\r\n      this._startX,\r\n      this._startY,\r\n      this._lastX,\r\n      this._lastY\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 지점 1에서 지점 2까지의 거리를 찾으십시오\r\n   *\r\n   * @param x1 첫 번째 터치 스크린의 x 값\r\n   * @param y1 １つ目のタッチした画面のyの値\r\n   * @param x2 ２つ目のタッチした画面のxの値\r\n   * @param y2 ２つ目のタッチした画面のyの値\r\n   */\r\n  public calculateDistance(\r\n    x1: number,\r\n    y1: number,\r\n    x2: number,\r\n    y2: number\r\n  ): number {\r\n    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\r\n  }\r\n\r\n  /**\r\n   * 두 번째 값에서 움직임의 양이 얻어집니다.\r\n   * 다른 방향에서는 움직임의 양은 0입니다.같은 방향으로 더 작은 절대 값의 값을 참조하십시오.\r\n   *\r\n   * @param v1 첫 번째 움직임의 양\r\n   * @param v2 두 번째 움직임 금액\r\n   *\r\n   * @return 더 작은 움직이는 양\r\n   */\r\n  public calculateMovingAmount(v1: number, v2: number): number {\r\n    if (v1 > 0.0 != v2 > 0.0) {\r\n      return 0.0;\r\n    }\r\n\r\n    const sign: number = v1 > 0.0 ? 1.0 : -1.0;\r\n    const absoluteValue1 = Math.abs(v1);\r\n    const absoluteValue2 = Math.abs(v2);\r\n    return (\r\n      sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2)\r\n    );\r\n  }\r\n\r\n  _startY: number; // 터치시 x 값이 시작될 때\r\n  _startX: number; // y 터치가 시작될 때 가치\r\n  _lastX: number; // 단일 터치의 x 값\r\n  _lastY: number; // y 단일 터치시 가치\r\n  _lastX1: number; // 이중 터치 시점에서 첫 X의 값\r\n  _lastY1: number; // 이중 터치 시점에서 첫 y의 값\r\n  _lastX2: number; // 이중 터치 시점에서 두 번째 X의 값\r\n  _lastY2: number; // 이중 터치 시점에서 두 번째 Y의 값\r\n  _lastTouchDistance: number; // 2 이상으로 만질 때 손가락의 거리는\r\n  _deltaX: number; // 이전 값 에서이 값까지의 X 이동 거리는 x입니다.\r\n  _deltaY: number; // 이전 값 에서이 값으로의 이동 거리.\r\n  _scale: number; // 이 프레임에 곱하는 확대율.1 확대 작업 중에 1.\r\n  _touchSingle: boolean; // 한 번의 터치시 사실\r\n  _flipAvailable: boolean; // 플립이 효과적인지 여부\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMatrix44 } from '@framework/math/cubismmatrix44';\r\nimport { CubismViewMatrix } from '@framework/math/cubismviewmatrix';\r\n\r\nimport * as LAppDefine from './lappdefine';\r\nimport { LAppDelegate } from './lappdelegate';\r\nimport { canvas, gl } from './lappglmanager';\r\nimport { LAppLive2DManager } from './lapplive2dmanager';\r\nimport { LAppPal } from './lapppal';\r\nimport { LAppSprite } from './lappsprite';\r\nimport { TextureInfo } from './lapptexturemanager';\r\nimport { TouchManager } from './touchmanager';\r\n\r\n/**\r\n * 드로잉 클래스.\r\n */\r\nexport class LAppView {\r\n  /**\r\n   * 건설자\r\n   */\r\n  constructor() {\r\n    this._programId = null;\r\n    this._back = null;\r\n    this._gear = null;\r\n\r\n    // 터치 관련 이벤트 관리\r\n    this._touchManager = new TouchManager();\r\n\r\n    // 장치 좌표에서 화면 좌표로 변환합니다\r\n    this._deviceToScreen = new CubismMatrix44();\r\n\r\n    // 화면 디스플레이를 확대하고 줄이고 움직임을 변환하는 행렬\r\n    this._viewMatrix = new CubismViewMatrix();\r\n  }\r\n\r\n  /**\r\n   * 초기화.\r\n   */\r\n  public initialize(): void {\r\n    const { width, height } = canvas;\r\n\r\n    const ratio: number = width / height;\r\n    const left: number = -ratio;\r\n    const right: number = ratio;\r\n    const bottom: number = LAppDefine.ViewLogicalLeft;\r\n    const top: number = LAppDefine.ViewLogicalRight;\r\n\r\n    this._viewMatrix.setScreenRect(left, right, bottom, top); // デバイスに対応する画面の範囲。 Xの左端、Xの右端、Yの下端、Yの上端\r\n    this._viewMatrix.scale(LAppDefine.ViewScale, LAppDefine.ViewScale);\r\n\r\n    this._deviceToScreen.loadIdentity();\r\n    if (width > height) {\r\n      const screenW: number = Math.abs(right - left);\r\n      this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);\r\n    } else {\r\n      const screenH: number = Math.abs(top - bottom);\r\n      this._deviceToScreen.scaleRelative(screenH / height, -screenH / height);\r\n    }\r\n    this._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);\r\n\r\n    // 범위 설정 설정\r\n    this._viewMatrix.setMaxScale(LAppDefine.ViewMaxScale); // 限界拡張率\r\n    this._viewMatrix.setMinScale(LAppDefine.ViewMinScale); // 限界縮小率\r\n\r\n    // 표시 할 수있는 최대 범위\r\n    this._viewMatrix.setMaxScreenRect(\r\n      LAppDefine.ViewLogicalMaxLeft,\r\n      LAppDefine.ViewLogicalMaxRight,\r\n      LAppDefine.ViewLogicalMaxBottom,\r\n      LAppDefine.ViewLogicalMaxTop\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 풀어 주다\r\n   */\r\n  public release(): void {\r\n    this._viewMatrix = null;\r\n    this._touchManager = null;\r\n    this._deviceToScreen = null;\r\n\r\n    this._gear.release();\r\n    this._gear = null;\r\n\r\n    this._back.release();\r\n    this._back = null;\r\n\r\n    gl.deleteProgram(this._programId);\r\n    this._programId = null;\r\n  }\r\n\r\n  /**\r\n   * 그리다.\r\n   */\r\n  public render(): void {\r\n    gl.useProgram(this._programId);\r\n\r\n    if (this._back) {\r\n      this._back.render(this._programId);\r\n    }\r\n    if (this._gear) {\r\n      this._gear.render(this._programId);\r\n    }\r\n\r\n    gl.flush();\r\n\r\n    const live2DManager: LAppLive2DManager = LAppLive2DManager.getInstance();\r\n\r\n    live2DManager.setViewMatrix(this._viewMatrix);\r\n\r\n    live2DManager.onUpdate();\r\n  }\r\n\r\n  /**\r\n   * 이미지를 초기화하십시오.\r\n   */\r\n  public initializeSprite(): void {\r\n    const width: number = canvas.width;\r\n    const height: number = canvas.height;\r\n\r\n    const textureManager = LAppDelegate.getInstance().getTextureManager();\r\n    const resourcesPath = LAppDefine.ResourcesPath;\r\n\r\n    // let imageName = '';\r\n\r\n    // 배경 이미지 초기화\r\n    // imageName = LAppDefine.BackImageName;\r\n\r\n    // 콜백 함수는 비동기식이므로 만듭니다\r\n    /*\r\n    const initBackGroundTexture = (textureInfo: TextureInfo): void => {\r\n      const x: number = width * 0.5;\r\n      const y: number = height * 0.5;\r\n\r\n      const fwidth = textureInfo.width * 2.0;\r\n      const fheight = height * 0.95;\r\n      this._back = new LAppSprite(x, y, fwidth, fheight, textureInfo.id);\r\n    };\r\n\r\n    textureManager.createTextureFromPngFile(\r\n      resourcesPath + imageName,\r\n      false,\r\n      initBackGroundTexture\r\n    );\r\n    */\r\n\r\n    // 기어 이미지 초기화\r\n    let imageName = LAppDefine.GearImageName;\r\n    const initGearTexture = (textureInfo: TextureInfo): void => {\r\n      const x = width - textureInfo.width * 0.5;\r\n      const y = height - textureInfo.height * 0.5;\r\n      const fwidth = textureInfo.width;\r\n      const fheight = textureInfo.height;\r\n      this._gear = new LAppSprite(x, y, fwidth, fheight, textureInfo.id);\r\n    };\r\n\r\n    textureManager.createTextureFromPngFile(\r\n      resourcesPath + imageName,\r\n      false,\r\n      initGearTexture\r\n    );\r\n\r\n    // 셰이더를 만듭니다\r\n    if (this._programId == null) {\r\n      this._programId = LAppDelegate.getInstance().createShader();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 만질 때 호출.\r\n   *\r\n   * @param pointX 스크린 X 좌표\r\n   * @param pointY 화면 Y 좌표\r\n   */\r\n  public onTouchesBegan(pointX: number, pointY: number): void {\r\n    this._touchManager.touchesBegan(\r\n      pointX * window.devicePixelRatio,\r\n      pointY * window.devicePixelRatio\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 접촉하는 동안 포인터가 움직이면 호출됩니다.\r\n   *\r\n   * @param pointX 스크린 X 좌표\r\n   * @param pointY 화면 Y 좌표\r\n   */\r\n  public onTouchesMoved(pointX: number, pointY: number): void {\r\n    const viewX: number = this.transformViewX(this._touchManager.getX());\r\n    const viewY: number = this.transformViewY(this._touchManager.getY());\r\n\r\n    this._touchManager.touchesMoved(\r\n      pointX * window.devicePixelRatio,\r\n      pointY * window.devicePixelRatio\r\n    );\r\n\r\n    const live2DManager: LAppLive2DManager = LAppLive2DManager.getInstance();\r\n    live2DManager.onDrag(viewX, viewY);\r\n  }\r\n\r\n  /**\r\n   * 터치가 끝나면 호출됩니다.\r\n   *\r\n   * @param pointX 스크린 X 좌표\r\n   * @param pointY スクリーンY座標\r\n   */\r\n  public onTouchesEnded(pointX: number, pointY: number): void {\r\n    // タッチ終了\r\n    const live2DManager: LAppLive2DManager = LAppLive2DManager.getInstance();\r\n    live2DManager.onDrag(0.0, 0.0);\r\n\r\n    {\r\n      // 단일 탭\r\n      const x: number = this._deviceToScreen.transformX(\r\n        this._touchManager.getX()\r\n      ); // 논리 좌표가 변환 좌표를 가져옵니다.\r\n      const y: number = this._deviceToScreen.transformY(\r\n        this._touchManager.getY()\r\n      ); // 논리적 좌표를 변경 한 획득 한 좌표.\r\n\r\n      if (LAppDefine.DebugTouchLogEnable) {\r\n        LAppPal.printMessage(`[APP]touchesEnded x: ${x} y: ${y}`);\r\n      }\r\n      live2DManager.onTap(x, y);\r\n\r\n      // 기어를 탭 했습니까?\r\n      if (\r\n        this._gear.isHit(\r\n          pointX * window.devicePixelRatio,\r\n          pointY * window.devicePixelRatio\r\n        )\r\n      ) {\r\n        live2DManager.nextScene();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X 좌표를 볼 수 있도록 좌표.\r\n   *\r\n   * @param deviceX 장치 X 좌표\r\n   */\r\n  public transformViewX(deviceX: number): number {\r\n    const screenX: number = this._deviceToScreen.transformX(deviceX); // 논리 좌표가 변환 좌표를 가져옵니다.\r\n    return this._viewMatrix.invertTransformX(screenX); // 확장, 감소 및 사후 제동 값.\r\n  }\r\n\r\n  /**\r\n   * y 좌표를 변환하여 좌표를 봅니다.\r\n   *\r\n   * @param deviceY デバイスY座標\r\n   */\r\n  public transformViewY(deviceY: number): number {\r\n    const screenY: number = this._deviceToScreen.transformY(deviceY); // 論理座標変換した座標を取得。\r\n    return this._viewMatrix.invertTransformY(screenY);\r\n  }\r\n\r\n  /**\r\n   * X座標をScreen座標に変換する。\r\n   * @param deviceX デバイスX座標\r\n   */\r\n  public transformScreenX(deviceX: number): number {\r\n    return this._deviceToScreen.transformX(deviceX);\r\n  }\r\n\r\n  /**\r\n   * Y座標をScreen座標に変換する。\r\n   *\r\n   * @param deviceY デバイスY座標\r\n   */\r\n  public transformScreenY(deviceY: number): number {\r\n    return this._deviceToScreen.transformY(deviceY);\r\n  }\r\n\r\n  _touchManager: TouchManager; // 터치 매니저\r\n  _deviceToScreen: CubismMatrix44; // 장치에서 화면으로의 매트릭스\r\n  _viewMatrix: CubismViewMatrix; // viewMatrix\r\n  _programId: WebGLProgram; // 셰이더 ID\r\n  _back: LAppSprite; // 배경 이미지\r\n  _gear: LAppSprite; // 기어 이미지\r\n  _changeModel: boolean; // 모델 스위칭 플래그\r\n  _isClick: boolean; // 클릭\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismFramework, Option } from '@framework/live2dcubismframework';\r\n\r\nimport * as LAppDefine from './lappdefine';\r\nimport { LAppLive2DManager } from './lapplive2dmanager';\r\nimport { LAppPal } from './lapppal';\r\nimport { LAppTextureManager } from './lapptexturemanager';\r\nimport { LAppView } from './lappview';\r\nimport { canvas, gl } from './lappglmanager';\r\n\r\nexport let s_instance: LAppDelegate = null;\r\nexport let frameBuffer: WebGLFramebuffer = null;\r\n\r\n/**\r\n * 응용 프로그램 클래스.\r\n* 입체파 SDK 관리.\r\n */\r\nexport class LAppDelegate {\r\n  /**\r\n   * 클래스 인스턴스 (싱글 톤)를 반환합니다.\r\n  * 인스턴스가 생성되지 않으면 인스턴스가 내부에 생성됩니다.\r\n  *\r\n   * @return 수업 인스턴스\r\n   */\r\n  public static getInstance(): LAppDelegate {\r\n    if (s_instance == null) {\r\n      s_instance = new LAppDelegate();\r\n    }\r\n\r\n    return s_instance;\r\n  }\r\n\r\n  /**\r\n   * 클래스의 인스턴스 (싱글 톤)를 해제하십시오.\r\n   */\r\n  public static releaseInstance(): void {\r\n    if (s_instance != null) {\r\n      s_instance.release();\r\n    }\r\n\r\n    s_instance = null;\r\n  }\r\n\r\n  /**\r\n   * 앱에 필요한 항목을 초기화하십시오.\r\n   */\r\n  public initialize(): boolean {\r\n    // DOM에 캔버스를 추가하십시오\r\n    document.body.appendChild(canvas);\r\n\r\n    if (LAppDefine.CanvasSize === 'auto') {\r\n      this._resizeCanvas();\r\n    } else {\r\n      canvas.width = LAppDefine.CanvasSize.width;\r\n      canvas.height = LAppDefine.CanvasSize.height;\r\n    }\r\n\r\n    if (!frameBuffer) {\r\n      frameBuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\r\n    }\r\n\r\n    // 세트\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n    const supportTouch: boolean = 'ontouchend' in canvas;\r\n\r\n    if (supportTouch) {\r\n      // 터치 -관련 콜백 함수 등록\r\n      canvas.addEventListener('touchstart', onTouchBegan, { passive: true });\r\n      canvas.addEventListener('touchmove', onTouchMoved, { passive: true });\r\n      canvas.addEventListener('touchend', onTouchEnded, { passive: true });\r\n      canvas.addEventListener('touchcancel', onTouchCancel, { passive: true });\r\n    } else {\r\n      // 마우스 관련 콜백 함수 등록\r\n      canvas.addEventListener('mousedown', onClickBegan, { passive: true });\r\n      canvas.addEventListener('mousemove', onMouseMoved, { passive: true });\r\n      canvas.addEventListener('mouseup', onClickEnded, { passive: true });\r\n    }\r\n\r\n    // AppView초기화\r\n    this._view.initialize();\r\n\r\n    // Cubism SDK초기화\r\n    this.initializeCubism();\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Resize canvas and re-initialize view.\r\n   */\r\n  public onResize(): void {\r\n    this._resizeCanvas();\r\n    this._view.initialize();\r\n    this._view.initializeSprite();\r\n  }\r\n\r\n  /**\r\n   * 풀어 주다.\r\n   */\r\n  public release(): void {\r\n    this._textureManager.release();\r\n    this._textureManager = null;\r\n\r\n    this._view.release();\r\n    this._view = null;\r\n\r\n    // 릴리스 리소스\r\n    LAppLive2DManager.releaseInstance();\r\n\r\n    // Cubism SDK해방\r\n    CubismFramework.dispose();\r\n  }\r\n\r\n  /**\r\n   * 실행 프로세스.\r\n   */\r\n  public run(): void {\r\n    // 메인 루프\r\n    const loop = (): void => {\r\n      // 인스턴스 확인\r\n      if (s_instance == null) {\r\n        return;\r\n      }\r\n\r\n      // 시간 업데이트\r\n      LAppPal.updateTime();\r\n\r\n      //화면 초기화\r\n      gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n\r\n      // 깊이 테스트를 활성화합니다\r\n      gl.enable(gl.DEPTH_TEST);\r\n\r\n      //근처의 물체는 먼 물체를 덮습니다\r\n      gl.depthFunc(gl.LEQUAL);\r\n\r\n      // 투명한 색상 버퍼 및 깊이 버퍼\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n      gl.clearDepth(1.0);\r\n\r\n      // 세트\r\n      gl.enable(gl.BLEND);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n      // 그리기 업데이트\r\n      this._view.render();\r\n\r\n      // 재귀 요청 루프\r\n      requestAnimationFrame(loop);\r\n    };\r\n    loop();\r\n  }\r\n\r\n  /**\r\n   * 셰이더를 등록하십시오.\r\n   */\r\n  public createShader(): WebGLProgram {\r\n    // Bartex 셰이더 컴파일\r\n    const vertexShaderId = gl.createShader(gl.VERTEX_SHADER);\r\n\r\n    if (vertexShaderId == null) {\r\n      LAppPal.printMessage('failed to create vertexShader');\r\n      return null;\r\n    }\r\n\r\n    const vertexShader: string =\r\n      'precision mediump float;' +\r\n      'attribute vec3 position;' +\r\n      'attribute vec2 uv;' +\r\n      'varying vec2 vuv;' +\r\n      'void main(void)' +\r\n      '{' +\r\n      '   gl_Position = vec4(position, 1.0);' +\r\n      '   vuv = uv;' +\r\n      '}';\r\n\r\n    gl.shaderSource(vertexShaderId, vertexShader);\r\n    gl.compileShader(vertexShaderId);\r\n\r\n    // 조각 셰이더 컴파일\r\n    const fragmentShaderId = gl.createShader(gl.FRAGMENT_SHADER);\r\n\r\n    if (fragmentShaderId == null) {\r\n      LAppPal.printMessage('failed to create fragmentShader');\r\n      return null;\r\n    }\r\n\r\n    const fragmentShader: string =\r\n      'precision mediump float;' +\r\n      'varying vec2 vuv;' +\r\n      'uniform sampler2D texture;' +\r\n      'void main(void)' +\r\n      '{' +\r\n      '   gl_FragColor = texture2D(texture, vuv);' +\r\n      '}';\r\n\r\n    gl.shaderSource(fragmentShaderId, fragmentShader);\r\n    gl.compileShader(fragmentShaderId);\r\n\r\n    // 프로그램 개체 생성\r\n    const programId = gl.createProgram();\r\n    gl.attachShader(programId, vertexShaderId);\r\n    gl.attachShader(programId, fragmentShaderId);\r\n\r\n    gl.deleteShader(vertexShaderId);\r\n    gl.deleteShader(fragmentShaderId);\r\n\r\n    //링크\r\n    gl.linkProgram(programId);\r\n\r\n    gl.useProgram(programId);\r\n\r\n    return programId;\r\n  }\r\n\r\n  /**\r\n   *보기 정보를 얻으십시오.\r\n   */\r\n  public getView(): LAppView {\r\n    return this._view;\r\n  }\r\n\r\n  public getTextureManager(): LAppTextureManager {\r\n    return this._textureManager;\r\n  }\r\n\r\n  /**\r\n   * 건설자\r\n   */\r\n  constructor() {\r\n    this._captured = false;\r\n    this._mouseX = 0.0;\r\n    this._mouseY = 0.0;\r\n    this._isEnd = false;\r\n\r\n    this._cubismOption = new Option();\r\n    this._view = new LAppView();\r\n    this._textureManager = new LAppTextureManager();\r\n  }\r\n\r\n  /**\r\n   * Cubism SDK초기화\r\n   */\r\n  public initializeCubism(): void {\r\n    // setup cubism\r\n    this._cubismOption.logFunction = LAppPal.printMessage;\r\n    this._cubismOption.loggingLevel = LAppDefine.CubismLoggingLevel;\r\n    CubismFramework.startUp(this._cubismOption);\r\n\r\n    // initialize cubism\r\n    CubismFramework.initialize();\r\n\r\n    // load model\r\n    LAppLive2DManager.getInstance();\r\n\r\n    LAppPal.updateTime();\r\n\r\n    this._view.initializeSprite();\r\n  }\r\n\r\n  /**\r\n   * Resize the canvas to fill the screen.\r\n   */\r\n  private _resizeCanvas(): void {\r\n    canvas.width = canvas.clientWidth * window.devicePixelRatio;\r\n    canvas.height = canvas.clientHeight * window.devicePixelRatio;\r\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n  }\r\n\r\n  _cubismOption: Option; // Cubism SDK Option\r\n  _view: LAppView; // View情報\r\n  _captured: boolean; // クリックしているか\r\n  _mouseX: number; // 마우스 x 좌표\r\n  _mouseY: number; // 마우스 Y 좌표\r\n  _isEnd: boolean; // 앱이 끝났습니까?\r\n  _textureManager: LAppTextureManager; // 텍스처 관리자\r\n}\r\n\r\n/**\r\n * 클릭하면 호출됩니다.\r\n */\r\nfunction onClickBegan(e: MouseEvent): void {\r\n  if (!LAppDelegate.getInstance()._view) {\r\n    LAppPal.printMessage('view notfound');\r\n    return;\r\n  }\r\n  LAppDelegate.getInstance()._captured = true;\r\n\r\n  const posX: number = e.pageX;\r\n  const posY: number = e.pageY;\r\n\r\n  LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\r\n}\r\n\r\n/**\r\n * 마우스 포인터가 움직이면 호출됩니다.\r\n */\r\nfunction onMouseMoved(e: MouseEvent): void {\r\n  if (!LAppDelegate.getInstance()._captured) {\r\n    return;\r\n  }\r\n\r\n  if (!LAppDelegate.getInstance()._view) {\r\n    LAppPal.printMessage('view notfound');\r\n    return;\r\n  }\r\n\r\n  const rect = (e.target as Element).getBoundingClientRect();\r\n  const posX: number = e.clientX - rect.left;\r\n  const posY: number = e.clientY - rect.top;\r\n\r\n  LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\r\n}\r\n\r\n/**\r\n * 클릭이 완료되면 호출됩니다.\r\n */\r\nfunction onClickEnded(e: MouseEvent): void {\r\n  LAppDelegate.getInstance()._captured = false;\r\n  if (!LAppDelegate.getInstance()._view) {\r\n    LAppPal.printMessage('view notfound');\r\n    return;\r\n  }\r\n\r\n  const rect = (e.target as Element).getBoundingClientRect();\r\n  const posX: number = e.clientX - rect.left;\r\n  const posY: number = e.clientY - rect.top;\r\n\r\n  LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\r\n}\r\n\r\n/**\r\n * 만질 때 호출.\r\n */\r\nfunction onTouchBegan(e: TouchEvent): void {\r\n  if (!LAppDelegate.getInstance()._view) {\r\n    LAppPal.printMessage('view notfound');\r\n    return;\r\n  }\r\n\r\n  LAppDelegate.getInstance()._captured = true;\r\n\r\n  const posX = e.changedTouches[0].pageX;\r\n  const posY = e.changedTouches[0].pageY;\r\n\r\n  LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\r\n}\r\n\r\n/**\r\n * 스 와이프라고합니다.\r\n */\r\nfunction onTouchMoved(e: TouchEvent): void {\r\n  if (!LAppDelegate.getInstance()._captured) {\r\n    return;\r\n  }\r\n\r\n  if (!LAppDelegate.getInstance()._view) {\r\n    LAppPal.printMessage('view notfound');\r\n    return;\r\n  }\r\n\r\n  const rect = (e.target as Element).getBoundingClientRect();\r\n\r\n  const posX = e.changedTouches[0].clientX - rect.left;\r\n  const posY = e.changedTouches[0].clientY - rect.top;\r\n\r\n  LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\r\n}\r\n\r\n/**\r\n * 터치가 끝나면 호출됩니다.\r\n */\r\nfunction onTouchEnded(e: TouchEvent): void {\r\n  LAppDelegate.getInstance()._captured = false;\r\n\r\n  if (!LAppDelegate.getInstance()._view) {\r\n    LAppPal.printMessage('view notfound');\r\n    return;\r\n  }\r\n\r\n  const rect = (e.target as Element).getBoundingClientRect();\r\n\r\n  const posX = e.changedTouches[0].clientX - rect.left;\r\n  const posY = e.changedTouches[0].clientY - rect.top;\r\n\r\n  LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\r\n}\r\n\r\n/**\r\n * 터치가 취소됩니다.\r\n */\r\nfunction onTouchCancel(e: TouchEvent): void {\r\n  LAppDelegate.getInstance()._captured = false;\r\n\r\n  if (!LAppDelegate.getInstance()._view) {\r\n    LAppPal.printMessage('view notfound');\r\n    return;\r\n  }\r\n\r\n  const rect = (e.target as Element).getBoundingClientRect();\r\n\r\n  const posX = e.changedTouches[0].clientX - rect.left;\r\n  const posY = e.changedTouches[0].clientY - rect.top;\r\n\r\n  LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { LAppDelegate } from './lappdelegate';\r\nimport * as LAppDefine from './lappdefine';\r\nimport { LAppGlManager } from './lappglmanager';\r\n\r\n/**\r\n * 브라우저로드 후 처리\r\n */\r\nwindow.addEventListener(\r\n  'load',\r\n  (): void => {\r\n    // Initialize WebGL and create the application instance\r\n    if (\r\n      !LAppGlManager.getInstance() ||\r\n      !LAppDelegate.getInstance().initialize()\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    LAppDelegate.getInstance().run();\r\n  },\r\n  { passive: true }\r\n);\r\n\r\n/**\r\n * 종료시의 처리\r\n */\r\nwindow.addEventListener(\r\n  'beforeunload',\r\n  (): void => LAppDelegate.releaseInstance(),\r\n  { passive: true }\r\n);\r\n\r\n/**\r\n * Process when changing screen size.\r\n */\r\nwindow.addEventListener(\r\n  'resize',\r\n  () => {\r\n    if (LAppDefine.CanvasSize === 'auto') {\r\n      LAppDelegate.getInstance().onResize();\r\n    }\r\n  },\r\n  { passive: true }\r\n);\r\n"],"names":["_csmVector","initialCapacity","index","value","offset","ret","newSize","i","callPlacementNew","sub","position","begin","end","dstSi","srcSi","srcEi","addCount","addSize","ite","iterator","newVector","csmVector","iterator$1","v","Live2DCubismFramework","$.csmVector","$.iterator","csmString","c","length","s","$.csmString","CubismId","id","$.CubismId","CubismIdManager","ids","result","$.CubismIdManager","CubismMatrix44","a","b","dst","n","j","k","tr","src","x","y","tr1","m","cloneMatrix","$.CubismMatrix44","csmRect","w","h","r","$.csmRect","CubismRenderer","renderer","model","matrix44","red","green","blue","alpha","opacity","modelColorRGBA","enable","culling","high","CubismTextureColor","CubismBlendMode","g","CubismClippingContext","clippingDrawableIndices","clipCount","drawableIndex","$.CubismBlendMode","$.CubismRenderer","$.CubismTextureColor","CubismLogPrint","level","fmt","args","CubismDebug","CubismLogPrintIn","CSM_ASSERT","expr","CubismLogDebug","CubismLogInfo","CubismLogWarning","CubismLogError","LogLevel","logLevel","format","CubismFramework","logPrint","buffer","data","$.CubismDebug","csmPair","key","_csmMap","size","found","fitToSize","csmMap","idx","iteold","$.csmMap","$.csmPair","CubismJsonExtension","obj","map","convValue","JsonBoolean","JsonString","JsonFloat","JsonMap","JsonNullvalue","arr","JsonArray","CSM_JSON_ERROR_TYPE_MISMATCH","CSM_JSON_ERROR_INDEX_OF_BOUNDS","Value$2","Value","defaultValue","indent","errorStr","JsonError","CubismJson","json","instance","uint8Array","str","len","parseCallback","endPos","decodeBuffer","strbuf","outEndPos","o","f","afterString","strtod","string","c2","bufStart","localRetEndPos2","ok","FOR_LOOP","FOR_LOOP2","FOR_LOOP3","localRetEndpos2","isStatic","stringBuffer","iter","$.CubismJson","$.JsonArray","$.JsonBoolean","$.JsonError","$.JsonFloat","$.JsonMap","$.JsonNullvalue","$.JsonString","$.Value","endPtr","testC","test","number","d","s_isStarted","s_isInitialized","s_option","s_cubismIdManager","Constant","csmDelete","address","option","version","major","minor","patch","versionNumber","memorySize","message","Option","LogLevel2","$.Constant","$.csmDelete","$.CubismFramework","ViewScale","ViewMaxScale","ViewMinScale","ViewLogicalLeft","ViewLogicalRight","ViewLogicalMaxLeft","ViewLogicalMaxRight","ViewLogicalMaxBottom","ViewLogicalMaxTop","ResourcesPath","GearImageName","ModelDir","ModelDirSize","MotionGroupIdle","MotionGroupTapBody","HitAreaNameHead","HitAreaNameBody","PriorityIdle","PriorityNormal","PriorityForce","CubismLoggingLevel","canvas","gl","s_instance","LAppGlManager","CubismDefaultParameterId","$.CubismDefaultParameterId","ICubismModelSetting","$.ICubismModelSetting","FileReferences","Groups","Layout","HitAreas","Moc","Textures","Physics","Pose","Expressions","Motions","UserData","Name","FilePath","Id","Ids","SoundPath","FadeInTime","FadeOutTime","LipSync","EyeBlink","CubismModelSettingJson","pathArray","arrayLength","textureDirectoryStr","groupName","outLayoutMap","num","refI","node","$.CubismModelSettingJson","CubismBreath","breathParameters","deltaTimeSeconds","t","BreathParameterData","parameterId","peak","cycle","weight","$.BreathParameterData","$.CubismBreath","_CubismEyeBlink","modelSetting","eyeBlink","blinkingInterval","closing","closed","opening","parameterIds","parameterValue","CubismEyeBlink","EyeState","EyeState2","$.CubismEyeBlink","$.EyeState","Epsilon","DefaultFadeInSeconds","FadeIn","Link","CubismPose","pose3json","root","poseListInfo","poseCount","poseIndex","idListInfo","idCount","groupCount","groupIndex","partInfo","partData","PartData","linkListInfo","linkCount","linkIndex","linkPart","linkId","pose","beginIndex","partGroupCount","partsIndex","paramIndex","partIndex","linkPartIndex","visiblePartIndex","newOpacity","phi","backOpacityThreshold","a1","clonePartData","$.CubismPose","$.PartData","CubismModelMatrix","scaleX","scaleY","layout","keyWidth","keyHeight","keyX","keyY","keyCenterX","keyCenterY","keyTop","keyBottom","keyLeft","keyRight","$.CubismModelMatrix","CubismVector2","vector2","scalar","rhs","$.CubismVector2","_CubismMath","min","max","cx","isNegativeNumber","left","right","degrees","radian","from","to","q1","q2","degree","totalAngle","ba","ca","da","p","p3","q","discriminant","center","threshold","mp3","mp33","cosphi","t1","root1","root2","root3","u1","sd","v1","dividend","divisor","absDividend","absDivisor","CubismMath","$.CubismMath","FrameRate","CubismTargetPoint","maxV","deltaTimeWeight","frameToMaxSpeed","maxA","dx","dy","vx","vy","ax","ay","curV","$.CubismTargetPoint","ACubismMotion","onFinishedMotionHandler","motion","motionQueueEntry","userTimeSeconds","fadeWeight","duration","fadeIn","fadeOut","fadeInSeconds","fadeOutSeconds","offsetSeconds","beforeCheckTimeSeconds","motionTimeSeconds","$.ACubismMotion","ExpressionKeyFadeIn","ExpressionKeyFadeOut","ExpressionKeyParameters","ExpressionKeyId","ExpressionKeyValue","ExpressionKeyBlend","BlendValueAdd","BlendValueMultiply","BlendValueOverwrite","DefaultFadeTime","_CubismExpressionMotion","expression","parameter","expressionParameterValues","expressionIndex","expressionParameterValue","currentParameterValue","expressionParameters","parameterIndex","newAdditiveValue","newMultiplyValue","newOverwriteValue","parameterCount","param","blendType","item","ExpressionParameter","source","destination","CubismExpressionMotion","ExpressionBlendType","$.CubismExpressionMotion","$.ExpressionBlendType","$.ExpressionParameter","CubismMotionQueueEntry","newEndTimeSeconds","startTime","endTime","timeSeconds","checkSeconds","$.CubismMotionQueueEntry","CubismMotionQueueManager","autoDelete","InvalidMotionQueueEntryHandleValue","motionQueueEntryNumber","callback","customData","updated","firedList","$.CubismMotionQueueManager","$.InvalidMotionQueueEntryHandleValue","ExpressionParameterValue","CubismExpressionMotionManager","priority","motions","expressionWeight","expressionMotion","$.CubismExpressionMotionManager","CubismMotionCurveTarget","CubismMotionCurveTarget2","CubismMotionSegmentType","CubismMotionPoint","CubismMotionSegment","CubismMotionCurve","CubismMotionEvent","CubismMotionData","$.CubismMotionCurve","$.CubismMotionCurveTarget","$.CubismMotionData","$.CubismMotionEvent","$.CubismMotionPoint","$.CubismMotionSegment","$.CubismMotionSegmentType","Meta","Duration","Loop","AreBeziersRestricted","CurveCount","Fps","TotalSegmentCount","TotalPointCount","Curves","Target","Segments","UserDataCount","TotalUserDataSize","Time","CubismMotionJson","flagType","curveIndex","segmentIndex","userDataIndex","EvaluationOptionFlag","$.CubismMotionJson","EffectNameEyeBlink","EffectNameLipSync","TargetNameModel","TargetNameParameter","TargetNamePartOpacity","IdNameOpacity","UseOldBeziersCurveMotion","lerpPoints","linearEvaluate","points","time","bezierEvaluate","p01","p12","p23","p012","p123","bezierEvaluateCardanoInterpretation","x1","x2","cx1","cx2","steppedEvaluate","inverseSteppedEvaluate","evaluateCurve","motionData","curve","target","totalSegmentCount","pointPosition","segment","CubismMotion","timeOffsetSeconds","lipSyncValue","eyeBlinkValue","maxTargetSize","lipSyncFlags","eyeBlinkFlags","tmpFadeIn","tmpFadeOut","curves","sourceValue","fin","fout","paramWeight","loop","loopFadeIn","eyeBlinkParameterIds","lipSyncParameterIds","motionJson","areBeziersRestructed","totalPointCount","curveCount","segmentPosition","userdatacount","u","$.CubismMotion","CubismMotionManager","val","$.CubismMotionManager","CubismPhysicsTargetType","CubismPhysicsTargetType2","CubismPhysicsSource","CubismPhysicsSource2","PhysicsJsonEffectiveForces","CubismPhysicsParameter","CubismPhysicsNormalization","CubismPhysicsParticle","CubismPhysicsSubRig","CubismPhysicsInput","CubismPhysicsOutput","CubismPhysicsRig","$.CubismPhysicsInput","$.CubismPhysicsNormalization","$.CubismPhysicsOutput","$.CubismPhysicsParameter","$.CubismPhysicsParticle","$.CubismPhysicsRig","$.CubismPhysicsSource","$.CubismPhysicsSubRig","$.CubismPhysicsTargetType","$.PhysicsJsonEffectiveForces","Position","X","Y","Angle","Type","EffectiveForces","TotalInputCount","TotalOutputCount","PhysicsSettingCount","Gravity","Wind","VertexCount","PhysicsSettings","Normalization","Minimum","Maximum","Default","Reflect","Weight","Input","Source","Output","Scale","VertexIndex","Destination","Vertices","Mobility","Delay","Radius","Acceleration","CubismPhysicsJson","physicsSettingIndex","inputIndex","outputIndex","vertexIndex","$.CubismPhysicsJson","PhysicsTypeTagX","PhysicsTypeTagY","PhysicsTypeTagAngle","AirResistance","MaximumWeight","MovementThreshold","MaxDeltaTime","CubismPhysics","physics","physicsJson","particleIndex","getInputTranslationXFromNormalizedParameterValue","getInputTranslationYFromNormalizedParamterValue","getInputAngleFromNormalizedParameterValue","currentRigOutput","PhysicsOutput","previousRigOutput","getOutputTranslationX","getOutputScaleTranslationX","getOutputTranslationY","getOutputScaleTranslationY","getOutputAngle","getOutputScaleAngle","radAngle","outputValue","totalTranslation","currentSetting","currentInputs","currentOutputs","currentParticles","parameterValues","parameterMaximumValues","parameterMinimumValues","parameterDefaultValues","_a","_b","settingIndex","updateParticlesForStabilization","translation","destinationParameterIndex","outParameterCaches","updateOutputParameterValue","outParamIndex","physicsDeltaTime","inputWeight","updateParticles","outParameterValues","options","Options","strand","radius","sign","targetTranslation","targetAngle","parameterMinimumValue","parameterMaximumValue","parameterDefaultValue","normalizationPosition","normalizationAngle","isInverted","normalizeParameterValue","normalizaitionPosition","particles","parentGravity","getRangeValue","maxValue","minValue","getDefaultValue","translationScale","angleScale","strandCount","windDirection","thresholdValue","airResistance","delay","direction","velocity","force","newDirection","totalRadian","currentGravity","parameterValueMinimum","parameterValueMaximum","output","outputScale","parameterMinimum","parameterMaximum","parameterDefault","normalizedMinimum","normalizedMaximum","normalizedDefault","minNormValue","maxNormValue","middleNormValue","middleValue","paramValue","nLength","pLength","$.CubismPhysics","$.Options","ColorChannelCount","ClippingMaskMaxCountOnDefault","ClippingMaskMaxCountOnMultiRenderTexture","CubismClippingManager","clippingContextFactory","tmp","renderTextureCount","clippingContext","drawableMasks","drawableMaskCounts","count","sameCount","clipId","isRightHanded","usingClipCount","clipIndex","cc","clipContext","allClippedDrawRect","layoutBoundsOnTex01","margin","ppu","maskPixelSize","physicalMaskWidth","physicalMaskHeight","useClippingMaskMaxCount","layoutCountMaxValue","countPerSheetDiv","reduceLayoutTextureCount","divCount","modCount","curClipIndex","renderTextureIndex","channelIndex","layoutCount","checkChannelIndex","xpos","ypos","clippedDrawTotalMinX","clippedDrawTotalMinY","clippedDrawTotalMaxX","clippedDrawTotalMaxY","clippedDrawCount","clippedDrawableIndex","drawableVertexCount","drawableVertexes","minX","minY","maxX","maxY","pi","channelNo","ShaderCount","CubismShader_WebGL","srcColor","dstColor","srcAlpha","dstAlpha","masked","invertedMask","shaderSet","vertexArray","uvArray","tex","colorChannel","textureNo","textureId","matrix4x4","baseColor","multiplyColor","screenColor","indexArray","rect","CubismShaderSet","vertexShaderSrcSetupMask","fragmentShaderSrcsetupMask","vertexShaderSrc","fragmentShaderSrcPremultipliedAlpha","vertexShaderSrcMasked","fragmentShaderSrcMaskPremultipliedAlpha","fragmentShaderSrcMaskInvertedPremultipliedAlpha","vertexShaderSource","fragmentShaderSource","shaderProgram","vertShader","fragShader","shaderType","shaderSource","shader","log","ShaderNames","ShaderNames2","$.CubismShaderSet","$.CubismShader_WebGL","$.ShaderNames","s_viewport","s_fbo","CubismClippingManager_WebGL","CubismRenderTextureResource","CubismClippingContext_WebGL","allClipedDrawRect","clipContextRenderTexture","clipDrawCount","clipDrawIndex","frameNo","texture","manager","CubismRendererProfile_WebGL","enabled","CubismRenderer_WebGL","maskBufferCount","modelTextureNo","glTexture","drawableCount","renderOrder","order","indexCount","fbo","viewport","clip","$.CubismClippingContext_WebGL","$.CubismClippingManager_WebGL","$.CubismRenderTextureResource","$.CubismRenderer_WebGL","DrawableColorData","isOverwritten","color","PartColorData","DrawableCullingData","isCulling","CubismModel","savedParameterCount","partColors","drawableColors","drawableindex","constantFlags","isOverwrittenCullings","partId","partCount","drawableId","dynamicFlags","multiplyColors","screenColors","partIds","drawableIds","userCulling","userMultiplyColor","userScreenColor","parentIndex","$.CubismModel","CubismMoc","mocBytes","shouldCheckMocConsistency","cubismMoc","moc","cubismModel","$.CubismMoc","CubismModelUserDataJson","$.CubismModelUserDataJson","ArtMesh","CubismModelUserDataNode","CubismModelUserData","modelUserData","typeOfArtMesh","nodeCount","addNode","$.CubismModelUserData","$.CubismModelUserDataNode","CubismUserModel","z","name","pointX","pointY","drawIndex","vertices","top","bottom","tx","ty","eventValue","caller","$.CubismUserModel","_LAppPal","filePath","response","arrayBuffer","LAppPal","LAppWavFileHandler","WavFileInfo","ByteReader","goalOffset","rms","channelCount","sampleCount","pcm","resolveValue","asyncFileLoad","responce","fmtChunkSize","dataChunkSize","e","pcm32","usechannel","reference","getSignature","referenceString","signatureOffset","FACE_OVAL_AND_CENTER","FACE_OVAL_AND_MOUTH","calListIndex","detect_list","landmarks","videoElement","canvasElement","canvasCtx","canvasHeight","canvasWidth","faceInclination","calFaceInclination","faceDirectionX","faceDirectionY","returnFaceDirectionData","mouthRatio","mouthRatioCal","bigBox1","getBigBox","bigBoxHeight","mouthHeight","convertData","bigBox","regX","regY","calcFacePosition","bigBoxWidth","gapVertical","gapHorizontal","dot","onResults","results","MP_FACE_CENTER_OVAL","MP_MOUTH_INFO","MP_CENTER_END_INFO","faceMesh","file","camera","LAppModel","dir","fileName","setting","error","modelFileName","loadCubismExpression","expressionName","expressionFileName","loadCubismPhysics","physicsFileName","loadCubismPose","poseFileName","setupEyeBlink","setupBreath","loadUserData","userDataFile","setupEyeBlinkIds","eyeBlinkIdCount","setupLipSyncIds","lipSyncIdCount","setupLayout","loadCubismMotion","group","motionGroupCount","textureCount","modelTextureNumber","texturePath","onLoad","textureInfo","LAppDelegate","dataRecive","motionUpdated","LAppDefine.MotionGroupIdle","LAppDefine.PriorityIdle","no","LAppDefine.PriorityForce","motionFileName","fadeTime","voice","path","expressionId","hitArenaName","drawId","tmpMotion","frameBuffer","matrix","LAppLive2DManager","self","LAppDefine.HitAreaNameHead","LAppDefine.HitAreaNameBody","LAppDefine.MotionGroupTapBody","LAppDefine.PriorityNormal","width","height","modelCount","projection","LAppDefine.ModelDirSize","LAppDefine.ModelDir","modelPath","LAppDefine.ResourcesPath","modelJsonName","LAppTextureManager","usePremultiply","img","TextureInfo","CubismViewMatrix","cy","scale","maxScale","minScale","targetScale","tr2","tr3","$.CubismViewMatrix","LAppSprite","Rect","programId","maxWidth","maxHeight","TouchManager","deviceX","deviceY","y1","y2","v2","absoluteValue1","absoluteValue2","LAppView","ratio","LAppDefine.ViewLogicalLeft","LAppDefine.ViewLogicalRight","LAppDefine.ViewScale","screenW","screenH","LAppDefine.ViewMaxScale","LAppDefine.ViewMinScale","LAppDefine.ViewLogicalMaxLeft","LAppDefine.ViewLogicalMaxRight","LAppDefine.ViewLogicalMaxBottom","LAppDefine.ViewLogicalMaxTop","live2DManager","textureManager","resourcesPath","imageName","LAppDefine.GearImageName","initGearTexture","fwidth","fheight","viewX","viewY","screenX","screenY","onTouchBegan","onTouchMoved","onTouchEnded","onTouchCancel","onClickBegan","onMouseMoved","onClickEnded","vertexShaderId","fragmentShaderId","LAppDefine.CubismLoggingLevel","posX","posY"],"mappings":"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"}